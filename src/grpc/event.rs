use super::pb;
impl pb::Event {
    pub fn from(e: &fsr::Event) -> pb::Event {
        pb::Event {
            event_id: e.event_id(),
            priority: e.priority(),
            owner: e.owner().to_string(),
            subclass_name: e.subclass_name().to_string(),
            key: e.key(),
            flags: e.flags(),
            headers: e.headers().clone(),
            body: e.body().to_string(),
        }
    }
}

#[repr(u32)]
pub enum EventTypes {
    SwitchEventCustom = 0,
    SwitchEventClone = 1,
    SwitchEventChannelCreate = 2,
    SwitchEventChannelDestroy = 3,
    SwitchEventChannelState = 4,
    SwitchEventChannelCallstate = 5,
    SwitchEventChannelAnswer = 6,
    SwitchEventChannelHangup = 7,
    SwitchEventChannelHangupComplete = 8,
    SwitchEventChannelExecute = 9,
    SwitchEventChannelExecuteComplete = 10,
    SwitchEventChannelHold = 11,
    SwitchEventChannelUnhold = 12,
    SwitchEventChannelBridge = 13,
    SwitchEventChannelUnbridge = 14,
    SwitchEventChannelProgress = 15,
    SwitchEventChannelProgressMedia = 16,
    SwitchEventChannelOutgoing = 17,
    SwitchEventChannelPark = 18,
    SwitchEventChannelUnpark = 19,
    SwitchEventChannelApplication = 20,
    SwitchEventChannelOriginate = 21,
    SwitchEventChannelUuid = 22,
    SwitchEventApi = 23,
    SwitchEventLog = 24,
    SwitchEventInboundChan = 25,
    SwitchEventOutboundChan = 26,
    SwitchEventStartup = 27,
    SwitchEventShutdown = 28,
    SwitchEventPublish = 29,
    SwitchEventUnpublish = 30,
    SwitchEventTalk = 31,
    SwitchEventNotalk = 32,
    SwitchEventSessionCrash = 33,
    SwitchEventModuleLoad = 34,
    SwitchEventModuleUnload = 35,
    SwitchEventDtmf = 36,
    SwitchEventMessage = 37,
    SwitchEventPresenceIn = 38,
    SwitchEventNotifyIn = 39,
    SwitchEventPresenceOut = 40,
    SwitchEventPresenceProbe = 41,
    SwitchEventMessageWaiting = 42,
    SwitchEventMessageQuery = 43,
    SwitchEventRoster = 44,
    SwitchEventCodec = 45,
    SwitchEventBackgroundJob = 46,
    SwitchEventDetectedSpeech = 47,
    SwitchEventDetectedTone = 48,
    SwitchEventPrivateCommand = 49,
    SwitchEventHeartbeat = 50,
    SwitchEventTrap = 51,
    SwitchEventAddSchedule = 52,
    SwitchEventDelSchedule = 53,
    SwitchEventExeSchedule = 54,
    SwitchEventReSchedule = 55,
    SwitchEventReloadxml = 56,
    SwitchEventNotify = 57,
    SwitchEventPhoneFeature = 58,
    SwitchEventPhoneFeatureSubscribe = 59,
    SwitchEventSendMessage = 60,
    SwitchEventRecvMessage = 61,
    SwitchEventRequestParams = 62,
    SwitchEventChannelData = 63,
    SwitchEventGeneral = 64,
    SwitchEventCommand = 65,
    SwitchEventSessionHeartbeat = 66,
    SwitchEventClientDisconnected = 67,
    SwitchEventServerDisconnected = 68,
    SwitchEventSendInfo = 69,
    SwitchEventRecvInfo = 70,
    SwitchEventRecvRtcpMessage = 71,
    SwitchEventSendRtcpMessage = 72,
    SwitchEventCallSecure = 73,
    SwitchEventNat = 74,
    SwitchEventRecordStart = 75,
    SwitchEventRecordStop = 76,
    SwitchEventPlaybackStart = 77,
    SwitchEventPlaybackStop = 78,
    SwitchEventCallUpdate = 79,
    SwitchEventFailure = 80,
    SwitchEventSocketData = 81,
    SwitchEventMediaBugStart = 82,
    SwitchEventMediaBugStop = 83,
    SwitchEventConferenceDataQuery = 84,
    SwitchEventConferenceData = 85,
    SwitchEventCallSetupReq = 86,
    SwitchEventCallSetupResult = 87,
    SwitchEventCallDetail = 88,
    SwitchEventDeviceState = 89,
    SwitchEventText = 90,
    SwitchEventShutdownRequested = 91,
    SwitchEventAll = 92,
}
impl EventTypes {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EventTypes::SwitchEventCustom => "SWITCH_EVENT_CUSTOM",
            EventTypes::SwitchEventClone => "SWITCH_EVENT_CLONE",
            EventTypes::SwitchEventChannelCreate => "SWITCH_EVENT_CHANNEL_CREATE",
            EventTypes::SwitchEventChannelDestroy => "SWITCH_EVENT_CHANNEL_DESTROY",
            EventTypes::SwitchEventChannelState => "SWITCH_EVENT_CHANNEL_STATE",
            EventTypes::SwitchEventChannelCallstate => "SWITCH_EVENT_CHANNEL_CALLSTATE",
            EventTypes::SwitchEventChannelAnswer => "SWITCH_EVENT_CHANNEL_ANSWER",
            EventTypes::SwitchEventChannelHangup => "SWITCH_EVENT_CHANNEL_HANGUP",
            EventTypes::SwitchEventChannelHangupComplete => "SWITCH_EVENT_CHANNEL_HANGUP_COMPLETE",
            EventTypes::SwitchEventChannelExecute => "SWITCH_EVENT_CHANNEL_EXECUTE",
            EventTypes::SwitchEventChannelExecuteComplete => {
                "SWITCH_EVENT_CHANNEL_EXECUTE_COMPLETE"
            }
            EventTypes::SwitchEventChannelHold => "SWITCH_EVENT_CHANNEL_HOLD",
            EventTypes::SwitchEventChannelUnhold => "SWITCH_EVENT_CHANNEL_UNHOLD",
            EventTypes::SwitchEventChannelBridge => "SWITCH_EVENT_CHANNEL_BRIDGE",
            EventTypes::SwitchEventChannelUnbridge => "SWITCH_EVENT_CHANNEL_UNBRIDGE",
            EventTypes::SwitchEventChannelProgress => "SWITCH_EVENT_CHANNEL_PROGRESS",
            EventTypes::SwitchEventChannelProgressMedia => "SWITCH_EVENT_CHANNEL_PROGRESS_MEDIA",
            EventTypes::SwitchEventChannelOutgoing => "SWITCH_EVENT_CHANNEL_OUTGOING",
            EventTypes::SwitchEventChannelPark => "SWITCH_EVENT_CHANNEL_PARK",
            EventTypes::SwitchEventChannelUnpark => "SWITCH_EVENT_CHANNEL_UNPARK",
            EventTypes::SwitchEventChannelApplication => "SWITCH_EVENT_CHANNEL_APPLICATION",
            EventTypes::SwitchEventChannelOriginate => "SWITCH_EVENT_CHANNEL_ORIGINATE",
            EventTypes::SwitchEventChannelUuid => "SWITCH_EVENT_CHANNEL_UUID",
            EventTypes::SwitchEventApi => "SWITCH_EVENT_API",
            EventTypes::SwitchEventLog => "SWITCH_EVENT_LOG",
            EventTypes::SwitchEventInboundChan => "SWITCH_EVENT_INBOUND_CHAN",
            EventTypes::SwitchEventOutboundChan => "SWITCH_EVENT_OUTBOUND_CHAN",
            EventTypes::SwitchEventStartup => "SWITCH_EVENT_STARTUP",
            EventTypes::SwitchEventShutdown => "SWITCH_EVENT_SHUTDOWN",
            EventTypes::SwitchEventPublish => "SWITCH_EVENT_PUBLISH",
            EventTypes::SwitchEventUnpublish => "SWITCH_EVENT_UNPUBLISH",
            EventTypes::SwitchEventTalk => "SWITCH_EVENT_TALK",
            EventTypes::SwitchEventNotalk => "SWITCH_EVENT_NOTALK",
            EventTypes::SwitchEventSessionCrash => "SWITCH_EVENT_SESSION_CRASH",
            EventTypes::SwitchEventModuleLoad => "SWITCH_EVENT_MODULE_LOAD",
            EventTypes::SwitchEventModuleUnload => "SWITCH_EVENT_MODULE_UNLOAD",
            EventTypes::SwitchEventDtmf => "SWITCH_EVENT_DTMF",
            EventTypes::SwitchEventMessage => "SWITCH_EVENT_MESSAGE",
            EventTypes::SwitchEventPresenceIn => "SWITCH_EVENT_PRESENCE_IN",
            EventTypes::SwitchEventNotifyIn => "SWITCH_EVENT_NOTIFY_IN",
            EventTypes::SwitchEventPresenceOut => "SWITCH_EVENT_PRESENCE_OUT",
            EventTypes::SwitchEventPresenceProbe => "SWITCH_EVENT_PRESENCE_PROBE",
            EventTypes::SwitchEventMessageWaiting => "SWITCH_EVENT_MESSAGE_WAITING",
            EventTypes::SwitchEventMessageQuery => "SWITCH_EVENT_MESSAGE_QUERY",
            EventTypes::SwitchEventRoster => "SWITCH_EVENT_ROSTER",
            EventTypes::SwitchEventCodec => "SWITCH_EVENT_CODEC",
            EventTypes::SwitchEventBackgroundJob => "SWITCH_EVENT_BACKGROUND_JOB",
            EventTypes::SwitchEventDetectedSpeech => "SWITCH_EVENT_DETECTED_SPEECH",
            EventTypes::SwitchEventDetectedTone => "SWITCH_EVENT_DETECTED_TONE",
            EventTypes::SwitchEventPrivateCommand => "SWITCH_EVENT_PRIVATE_COMMAND",
            EventTypes::SwitchEventHeartbeat => "SWITCH_EVENT_HEARTBEAT",
            EventTypes::SwitchEventTrap => "SWITCH_EVENT_TRAP",
            EventTypes::SwitchEventAddSchedule => "SWITCH_EVENT_ADD_SCHEDULE",
            EventTypes::SwitchEventDelSchedule => "SWITCH_EVENT_DEL_SCHEDULE",
            EventTypes::SwitchEventExeSchedule => "SWITCH_EVENT_EXE_SCHEDULE",
            EventTypes::SwitchEventReSchedule => "SWITCH_EVENT_RE_SCHEDULE",
            EventTypes::SwitchEventReloadxml => "SWITCH_EVENT_RELOADXML",
            EventTypes::SwitchEventNotify => "SWITCH_EVENT_NOTIFY",
            EventTypes::SwitchEventPhoneFeature => "SWITCH_EVENT_PHONE_FEATURE",
            EventTypes::SwitchEventPhoneFeatureSubscribe => "SWITCH_EVENT_PHONE_FEATURE_SUBSCRIBE",
            EventTypes::SwitchEventSendMessage => "SWITCH_EVENT_SEND_MESSAGE",
            EventTypes::SwitchEventRecvMessage => "SWITCH_EVENT_RECV_MESSAGE",
            EventTypes::SwitchEventRequestParams => "SWITCH_EVENT_REQUEST_PARAMS",
            EventTypes::SwitchEventChannelData => "SWITCH_EVENT_CHANNEL_DATA",
            EventTypes::SwitchEventGeneral => "SWITCH_EVENT_GENERAL",
            EventTypes::SwitchEventCommand => "SWITCH_EVENT_COMMAND",
            EventTypes::SwitchEventSessionHeartbeat => "SWITCH_EVENT_SESSION_HEARTBEAT",
            EventTypes::SwitchEventClientDisconnected => "SWITCH_EVENT_CLIENT_DISCONNECTED",
            EventTypes::SwitchEventServerDisconnected => "SWITCH_EVENT_SERVER_DISCONNECTED",
            EventTypes::SwitchEventSendInfo => "SWITCH_EVENT_SEND_INFO",
            EventTypes::SwitchEventRecvInfo => "SWITCH_EVENT_RECV_INFO",
            EventTypes::SwitchEventRecvRtcpMessage => "SWITCH_EVENT_RECV_RTCP_MESSAGE",
            EventTypes::SwitchEventSendRtcpMessage => "SWITCH_EVENT_SEND_RTCP_MESSAGE",
            EventTypes::SwitchEventCallSecure => "SWITCH_EVENT_CALL_SECURE",
            EventTypes::SwitchEventNat => "SWITCH_EVENT_NAT",
            EventTypes::SwitchEventRecordStart => "SWITCH_EVENT_RECORD_START",
            EventTypes::SwitchEventRecordStop => "SWITCH_EVENT_RECORD_STOP",
            EventTypes::SwitchEventPlaybackStart => "SWITCH_EVENT_PLAYBACK_START",
            EventTypes::SwitchEventPlaybackStop => "SWITCH_EVENT_PLAYBACK_STOP",
            EventTypes::SwitchEventCallUpdate => "SWITCH_EVENT_CALL_UPDATE",
            EventTypes::SwitchEventFailure => "SWITCH_EVENT_FAILURE",
            EventTypes::SwitchEventSocketData => "SWITCH_EVENT_SOCKET_DATA",
            EventTypes::SwitchEventMediaBugStart => "SWITCH_EVENT_MEDIA_BUG_START",
            EventTypes::SwitchEventMediaBugStop => "SWITCH_EVENT_MEDIA_BUG_STOP",
            EventTypes::SwitchEventConferenceDataQuery => "SWITCH_EVENT_CONFERENCE_DATA_QUERY",
            EventTypes::SwitchEventConferenceData => "SWITCH_EVENT_CONFERENCE_DATA",
            EventTypes::SwitchEventCallSetupReq => "SWITCH_EVENT_CALL_SETUP_REQ",
            EventTypes::SwitchEventCallSetupResult => "SWITCH_EVENT_CALL_SETUP_RESULT",
            EventTypes::SwitchEventCallDetail => "SWITCH_EVENT_CALL_DETAIL",
            EventTypes::SwitchEventDeviceState => "SWITCH_EVENT_DEVICE_STATE",
            EventTypes::SwitchEventText => "SWITCH_EVENT_TEXT",
            EventTypes::SwitchEventShutdownRequested => "SWITCH_EVENT_SHUTDOWN_REQUESTED",
            EventTypes::SwitchEventAll => "SWITCH_EVENT_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWITCH_EVENT_CUSTOM" => Some(Self::SwitchEventCustom),
            "SWITCH_EVENT_CLONE" => Some(Self::SwitchEventClone),
            "SWITCH_EVENT_CHANNEL_CREATE" => Some(Self::SwitchEventChannelCreate),
            "SWITCH_EVENT_CHANNEL_DESTROY" => Some(Self::SwitchEventChannelDestroy),
            "SWITCH_EVENT_CHANNEL_STATE" => Some(Self::SwitchEventChannelState),
            "SWITCH_EVENT_CHANNEL_CALLSTATE" => Some(Self::SwitchEventChannelCallstate),
            "SWITCH_EVENT_CHANNEL_ANSWER" => Some(Self::SwitchEventChannelAnswer),
            "SWITCH_EVENT_CHANNEL_HANGUP" => Some(Self::SwitchEventChannelHangup),
            "SWITCH_EVENT_CHANNEL_HANGUP_COMPLETE" => Some(Self::SwitchEventChannelHangupComplete),
            "SWITCH_EVENT_CHANNEL_EXECUTE" => Some(Self::SwitchEventChannelExecute),
            "SWITCH_EVENT_CHANNEL_EXECUTE_COMPLETE" => {
                Some(Self::SwitchEventChannelExecuteComplete)
            }
            "SWITCH_EVENT_CHANNEL_HOLD" => Some(Self::SwitchEventChannelHold),
            "SWITCH_EVENT_CHANNEL_UNHOLD" => Some(Self::SwitchEventChannelUnhold),
            "SWITCH_EVENT_CHANNEL_BRIDGE" => Some(Self::SwitchEventChannelBridge),
            "SWITCH_EVENT_CHANNEL_UNBRIDGE" => Some(Self::SwitchEventChannelUnbridge),
            "SWITCH_EVENT_CHANNEL_PROGRESS" => Some(Self::SwitchEventChannelProgress),
            "SWITCH_EVENT_CHANNEL_PROGRESS_MEDIA" => Some(Self::SwitchEventChannelProgressMedia),
            "SWITCH_EVENT_CHANNEL_OUTGOING" => Some(Self::SwitchEventChannelOutgoing),
            "SWITCH_EVENT_CHANNEL_PARK" => Some(Self::SwitchEventChannelPark),
            "SWITCH_EVENT_CHANNEL_UNPARK" => Some(Self::SwitchEventChannelUnpark),
            "SWITCH_EVENT_CHANNEL_APPLICATION" => Some(Self::SwitchEventChannelApplication),
            "SWITCH_EVENT_CHANNEL_ORIGINATE" => Some(Self::SwitchEventChannelOriginate),
            "SWITCH_EVENT_CHANNEL_UUID" => Some(Self::SwitchEventChannelUuid),
            "SWITCH_EVENT_API" => Some(Self::SwitchEventApi),
            "SWITCH_EVENT_LOG" => Some(Self::SwitchEventLog),
            "SWITCH_EVENT_INBOUND_CHAN" => Some(Self::SwitchEventInboundChan),
            "SWITCH_EVENT_OUTBOUND_CHAN" => Some(Self::SwitchEventOutboundChan),
            "SWITCH_EVENT_STARTUP" => Some(Self::SwitchEventStartup),
            "SWITCH_EVENT_SHUTDOWN" => Some(Self::SwitchEventShutdown),
            "SWITCH_EVENT_PUBLISH" => Some(Self::SwitchEventPublish),
            "SWITCH_EVENT_UNPUBLISH" => Some(Self::SwitchEventUnpublish),
            "SWITCH_EVENT_TALK" => Some(Self::SwitchEventTalk),
            "SWITCH_EVENT_NOTALK" => Some(Self::SwitchEventNotalk),
            "SWITCH_EVENT_SESSION_CRASH" => Some(Self::SwitchEventSessionCrash),
            "SWITCH_EVENT_MODULE_LOAD" => Some(Self::SwitchEventModuleLoad),
            "SWITCH_EVENT_MODULE_UNLOAD" => Some(Self::SwitchEventModuleUnload),
            "SWITCH_EVENT_DTMF" => Some(Self::SwitchEventDtmf),
            "SWITCH_EVENT_MESSAGE" => Some(Self::SwitchEventMessage),
            "SWITCH_EVENT_PRESENCE_IN" => Some(Self::SwitchEventPresenceIn),
            "SWITCH_EVENT_NOTIFY_IN" => Some(Self::SwitchEventNotifyIn),
            "SWITCH_EVENT_PRESENCE_OUT" => Some(Self::SwitchEventPresenceOut),
            "SWITCH_EVENT_PRESENCE_PROBE" => Some(Self::SwitchEventPresenceProbe),
            "SWITCH_EVENT_MESSAGE_WAITING" => Some(Self::SwitchEventMessageWaiting),
            "SWITCH_EVENT_MESSAGE_QUERY" => Some(Self::SwitchEventMessageQuery),
            "SWITCH_EVENT_ROSTER" => Some(Self::SwitchEventRoster),
            "SWITCH_EVENT_CODEC" => Some(Self::SwitchEventCodec),
            "SWITCH_EVENT_BACKGROUND_JOB" => Some(Self::SwitchEventBackgroundJob),
            "SWITCH_EVENT_DETECTED_SPEECH" => Some(Self::SwitchEventDetectedSpeech),
            "SWITCH_EVENT_DETECTED_TONE" => Some(Self::SwitchEventDetectedTone),
            "SWITCH_EVENT_PRIVATE_COMMAND" => Some(Self::SwitchEventPrivateCommand),
            "SWITCH_EVENT_HEARTBEAT" => Some(Self::SwitchEventHeartbeat),
            "SWITCH_EVENT_TRAP" => Some(Self::SwitchEventTrap),
            "SWITCH_EVENT_ADD_SCHEDULE" => Some(Self::SwitchEventAddSchedule),
            "SWITCH_EVENT_DEL_SCHEDULE" => Some(Self::SwitchEventDelSchedule),
            "SWITCH_EVENT_EXE_SCHEDULE" => Some(Self::SwitchEventExeSchedule),
            "SWITCH_EVENT_RE_SCHEDULE" => Some(Self::SwitchEventReSchedule),
            "SWITCH_EVENT_RELOADXML" => Some(Self::SwitchEventReloadxml),
            "SWITCH_EVENT_NOTIFY" => Some(Self::SwitchEventNotify),
            "SWITCH_EVENT_PHONE_FEATURE" => Some(Self::SwitchEventPhoneFeature),
            "SWITCH_EVENT_PHONE_FEATURE_SUBSCRIBE" => Some(Self::SwitchEventPhoneFeatureSubscribe),
            "SWITCH_EVENT_SEND_MESSAGE" => Some(Self::SwitchEventSendMessage),
            "SWITCH_EVENT_RECV_MESSAGE" => Some(Self::SwitchEventRecvMessage),
            "SWITCH_EVENT_REQUEST_PARAMS" => Some(Self::SwitchEventRequestParams),
            "SWITCH_EVENT_CHANNEL_DATA" => Some(Self::SwitchEventChannelData),
            "SWITCH_EVENT_GENERAL" => Some(Self::SwitchEventGeneral),
            "SWITCH_EVENT_COMMAND" => Some(Self::SwitchEventCommand),
            "SWITCH_EVENT_SESSION_HEARTBEAT" => Some(Self::SwitchEventSessionHeartbeat),
            "SWITCH_EVENT_CLIENT_DISCONNECTED" => Some(Self::SwitchEventClientDisconnected),
            "SWITCH_EVENT_SERVER_DISCONNECTED" => Some(Self::SwitchEventServerDisconnected),
            "SWITCH_EVENT_SEND_INFO" => Some(Self::SwitchEventSendInfo),
            "SWITCH_EVENT_RECV_INFO" => Some(Self::SwitchEventRecvInfo),
            "SWITCH_EVENT_RECV_RTCP_MESSAGE" => Some(Self::SwitchEventRecvRtcpMessage),
            "SWITCH_EVENT_SEND_RTCP_MESSAGE" => Some(Self::SwitchEventSendRtcpMessage),
            "SWITCH_EVENT_CALL_SECURE" => Some(Self::SwitchEventCallSecure),
            "SWITCH_EVENT_NAT" => Some(Self::SwitchEventNat),
            "SWITCH_EVENT_RECORD_START" => Some(Self::SwitchEventRecordStart),
            "SWITCH_EVENT_RECORD_STOP" => Some(Self::SwitchEventRecordStop),
            "SWITCH_EVENT_PLAYBACK_START" => Some(Self::SwitchEventPlaybackStart),
            "SWITCH_EVENT_PLAYBACK_STOP" => Some(Self::SwitchEventPlaybackStop),
            "SWITCH_EVENT_CALL_UPDATE" => Some(Self::SwitchEventCallUpdate),
            "SWITCH_EVENT_FAILURE" => Some(Self::SwitchEventFailure),
            "SWITCH_EVENT_SOCKET_DATA" => Some(Self::SwitchEventSocketData),
            "SWITCH_EVENT_MEDIA_BUG_START" => Some(Self::SwitchEventMediaBugStart),
            "SWITCH_EVENT_MEDIA_BUG_STOP" => Some(Self::SwitchEventMediaBugStop),
            "SWITCH_EVENT_CONFERENCE_DATA_QUERY" => Some(Self::SwitchEventConferenceDataQuery),
            "SWITCH_EVENT_CONFERENCE_DATA" => Some(Self::SwitchEventConferenceData),
            "SWITCH_EVENT_CALL_SETUP_REQ" => Some(Self::SwitchEventCallSetupReq),
            "SWITCH_EVENT_CALL_SETUP_RESULT" => Some(Self::SwitchEventCallSetupResult),
            "SWITCH_EVENT_CALL_DETAIL" => Some(Self::SwitchEventCallDetail),
            "SWITCH_EVENT_DEVICE_STATE" => Some(Self::SwitchEventDeviceState),
            "SWITCH_EVENT_TEXT" => Some(Self::SwitchEventText),
            "SWITCH_EVENT_SHUTDOWN_REQUESTED" => Some(Self::SwitchEventShutdownRequested),
            "SWITCH_EVENT_ALL" => Some(Self::SwitchEventAll),
            _ => None,
        }
    }
}
