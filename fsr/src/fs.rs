/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const SWITCH_SIZEOF_VOIDP: u32 = 8;
pub const SWITCH_PREFIX_DIR: &[u8; 22] = b"/usr/local/freeswitch\0";
pub const SWITCH_SSIZE_T_FMT: &[u8; 3] = b"ld\0";
pub const SWITCH_SIZE_T_FMT: &[u8; 3] = b"ld\0";
pub const SWITCH_INT64_T_FMT: &[u8; 3] = b"ld\0";
pub const SWITCH_UINT64_T_FMT: &[u8; 3] = b"lu\0";
pub const FREESWITCH_PEN: &[u8; 6] = b"27880\0";
pub const FREESWITCH_OID_PREFIX: &[u8; 19] = b".1.3.6.1.4.1.27880\0";
pub const FREESWITCH_ITAD: &[u8; 4] = b"543\0";
pub const __EXTENSIONS__: u32 = 1;
pub const _XOPEN_SOURCE: u32 = 700;
pub const __BSD_VISIBLE: u32 = 1;
pub const O_BINARY: u32 = 0;
pub const TIME_T_FMT: &[u8; 3] = b"ld\0";
pub const FS_64BIT: u32 = 1;
pub const SWITCH_TIME_T_FMT: &[u8; 3] = b"ld\0";
pub const FALSE: u32 = 0;
pub const CJSON_VERSION_MAJOR: u32 = 1;
pub const CJSON_VERSION_MINOR: u32 = 7;
pub const CJSON_VERSION_PATCH: u32 = 12;
pub const cJSON_Invalid: u32 = 0;
pub const cJSON_False: u32 = 1;
pub const cJSON_True: u32 = 2;
pub const cJSON_NULL: u32 = 4;
pub const cJSON_Number: u32 = 8;
pub const cJSON_String: u32 = 16;
pub const cJSON_Array: u32 = 32;
pub const cJSON_Object: u32 = 64;
pub const cJSON_Raw: u32 = 128;
pub const cJSON_IsReference: u32 = 256;
pub const cJSON_StringIsConst: u32 = 512;
pub const CJSON_NESTING_LIMIT: u32 = 1000;
pub const VPX_IMAGE_ABI_VERSION: u32 = 4;
pub const VPX_IMG_FMT_PLANAR: u32 = 256;
pub const VPX_IMG_FMT_UV_FLIP: u32 = 512;
pub const VPX_IMG_FMT_HAS_ALPHA: u32 = 1024;
pub const VPX_IMG_FMT_HIGHBITDEPTH: u32 = 2048;
pub const VPX_PLANE_PACKED: u32 = 0;
pub const VPX_PLANE_Y: u32 = 0;
pub const VPX_PLANE_U: u32 = 1;
pub const VPX_PLANE_V: u32 = 2;
pub const VPX_PLANE_ALPHA: u32 = 3;
pub const SWITCH_IMG_FMT_PLANAR: u32 = 256;
pub const SWITCH_IMG_FMT_UV_FLIP: u32 = 512;
pub const SWITCH_IMG_FMT_HAS_ALPHA: u32 = 1024;
pub const SWITCH_PLANE_PACKED: u32 = 0;
pub const SWITCH_PLANE_Y: u32 = 0;
pub const SWITCH_PLANE_U: u32 = 1;
pub const SWITCH_PLANE_V: u32 = 2;
pub const SWITCH_PLANE_ALPHA: u32 = 3;
pub const VPX_IMG_FMT_HIGH: u32 = 2048;
pub const SWITCH_ENT_ORIGINATE_DELIM: &[u8; 4] = b":_:\0";
pub const SWITCH_BLANK_STRING: &[u8; 1] = b"\0";
pub const SWITCH_TON_UNDEF: u32 = 255;
pub const SWITCH_NUMPLAN_UNDEF: u32 = 255;
pub const SWITCH_SEQ_ESC: &[u8; 3] = b"\x1B[\0";
pub const SWITCH_SEQ_HOME_CHAR: u8 = 72u8;
pub const SWITCH_SEQ_HOME_CHAR_STR: &[u8; 2] = b"H\0";
pub const SWITCH_SEQ_CLEARLINE_CHAR: u8 = 49u8;
pub const SWITCH_SEQ_CLEARLINE_CHAR_STR: &[u8; 2] = b"1\0";
pub const SWITCH_SEQ_CLEARLINEEND_CHAR: &[u8; 2] = b"K\0";
pub const SWITCH_SEQ_CLEARSCR_CHAR0: u8 = 50u8;
pub const SWITCH_SEQ_CLEARSCR_CHAR1: u8 = 74u8;
pub const SWITCH_SEQ_CLEARSCR_CHAR: &[u8; 3] = b"2J\0";
pub const SWITCH_SEQ_AND_COLOR: &[u8; 2] = b";\0";
pub const SWITCH_SEQ_END_COLOR: &[u8; 2] = b"m\0";
pub const SWITCH_SEQ_F_BLACK: &[u8; 3] = b"30\0";
pub const SWITCH_SEQ_F_RED: &[u8; 3] = b"31\0";
pub const SWITCH_SEQ_F_GREEN: &[u8; 3] = b"32\0";
pub const SWITCH_SEQ_F_YELLOW: &[u8; 3] = b"33\0";
pub const SWITCH_SEQ_F_BLUE: &[u8; 3] = b"34\0";
pub const SWITCH_SEQ_F_MAGEN: &[u8; 3] = b"35\0";
pub const SWITCH_SEQ_F_CYAN: &[u8; 3] = b"36\0";
pub const SWITCH_SEQ_F_WHITE: &[u8; 3] = b"37\0";
pub const SWITCH_SEQ_B_BLACK: &[u8; 3] = b"40\0";
pub const SWITCH_SEQ_B_RED: &[u8; 3] = b"41\0";
pub const SWITCH_SEQ_B_GREEN: &[u8; 3] = b"42\0";
pub const SWITCH_SEQ_B_YELLOW: &[u8; 3] = b"43\0";
pub const SWITCH_SEQ_B_BLUE: &[u8; 3] = b"44\0";
pub const SWITCH_SEQ_B_MAGEN: &[u8; 3] = b"45\0";
pub const SWITCH_SEQ_B_CYAN: &[u8; 3] = b"46\0";
pub const SWITCH_SEQ_B_WHITE: &[u8; 3] = b"47\0";
pub const SWITCH_SEQ_FBLACK: &[u8; 6] = b"\x1B[30m\0";
pub const SWITCH_SEQ_FRED: &[u8; 6] = b"\x1B[31m\0";
pub const SWITCH_SEQ_FGREEN: &[u8; 6] = b"\x1B[32m\0";
pub const SWITCH_SEQ_FYELLOW: &[u8; 6] = b"\x1B[33m\0";
pub const SWITCH_SEQ_FBLUE: &[u8; 6] = b"\x1B[34m\0";
pub const SWITCH_SEQ_FMAGEN: &[u8; 6] = b"\x1B[35m\0";
pub const SWITCH_SEQ_FCYAN: &[u8; 6] = b"\x1B[36m\0";
pub const SWITCH_SEQ_FWHITE: &[u8; 6] = b"\x1B[37m\0";
pub const SWITCH_SEQ_BBLACK: &[u8; 6] = b"\x1B[40m\0";
pub const SWITCH_SEQ_BRED: &[u8; 6] = b"\x1B[41m\0";
pub const SWITCH_SEQ_BGREEN: &[u8; 6] = b"\x1B[42m\0";
pub const SWITCH_SEQ_BYELLOW: &[u8; 6] = b"\x1B[43m\0";
pub const SWITCH_SEQ_BBLUE: &[u8; 6] = b"\x1B[44m\0";
pub const SWITCH_SEQ_BMAGEN: &[u8; 6] = b"\x1B[45m\0";
pub const SWITCH_SEQ_BCYAN: &[u8; 6] = b"\x1B[46m\0";
pub const SWITCH_SEQ_BWHITE: &[u8; 6] = b"\x1B[47m\0";
pub const SWITCH_SEQ_HOME: &[u8; 4] = b"\x1B[H\0";
pub const SWITCH_SEQ_CLEARLINE: &[u8; 4] = b"\x1B[1\0";
pub const SWITCH_SEQ_CLEARLINEEND: &[u8; 4] = b"\x1B[K\0";
pub const SWITCH_SEQ_CLEARSCR: &[u8; 8] = b"\x1B[2J\x1B[H\0";
pub const SWITCH_DEFAULT_CLID_NAME: &[u8; 1] = b"\0";
pub const SWITCH_DEFAULT_CLID_NUMBER: &[u8; 11] = b"0000000000\0";
pub const SWITCH_DEFAULT_DTMF_DURATION: u32 = 2000;
pub const SWITCH_DEFAULT_TIMEOUT: u32 = 60;
pub const SWITCH_MIN_DTMF_DURATION: u32 = 400;
pub const SWITCH_MAX_DTMF_DURATION: u32 = 192000;
pub const SWITCH_PATH_SEPARATOR: &[u8; 2] = b"/\0";
pub const SWITCH_URL_SEPARATOR: &[u8; 4] = b"://\0";
pub const SWITCH_IGNORE_DISPLAY_UPDATES_VARIABLE: &[u8; 23] = b"ignore_display_updates\0";
pub const SWITCH_AUDIO_SPOOL_PATH_VARIABLE: &[u8; 17] = b"audio_spool_path\0";
pub const SWITCH_BRIDGE_HANGUP_CAUSE_VARIABLE: &[u8; 20] = b"bridge_hangup_cause\0";
pub const SWITCH_READ_TERMINATOR_USED_VARIABLE: &[u8; 21] = b"read_terminator_used\0";
pub const SWITCH_SEND_SILENCE_WHEN_IDLE_VARIABLE: &[u8; 23] = b"send_silence_when_idle\0";
pub const SWITCH_CURRENT_APPLICATION_VARIABLE: &[u8; 20] = b"current_application\0";
pub const SWITCH_CURRENT_APPLICATION_DATA_VARIABLE: &[u8; 25] = b"current_application_data\0";
pub const SWITCH_CURRENT_APPLICATION_RESPONSE_VARIABLE: &[u8; 29] =
    b"current_application_response\0";
pub const SWITCH_PASSTHRU_PTIME_MISMATCH_VARIABLE: &[u8; 24] = b"passthru_ptime_mismatch\0";
pub const SWITCH_ENABLE_HEARTBEAT_EVENTS_VARIABLE: &[u8; 24] = b"enable_heartbeat_events\0";
pub const SWITCH_BYPASS_MEDIA_AFTER_BRIDGE_VARIABLE: &[u8; 26] = b"bypass_media_after_bridge\0";
pub const SWITCH_READ_RESULT_VARIABLE: &[u8; 12] = b"read_result\0";
pub const SWITCH_ATT_XFER_RESULT_VARIABLE: &[u8; 16] = b"att_xfer_result\0";
pub const SWITCH_COPY_XML_CDR_VARIABLE: &[u8; 13] = b"copy_xml_cdr\0";
pub const SWITCH_COPY_JSON_CDR_VARIABLE: &[u8; 14] = b"copy_json_cdr\0";
pub const SWITCH_PROTO_SPECIFIC_HANGUP_CAUSE_VARIABLE: &[u8; 28] = b"proto_specific_hangup_cause\0";
pub const SWITCH_TRANSFER_HISTORY_VARIABLE: &[u8; 17] = b"transfer_history\0";
pub const SWITCH_TRANSFER_SOURCE_VARIABLE: &[u8; 16] = b"transfer_source\0";
pub const SWITCH_SENSITIVE_DTMF_VARIABLE: &[u8; 15] = b"sensitive_dtmf\0";
pub const SWITCH_RECORD_POST_PROCESS_EXEC_APP_VARIABLE: &[u8; 29] =
    b"record_post_process_exec_app\0";
pub const SWITCH_RECORD_POST_PROCESS_EXEC_API_VARIABLE: &[u8; 29] =
    b"record_post_process_exec_api\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_ANSWER_VARIABLE: &[u8; 18] = b"execute_on_answer\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_PRE_ANSWER_VARIABLE: &[u8; 22] = b"execute_on_pre_answer\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_MEDIA_VARIABLE: &[u8; 17] = b"execute_on_media\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_RING_VARIABLE: &[u8; 16] = b"execute_on_ring\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_TONE_DETECT_VARIABLE: &[u8; 23] = b"execute_on_tone_detect\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_ORIGINATE_VARIABLE: &[u8; 21] = b"execute_on_originate\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_POST_ORIGINATE_VARIABLE: &[u8; 26] =
    b"execute_on_post_originate\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_PRE_ORIGINATE_VARIABLE: &[u8; 25] =
    b"execute_on_pre_originate\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_PRE_BRIDGE_VARIABLE: &[u8; 22] = b"execute_on_pre_bridge\0";
pub const SWITCH_CHANNEL_EXECUTE_ON_POST_BRIDGE_VARIABLE: &[u8; 23] = b"execute_on_post_bridge\0";
pub const SWITCH_CHANNEL_API_ON_ANSWER_VARIABLE: &[u8; 14] = b"api_on_answer\0";
pub const SWITCH_CHANNEL_API_ON_PRE_ANSWER_VARIABLE: &[u8; 18] = b"api_on_pre_answer\0";
pub const SWITCH_CHANNEL_API_ON_MEDIA_VARIABLE: &[u8; 13] = b"api_on_media\0";
pub const SWITCH_CHANNEL_API_ON_RING_VARIABLE: &[u8; 12] = b"api_on_ring\0";
pub const SWITCH_CHANNEL_API_ON_TONE_DETECT_VARIABLE: &[u8; 19] = b"api_on_tone_detect\0";
pub const SWITCH_CHANNEL_API_ON_ORIGINATE_VARIABLE: &[u8; 17] = b"api_on_originate\0";
pub const SWITCH_CHANNEL_API_ON_POST_ORIGINATE_VARIABLE: &[u8; 22] = b"api_on_post_originate\0";
pub const SWITCH_CHANNEL_API_ON_PRE_ORIGINATE_VARIABLE: &[u8; 21] = b"api_on_pre_originate\0";
pub const SWITCH_CALL_TIMEOUT_VARIABLE: &[u8; 13] = b"call_timeout\0";
pub const SWITCH_HOLDING_UUID_VARIABLE: &[u8; 13] = b"holding_uuid\0";
pub const SWITCH_SOFT_HOLDING_UUID_VARIABLE: &[u8; 18] = b"soft_holding_uuid\0";
pub const SWITCH_API_BRIDGE_END_VARIABLE: &[u8; 17] = b"api_after_bridge\0";
pub const SWITCH_API_BRIDGE_START_VARIABLE: &[u8; 18] = b"api_before_bridge\0";
pub const SWITCH_API_HANGUP_HOOK_VARIABLE: &[u8; 16] = b"api_hangup_hook\0";
pub const SWITCH_API_REPORTING_HOOK_VARIABLE: &[u8; 19] = b"api_reporting_hook\0";
pub const SWITCH_SESSION_IN_HANGUP_HOOK_VARIABLE: &[u8; 23] = b"session_in_hangup_hook\0";
pub const SWITCH_PROCESS_CDR_VARIABLE: &[u8; 12] = b"process_cdr\0";
pub const SWITCH_SKIP_CDR_CAUSES_VARIABLE: &[u8; 16] = b"skip_cdr_causes\0";
pub const SWITCH_FORCE_PROCESS_CDR_VARIABLE: &[u8; 18] = b"force_process_cdr\0";
pub const SWITCH_BRIDGE_CHANNEL_VARIABLE: &[u8; 15] = b"bridge_channel\0";
pub const SWITCH_CHANNEL_NAME_VARIABLE: &[u8; 13] = b"channel_name\0";
pub const SWITCH_BRIDGE_UUID_VARIABLE: &[u8; 12] = b"bridge_uuid\0";
pub const SWITCH_CONTINUE_ON_FAILURE_VARIABLE: &[u8; 17] = b"continue_on_fail\0";
pub const SWITCH_PLAYBACK_TERMINATORS_VARIABLE: &[u8; 21] = b"playback_terminators\0";
pub const SWITCH_PLAYBACK_TERMINATOR_USED: &[u8; 25] = b"playback_terminator_used\0";
pub const SWITCH_CACHE_SPEECH_HANDLES_VARIABLE: &[u8; 21] = b"cache_speech_handles\0";
pub const SWITCH_CACHE_SPEECH_HANDLES_OBJ_NAME: &[u8; 29] = b"__cache_speech_handles_obj__\0";
pub const SWITCH_BYPASS_MEDIA_VARIABLE: &[u8; 13] = b"bypass_media\0";
pub const SWITCH_PROXY_MEDIA_VARIABLE: &[u8; 12] = b"proxy_media\0";
pub const SWITCH_ENDPOINT_DISPOSITION_VARIABLE: &[u8; 21] = b"endpoint_disposition\0";
pub const SWITCH_HOLD_MUSIC_VARIABLE: &[u8; 11] = b"hold_music\0";
pub const SWITCH_TEMP_HOLD_MUSIC_VARIABLE: &[u8; 16] = b"temp_hold_music\0";
pub const SWITCH_EXPORT_VARS_VARIABLE: &[u8; 12] = b"export_vars\0";
pub const SWITCH_BRIDGE_EXPORT_VARS_VARIABLE: &[u8; 19] = b"bridge_export_vars\0";
pub const SWITCH_R_SDP_VARIABLE: &[u8; 13] = b"switch_r_sdp\0";
pub const SWITCH_L_SDP_VARIABLE: &[u8; 13] = b"switch_l_sdp\0";
pub const SWITCH_B_SDP_VARIABLE: &[u8; 13] = b"switch_m_sdp\0";
pub const SWITCH_BRIDGE_VARIABLE: &[u8; 10] = b"bridge_to\0";
pub const SWITCH_LAST_BRIDGE_VARIABLE: &[u8; 15] = b"last_bridge_to\0";
pub const SWITCH_SIGNAL_BRIDGE_VARIABLE: &[u8; 17] = b"signal_bridge_to\0";
pub const SWITCH_SIGNAL_BOND_VARIABLE: &[u8; 12] = b"signal_bond\0";
pub const SWITCH_ORIGINATE_SIGNAL_BOND_VARIABLE: &[u8; 22] = b"originate_signal_bond\0";
pub const SWITCH_ORIGINATOR_VARIABLE: &[u8; 11] = b"originator\0";
pub const SWITCH_ORIGINATOR_CODEC_VARIABLE: &[u8; 17] = b"originator_codec\0";
pub const SWITCH_ORIGINATOR_VIDEO_CODEC_VARIABLE: &[u8; 23] = b"originator_video_codec\0";
pub const SWITCH_LOCAL_MEDIA_IP_VARIABLE: &[u8; 15] = b"local_media_ip\0";
pub const SWITCH_LOCAL_MEDIA_PORT_VARIABLE: &[u8; 17] = b"local_media_port\0";
pub const SWITCH_ADVERTISED_MEDIA_IP_VARIABLE: &[u8; 20] = b"advertised_media_ip\0";
pub const SWITCH_REMOTE_MEDIA_IP_VARIABLE: &[u8; 16] = b"remote_media_ip\0";
pub const SWITCH_REMOTE_MEDIA_PORT_VARIABLE: &[u8; 18] = b"remote_media_port\0";
pub const SWITCH_REMOTE_VIDEO_IP_VARIABLE: &[u8; 16] = b"remote_video_ip\0";
pub const SWITCH_REMOTE_VIDEO_PORT_VARIABLE: &[u8; 18] = b"remote_video_port\0";
pub const SWITCH_LOCAL_VIDEO_IP_VARIABLE: &[u8; 15] = b"local_video_ip\0";
pub const SWITCH_LOCAL_VIDEO_PORT_VARIABLE: &[u8; 17] = b"local_video_port\0";
pub const SWITCH_LOCAL_TEXT_IP_VARIABLE: &[u8; 14] = b"local_text_ip\0";
pub const SWITCH_LOCAL_TEXT_PORT_VARIABLE: &[u8; 16] = b"local_text_port\0";
pub const SWITCH_HANGUP_AFTER_BRIDGE_VARIABLE: &[u8; 20] = b"hangup_after_bridge\0";
pub const SWITCH_PARK_AFTER_BRIDGE_VARIABLE: &[u8; 18] = b"park_after_bridge\0";
pub const SWITCH_PARK_AFTER_EARLY_BRIDGE_VARIABLE: &[u8; 24] = b"park_after_early_bridge\0";
pub const SWITCH_TRANSFER_AFTER_BRIDGE_VARIABLE: &[u8; 22] = b"transfer_after_bridge\0";
pub const SWITCH_TRANSFER_AFTER_EARLY_BRIDGE_VARIABLE: &[u8; 28] = b"transfer_after_early_bridge\0";
pub const SWITCH_EXEC_AFTER_BRIDGE_APP_VARIABLE: &[u8; 22] = b"exec_after_bridge_app\0";
pub const SWITCH_EXEC_AFTER_BRIDGE_ARG_VARIABLE: &[u8; 22] = b"exec_after_bridge_arg\0";
pub const SWITCH_MAX_FORWARDS_VARIABLE: &[u8; 13] = b"max_forwards\0";
pub const SWITCH_RFC7989_SESSION_ID_VARIABLE: &[u8; 13] = b"session_uuid\0";
pub const SWITCH_RFC7989_REMOTE_SESSION_ID_VARIABLE: &[u8; 20] = b"remote_session_uuid\0";
pub const SWITCH_RFC7989_APP_SESSION_ID_VARIABLE: &[u8; 17] = b"app_session_uuid\0";
pub const SWITCH_RFC7989_GENERIC_PARAM_VARIABLE: &[u8; 27] = b"generic_param_session_uuid\0";
pub const SWITCH_MAX_SESSION_TRANSFERS_VARIABLE: &[u8; 22] = b"max_session_transfers\0";
pub const SWITCH_DISABLE_APP_LOG_VARIABLE: &[u8; 16] = b"disable_app_log\0";
pub const SWITCH_SPEECH_KEY: &[u8; 7] = b"speech\0";
pub const SWITCH_UUID_BRIDGE: &[u8; 12] = b"uuid_bridge\0";
pub const SWITCH_BITS_PER_BYTE: u32 = 8;
pub const SWITCH_DEFAULT_FILE_BUFFER_LEN: u32 = 65536;
pub const SWITCH_DTMF_LOG_LEN: u32 = 1000;
pub const SWITCH_MAX_TRANS: u32 = 2000;
pub const SWITCH_CORE_SESSION_MAX_PRIVATES: u32 = 2;
pub const SWITCH_DEFAULT_VIDEO_SIZE: u32 = 1200;
pub const SWITCH_RTCP_AUDIO_INTERVAL_MSEC: &[u8; 5] = b"1000\0";
pub const SWITCH_RTCP_VIDEO_INTERVAL_MSEC: &[u8; 5] = b"1000\0";
pub const MAX_FMTP_LEN: u32 = 256;
pub const JITTER_VARIANCE_THRESHOLD: f64 = 400.0;
pub const IPDV_THRESHOLD: f64 = 1.0;
pub const LOST_BURST_ANALYZE: u32 = 500;
pub const LOST_BURST_CAPTURE: u32 = 1024;
pub const SWITCH_MAX_STACKS: u32 = 32;
pub const SWITCH_THREAD_STACKSIZE: u32 = 245760;
pub const SWITCH_SYSTEM_THREAD_STACKSIZE: u32 = 8388608;
pub const SWITCH_MAX_INTERVAL: u32 = 120;
pub const SWITCH_INTERVAL_PAD: u32 = 10;
pub const SWITCH_MAX_SAMPLE_LEN: u32 = 48;
pub const SWITCH_BYTES_PER_SAMPLE: u32 = 2;
pub const SWITCH_RECOMMENDED_BUFFER_SIZE: u32 = 8192;
pub const SWITCH_MAX_CODECS: u32 = 50;
pub const SWITCH_MAX_STATE_HANDLERS: u32 = 30;
pub const SWITCH_CORE_QUEUE_LEN: u32 = 100000;
pub const SWITCH_MAX_MANAGEMENT_BUFFER_LEN: u32 = 8192;
pub const SWITCH_RTP_CNG_PAYLOAD: u32 = 13;
pub const SWITCH_MEDIA_TYPE_TOTAL: u32 = 3;
pub const SWITCH_SOCK_INVALID: i32 = -1;
pub const DMACHINE_MAX_DIGIT_LEN: u32 = 512;
pub const MAX_ARG_RECURSION: u32 = 25;
pub const SWITCH_API_VERSION: u32 = 5;
pub const SWITCH_RTP_MAX_CRYPTO_LEN: u32 = 64;
pub const SWITCH_CRYPTO_MKI_INDEX: u32 = 0;
pub const SWITCH_CRYPTO_MKI_MAX: u32 = 20;
pub const SWITCH_MUTEX_DEFAULT: u32 = 0;
pub const SWITCH_MUTEX_NESTED: u32 = 1;
pub const SWITCH_MUTEX_UNNESTED: u32 = 2;
pub const SWITCH_UUID_FORMATTED_LENGTH: u32 = 256;
pub const SWITCH_MD5_DIGESTSIZE: u32 = 16;
pub const SWITCH_MD5_DIGEST_STRING_SIZE: u32 = 33;
pub const SWITCH_SEEK_SET: u32 = 0;
pub const SWITCH_SEEK_CUR: u32 = 1;
pub const SWITCH_SEEK_END: u32 = 2;
pub const SWITCH_FPROT_USETID: u32 = 32768;
pub const SWITCH_FPROT_UREAD: u32 = 1024;
pub const SWITCH_FPROT_UWRITE: u32 = 512;
pub const SWITCH_FPROT_UEXECUTE: u32 = 256;
pub const SWITCH_FPROT_GSETID: u32 = 16384;
pub const SWITCH_FPROT_GREAD: u32 = 64;
pub const SWITCH_FPROT_GWRITE: u32 = 32;
pub const SWITCH_FPROT_GEXECUTE: u32 = 16;
pub const SWITCH_FPROT_WSTICKY: u32 = 8192;
pub const SWITCH_FPROT_WREAD: u32 = 4;
pub const SWITCH_FPROT_WWRITE: u32 = 2;
pub const SWITCH_FPROT_WEXECUTE: u32 = 1;
pub const SWITCH_FPROT_OS_DEFAULT: u32 = 4095;
pub const SWITCH_FPROT_FILE_SOURCE_PERMS: u32 = 4096;
pub const SWITCH_FLOCK_SHARED: u32 = 1;
pub const SWITCH_FLOCK_EXCLUSIVE: u32 = 2;
pub const SWITCH_FLOCK_TYPEMASK: u32 = 15;
pub const SWITCH_FLOCK_NONBLOCK: u32 = 16;
pub const SWITCH_FOPEN_READ: u32 = 1;
pub const SWITCH_FOPEN_WRITE: u32 = 2;
pub const SWITCH_FOPEN_CREATE: u32 = 4;
pub const SWITCH_FOPEN_APPEND: u32 = 8;
pub const SWITCH_FOPEN_TRUNCATE: u32 = 16;
pub const SWITCH_FOPEN_BINARY: u32 = 32;
pub const SWITCH_FOPEN_EXCL: u32 = 64;
pub const SWITCH_FOPEN_BUFFERED: u32 = 128;
pub const SWITCH_FOPEN_DELONCLOSE: u32 = 256;
pub const SWITCH_FOPEN_XTHREAD: u32 = 512;
pub const SWITCH_FOPEN_SHARELOCK: u32 = 1024;
pub const SWITCH_FOPEN_NOCLEANUP: u32 = 2048;
pub const SWITCH_FOPEN_SENDFILE_ENABLED: u32 = 4096;
pub const SWITCH_FOPEN_LARGEFILE: u32 = 16384;
pub const SWITCH_SO_LINGER: u32 = 1;
pub const SWITCH_SO_KEEPALIVE: u32 = 2;
pub const SWITCH_SO_DEBUG: u32 = 4;
pub const SWITCH_SO_NONBLOCK: u32 = 8;
pub const SWITCH_SO_REUSEADDR: u32 = 16;
pub const SWITCH_SO_SNDBUF: u32 = 64;
pub const SWITCH_SO_RCVBUF: u32 = 128;
pub const SWITCH_SO_DISCONNECTED: u32 = 256;
pub const SWITCH_SO_TCP_NODELAY: u32 = 512;
pub const SWITCH_SO_TCP_KEEPIDLE: u32 = 520;
pub const SWITCH_SO_TCP_KEEPINTVL: u32 = 530;
pub const SWITCH_SO_IPV6_V6ONLY: u32 = 16384;
pub const SWITCH_INET: u32 = 2;
pub const SWITCH_INET6: u32 = 10;
pub const SWITCH_UNSPEC: u32 = 0;
pub const SWITCH_PROTO_TCP: u32 = 6;
pub const SWITCH_PROTO_UDP: u32 = 17;
pub const SWITCH_PROTO_SCTP: u32 = 132;
pub const SWITCH_POLLIN: u32 = 1;
pub const SWITCH_POLLPRI: u32 = 2;
pub const SWITCH_POLLOUT: u32 = 4;
pub const SWITCH_POLLERR: u32 = 16;
pub const SWITCH_POLLHUP: u32 = 32;
pub const SWITCH_POLLNVAL: u32 = 64;
pub const SWITCH_CORE_DB_OK: u32 = 0;
pub const SWITCH_CORE_DB_ERROR: u32 = 1;
pub const SWITCH_CORE_DB_INTERNAL: u32 = 2;
pub const SWITCH_CORE_DB_PERM: u32 = 3;
pub const SWITCH_CORE_DB_ABORT: u32 = 4;
pub const SWITCH_CORE_DB_BUSY: u32 = 5;
pub const SWITCH_CORE_DB_LOCKED: u32 = 6;
pub const SWITCH_CORE_DB_NOMEM: u32 = 7;
pub const SWITCH_CORE_DB_READONLY: u32 = 8;
pub const SWITCH_CORE_DB_INTERRUPT: u32 = 9;
pub const SWITCH_CORE_DB_IOERR: u32 = 10;
pub const SWITCH_CORE_DB_CORRUPT: u32 = 11;
pub const SWITCH_CORE_DB_NOTFOUND: u32 = 12;
pub const SWITCH_CORE_DB_FULL: u32 = 13;
pub const SWITCH_CORE_DB_CANTOPEN: u32 = 14;
pub const SWITCH_CORE_DB_PROTOCOL: u32 = 15;
pub const SWITCH_CORE_DB_EMPTY: u32 = 16;
pub const SWITCH_CORE_DB_SCHEMA: u32 = 17;
pub const SWITCH_CORE_DB_TOOBIG: u32 = 18;
pub const SWITCH_CORE_DB_CONSTRAINT: u32 = 19;
pub const SWITCH_CORE_DB_MISMATCH: u32 = 20;
pub const SWITCH_CORE_DB_MISUSE: u32 = 21;
pub const SWITCH_CORE_DB_NOLFS: u32 = 22;
pub const SWITCH_CORE_DB_AUTH: u32 = 23;
pub const SWITCH_CORE_DB_FORMAT: u32 = 24;
pub const SWITCH_CORE_DB_RANGE: u32 = 25;
pub const SWITCH_CORE_DB_NOTADB: u32 = 26;
pub const SWITCH_CORE_DB_ROW: u32 = 100;
pub const SWITCH_CORE_DB_DONE: u32 = 101;
pub const SWITCH_MAX_CORE_THREAD_SESSION_OBJS: u32 = 128;
pub const SWITCH_MAX_STREAMS: u32 = 128;
pub const DTLS_SRTP_FNAME: &[u8; 10] = b"dtls-srtp\0";
pub const MAX_FPLEN: u32 = 64;
pub const MAX_FPSTRLEN: u32 = 192;
pub const MESSAGE_STRING_ARG_MAX: u32 = 10;
pub const CACHE_DB_LEN: u32 = 256;
pub const SWITCH_GRANULAR_VOLUME_MAX: u32 = 50;
pub const SWITCH_RESAMPLE_QUALITY: u32 = 2;
pub const SWITCH_CMD_CHUNK_LEN: u32 = 1024;
pub const SWITCH_URL_UNSAFE: &[u8; 24] = b"\r\n #%&+:;<=>?@[\\]^`{|}\"\0";
pub const MAX_NETWORK_PORTS: u32 = 10;
pub const SWITCH_SMAX: u32 = 32767;
pub const SWITCH_SMIN: i32 = -32768;
pub const MAX_REPORT_BLOCKS: u32 = 5;
pub const NO_EVENT_CHANNEL_ID: u32 = 0;
pub const SWITCH_EVENT_CHANNEL_GLOBAL: &[u8; 11] = b"__global__\0";
pub const CHROMAKEY_MAX_MASK: u32 = 25;
pub const SWITCH_RTP_MAX_BUF_LEN: u32 = 16384;
pub const SWITCH_RTCP_MAX_BUF_LEN: u32 = 16384;
pub const SWITCH_RTP_MAX_BUF_LEN_WORDS: u32 = 4094;
pub const SWITCH_RTP_CRYPTO_KEY_80: &[u8; 24] = b"AES_CM_128_HMAC_SHA1_80\0";
pub const SWITCH_RTP_BUNDLE_INTERNAL_PT: u32 = 21;
pub const MAX_CAND: u32 = 50;
pub const MAX_CAND_IDX_COUNT: u32 = 2;
pub const SWITCH_XML_BUFSIZE: u32 = 1024;
pub const DEFAULT_ODBC_RETRIES: u32 = 120;
pub const LIMIT_IGNORE_TRANSFER_VARIABLE: &[u8; 22] = b"limit_ignore_transfer\0";
pub const LIMIT_BACKEND_VARIABLE: &[u8; 14] = b"limit_backend\0";
pub const LIMIT_EVENT_USAGE: &[u8; 13] = b"limit::usage\0";
pub const LIMIT_DEF_XFER_EXTEN: &[u8; 15] = b"limit_exceeded\0";
pub const SWITCH_MAX_CAND_ACL: u32 = 25;
pub const SWITCH_NO_CRYPTO_TAG: i32 = -1;
pub const TELETONE_MAX_DTMF_DIGITS: u32 = 128;
pub const TELETONE_MAX_TONES: u32 = 18;
pub const TELETONE_TONE_RANGE: u32 = 127;
pub const TELETONE_VOL_DB_MAX: u32 = 0;
pub const TELETONE_VOL_DB_MIN: i32 = -63;
pub const MAX_PHASE_TONES: u32 = 4;
pub const SINE_TABLE_MAX: u32 = 128;
pub const SINE_TABLE_LEN: u32 = 127;
pub const MAX_PHASE_ACCUMULATOR: u64 = 4294967296;
pub const DBM0_MAX_POWER: f64 = 6.16;
pub const DTMF_NORMAL_TWIST: f64 = 6.3;
pub const DTMF_REVERSE_TWIST: f64 = 2.5;
pub const DTMF_RELATIVE_PEAK_ROW: f64 = 6.3;
pub const DTMF_RELATIVE_PEAK_COL: f64 = 6.3;
pub const DTMF_2ND_HARMONIC_ROW: f64 = 2.5;
pub const DTMF_2ND_HARMONIC_COL: f64 = 63.1;
pub const GRID_FACTOR: u32 = 4;
pub const BLOCK_LEN: u32 = 102;
pub const M_TWO_PI: f64 = 6.283185307179586;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    _unused: [u8; 0],
}
pub type FILE = _IO_FILE;
pub type va_list = [u64; 4usize];
pub type pid_t = ::std::os::raw::c_int;
pub type time_t = ::std::os::raw::c_long;
pub type suseconds_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread {
    _unused: [u8; 0],
}
pub type pthread_t = *mut __pthread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: time_t,
    pub tv_usec: suseconds_t,
}
pub type socklen_t = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
pub type in_port_t = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_union: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __s6_addr: [u8; 16usize],
    pub __s6_addr16: [u16; 8usize],
    pub __s6_addr32: [u32; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
pub type switch_int32_t = i32;
pub type switch_size_t = usize;
pub type switch_ssize_t = isize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cJSON {
    pub next: *mut cJSON,
    pub prev: *mut cJSON,
    pub child: *mut cJSON,
    pub type_: ::std::os::raw::c_int,
    pub valuestring: *mut ::std::os::raw::c_char,
    pub valueint: ::std::os::raw::c_int,
    pub valuedouble: f64,
    pub string: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cJSON_Hooks {
    pub malloc_fn:
        ::std::option::Option<unsafe extern "C" fn(sz: usize) -> *mut ::std::os::raw::c_void>,
    pub free_fn: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
}
pub type cJSON_bool = ::std::os::raw::c_int;
extern "C" {
    pub fn cJSON_Version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_InitHooks(hooks: *mut cJSON_Hooks);
}
extern "C" {
    pub fn cJSON_Parse(value: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_ParseWithOpts(
        value: *const ::std::os::raw::c_char,
        return_parse_end: *mut *const ::std::os::raw::c_char,
        require_null_terminated: cJSON_bool,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_Print(item: *const cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintUnformatted(item: *const cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintBuffered(
        item: *const cJSON,
        prebuffer: ::std::os::raw::c_int,
        fmt: cJSON_bool,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_PrintPreallocated(
        item: *mut cJSON,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        format: cJSON_bool,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_Delete(c: *mut cJSON);
}
extern "C" {
    pub fn cJSON_GetArraySize(array: *const cJSON) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cJSON_GetArrayItem(array: *const cJSON, index: ::std::os::raw::c_int) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_GetObjectItem(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_GetObjectItemCaseSensitive(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_HasObjectItem(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_GetErrorPtr() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_GetStringValue(item: *mut cJSON) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSON_IsInvalid(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsFalse(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsTrue(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsBool(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsNull(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsNumber(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsString(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsArray(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsObject(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_IsRaw(item: *const cJSON) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_CreateNull() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateTrue() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateFalse() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateBool(boolean: cJSON_bool) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateNumber(num: f64) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateString(string: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateRaw(raw: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateArray() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateObject() -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateStringReference(string: *const ::std::os::raw::c_char) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateObjectReference(child: *const cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateArrayReference(child: *const cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateIntArray(
        numbers: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateFloatArray(numbers: *const f32, count: ::std::os::raw::c_int) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateDoubleArray(numbers: *const f64, count: ::std::os::raw::c_int)
        -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_CreateStringArray(
        strings: *mut *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddItemToArray(array: *mut cJSON, item: *mut cJSON);
}
extern "C" {
    pub fn cJSON_AddItemToObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_AddItemToObjectCS(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_AddItemReferenceToArray(array: *mut cJSON, item: *mut cJSON);
}
extern "C" {
    pub fn cJSON_AddItemReferenceToObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        item: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_DetachItemViaPointer(parent: *mut cJSON, item: *mut cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DetachItemFromArray(array: *mut cJSON, which: ::std::os::raw::c_int)
        -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DeleteItemFromArray(array: *mut cJSON, which: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cJSON_DetachItemFromObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DetachItemFromObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_DeleteItemFromObject(object: *mut cJSON, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cJSON_DeleteItemFromObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cJSON_InsertItemInArray(
        array: *mut cJSON,
        which: ::std::os::raw::c_int,
        newitem: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_ReplaceItemViaPointer(
        parent: *mut cJSON,
        item: *mut cJSON,
        replacement: *mut cJSON,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_ReplaceItemInArray(
        array: *mut cJSON,
        which: ::std::os::raw::c_int,
        newitem: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_ReplaceItemInObject(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        newitem: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_ReplaceItemInObjectCaseSensitive(
        object: *mut cJSON,
        string: *const ::std::os::raw::c_char,
        newitem: *mut cJSON,
    );
}
extern "C" {
    pub fn cJSON_Duplicate(item: *const cJSON, recurse: cJSON_bool) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_Compare(
        a: *const cJSON,
        b: *const cJSON,
        case_sensitive: cJSON_bool,
    ) -> cJSON_bool;
}
extern "C" {
    pub fn cJSON_Minify(json: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn cJSON_AddNullToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddTrueToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddFalseToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddBoolToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        boolean: cJSON_bool,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddNumberToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        number: f64,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddStringToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        string: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddRawToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
        raw: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddObjectToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_AddArrayToObject(
        object: *mut cJSON,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_SetNumberHelper(object: *mut cJSON, number: f64) -> f64;
}
extern "C" {
    pub fn cJSON_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cJSON_free(object: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cJSONUtils_GetPointer(
        object: *mut cJSON,
        pointer: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_GetPointerCaseSensitive(
        object: *mut cJSON,
        pointer: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_GeneratePatches(from: *mut cJSON, to: *mut cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_GeneratePatchesCaseSensitive(from: *mut cJSON, to: *mut cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_AddPatchToArray(
        array: *mut cJSON,
        operation: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        value: *const cJSON,
    );
}
extern "C" {
    pub fn cJSONUtils_ApplyPatches(
        object: *mut cJSON,
        patches: *const cJSON,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cJSONUtils_ApplyPatchesCaseSensitive(
        object: *mut cJSON,
        patches: *const cJSON,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cJSONUtils_MergePatch(target: *mut cJSON, patch: *const cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_MergePatchCaseSensitive(
        target: *mut cJSON,
        patch: *const cJSON,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_GenerateMergePatch(from: *mut cJSON, to: *mut cJSON) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_GenerateMergePatchCaseSensitive(
        from: *mut cJSON,
        to: *mut cJSON,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn cJSONUtils_FindPointerFromObjectTo(
        object: *const cJSON,
        target: *const cJSON,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cJSONUtils_SortObject(object: *mut cJSON);
}
extern "C" {
    pub fn cJSONUtils_SortObjectCaseSensitive(object: *mut cJSON);
}
extern "C" {
    pub fn cJSON_CreateStringPrintf(fmt: *const ::std::os::raw::c_char, ...) -> *mut cJSON;
}
extern "C" {
    pub fn cJSON_GetObjectCstr(
        object: *const cJSON,
        string: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_NONE: vpx_img_fmt = vpx_img_fmt(0);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB24: vpx_img_fmt = vpx_img_fmt(1);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB32: vpx_img_fmt = vpx_img_fmt(2);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB565: vpx_img_fmt = vpx_img_fmt(3);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB555: vpx_img_fmt = vpx_img_fmt(4);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_UYVY: vpx_img_fmt = vpx_img_fmt(5);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_YUY2: vpx_img_fmt = vpx_img_fmt(6);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_YVYU: vpx_img_fmt = vpx_img_fmt(7);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_BGR24: vpx_img_fmt = vpx_img_fmt(8);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB32_LE: vpx_img_fmt = vpx_img_fmt(9);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_ARGB: vpx_img_fmt = vpx_img_fmt(10);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_ARGB_LE: vpx_img_fmt = vpx_img_fmt(11);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB565_LE: vpx_img_fmt = vpx_img_fmt(12);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_RGB555_LE: vpx_img_fmt = vpx_img_fmt(13);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_YV12: vpx_img_fmt = vpx_img_fmt(769);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I420: vpx_img_fmt = vpx_img_fmt(258);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_VPXYV12: vpx_img_fmt = vpx_img_fmt(771);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_VPXI420: vpx_img_fmt = vpx_img_fmt(260);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I422: vpx_img_fmt = vpx_img_fmt(261);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I444: vpx_img_fmt = vpx_img_fmt(262);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I440: vpx_img_fmt = vpx_img_fmt(263);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_444A: vpx_img_fmt = vpx_img_fmt(1286);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I42016: vpx_img_fmt = vpx_img_fmt(2306);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I42216: vpx_img_fmt = vpx_img_fmt(2309);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I44416: vpx_img_fmt = vpx_img_fmt(2310);
}
impl vpx_img_fmt {
    pub const VPX_IMG_FMT_I44016: vpx_img_fmt = vpx_img_fmt(2311);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct vpx_img_fmt(pub ::std::os::raw::c_uint);
pub use self::vpx_img_fmt as vpx_img_fmt_t;
impl vpx_color_space {
    pub const VPX_CS_UNKNOWN: vpx_color_space = vpx_color_space(0);
}
impl vpx_color_space {
    pub const VPX_CS_BT_601: vpx_color_space = vpx_color_space(1);
}
impl vpx_color_space {
    pub const VPX_CS_BT_709: vpx_color_space = vpx_color_space(2);
}
impl vpx_color_space {
    pub const VPX_CS_SMPTE_170: vpx_color_space = vpx_color_space(3);
}
impl vpx_color_space {
    pub const VPX_CS_SMPTE_240: vpx_color_space = vpx_color_space(4);
}
impl vpx_color_space {
    pub const VPX_CS_BT_2020: vpx_color_space = vpx_color_space(5);
}
impl vpx_color_space {
    pub const VPX_CS_RESERVED: vpx_color_space = vpx_color_space(6);
}
impl vpx_color_space {
    pub const VPX_CS_SRGB: vpx_color_space = vpx_color_space(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct vpx_color_space(pub ::std::os::raw::c_uint);
pub use self::vpx_color_space as vpx_color_space_t;
impl vpx_color_range {
    pub const VPX_CR_STUDIO_RANGE: vpx_color_range = vpx_color_range(0);
}
impl vpx_color_range {
    pub const VPX_CR_FULL_RANGE: vpx_color_range = vpx_color_range(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct vpx_color_range(pub ::std::os::raw::c_uint);
pub use self::vpx_color_range as vpx_color_range_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_image {
    pub fmt: vpx_img_fmt_t,
    pub cs: vpx_color_space_t,
    pub range: vpx_color_range_t,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
    pub bit_depth: ::std::os::raw::c_uint,
    pub d_w: ::std::os::raw::c_uint,
    pub d_h: ::std::os::raw::c_uint,
    pub r_w: ::std::os::raw::c_uint,
    pub r_h: ::std::os::raw::c_uint,
    pub x_chroma_shift: ::std::os::raw::c_uint,
    pub y_chroma_shift: ::std::os::raw::c_uint,
    pub planes: [*mut ::std::os::raw::c_uchar; 4usize],
    pub stride: [::std::os::raw::c_int; 4usize],
    pub bps: ::std::os::raw::c_int,
    pub user_priv: *mut ::std::os::raw::c_void,
    pub img_data: *mut ::std::os::raw::c_uchar,
    pub img_data_owner: ::std::os::raw::c_int,
    pub self_allocd: ::std::os::raw::c_int,
    pub fb_priv: *mut ::std::os::raw::c_void,
}
pub type vpx_image_t = vpx_image;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vpx_image_rect {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
pub type vpx_image_rect_t = vpx_image_rect;
extern "C" {
    pub fn vpx_img_alloc(
        img: *mut vpx_image_t,
        fmt: vpx_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
    ) -> *mut vpx_image_t;
}
extern "C" {
    pub fn vpx_img_wrap(
        img: *mut vpx_image_t,
        fmt: vpx_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        stride_align: ::std::os::raw::c_uint,
        img_data: *mut ::std::os::raw::c_uchar,
    ) -> *mut vpx_image_t;
}
extern "C" {
    pub fn vpx_img_set_rect(
        img: *mut vpx_image_t,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        w: ::std::os::raw::c_uint,
        h: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vpx_img_flip(img: *mut vpx_image_t);
}
extern "C" {
    pub fn vpx_img_free(img: *mut vpx_image_t);
}
pub use self::vpx_img_fmt_t as switch_img_fmt_t;
pub type switch_image_t = vpx_image_t;
pub type switch_byte_t = u8;
impl switch_pvt_class_t {
    pub const SWITCH_PVT_PRIMARY: switch_pvt_class_t = switch_pvt_class_t(0);
}
impl switch_pvt_class_t {
    pub const SWITCH_PVT_SECONDARY: switch_pvt_class_t = switch_pvt_class_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_pvt_class_t(pub ::std::os::raw::c_uint);
impl switch_dtmf_source_t {
    pub const SWITCH_DTMF_UNKNOWN: switch_dtmf_source_t = switch_dtmf_source_t(0);
}
impl switch_dtmf_source_t {
    pub const SWITCH_DTMF_INBAND_AUDIO: switch_dtmf_source_t = switch_dtmf_source_t(1);
}
impl switch_dtmf_source_t {
    pub const SWITCH_DTMF_RTP: switch_dtmf_source_t = switch_dtmf_source_t(2);
}
impl switch_dtmf_source_t {
    pub const SWITCH_DTMF_ENDPOINT: switch_dtmf_source_t = switch_dtmf_source_t(3);
}
impl switch_dtmf_source_t {
    pub const SWITCH_DTMF_APP: switch_dtmf_source_t = switch_dtmf_source_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_dtmf_source_t(pub ::std::os::raw::c_uint);
impl switch_digit_action_target_t {
    pub const DIGIT_TARGET_SELF: switch_digit_action_target_t = switch_digit_action_target_t(0);
}
impl switch_digit_action_target_t {
    pub const DIGIT_TARGET_PEER: switch_digit_action_target_t = switch_digit_action_target_t(1);
}
impl switch_digit_action_target_t {
    pub const DIGIT_TARGET_BOTH: switch_digit_action_target_t = switch_digit_action_target_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_digit_action_target_t(pub ::std::os::raw::c_uint);
impl dtmf_flag_t {
    pub const DTMF_FLAG_SKIP_PROCESS: dtmf_flag_t = dtmf_flag_t(1);
}
impl dtmf_flag_t {
    pub const DTMF_FLAG_SENSITIVE: dtmf_flag_t = dtmf_flag_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct dtmf_flag_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dtmf_t {
    pub digit: ::std::os::raw::c_char,
    pub duration: u32,
    pub flags: i32,
    pub source: switch_dtmf_source_t,
}
impl switch_call_direction_t {
    pub const SWITCH_CALL_DIRECTION_INBOUND: switch_call_direction_t = switch_call_direction_t(0);
}
impl switch_call_direction_t {
    pub const SWITCH_CALL_DIRECTION_OUTBOUND: switch_call_direction_t = switch_call_direction_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_call_direction_t(pub ::std::os::raw::c_uint);
impl switch_bind_flag_enum_t {
    pub const SBF_DIAL_ALEG: switch_bind_flag_enum_t = switch_bind_flag_enum_t(1);
}
impl switch_bind_flag_enum_t {
    pub const SBF_EXEC_ALEG: switch_bind_flag_enum_t = switch_bind_flag_enum_t(2);
}
impl switch_bind_flag_enum_t {
    pub const SBF_DIAL_BLEG: switch_bind_flag_enum_t = switch_bind_flag_enum_t(4);
}
impl switch_bind_flag_enum_t {
    pub const SBF_EXEC_BLEG: switch_bind_flag_enum_t = switch_bind_flag_enum_t(8);
}
impl switch_bind_flag_enum_t {
    pub const SBF_EXEC_OPPOSITE: switch_bind_flag_enum_t = switch_bind_flag_enum_t(16);
}
impl switch_bind_flag_enum_t {
    pub const SBF_EXEC_SAME: switch_bind_flag_enum_t = switch_bind_flag_enum_t(32);
}
impl switch_bind_flag_enum_t {
    pub const SBF_ONCE: switch_bind_flag_enum_t = switch_bind_flag_enum_t(64);
}
impl switch_bind_flag_enum_t {
    pub const SBF_EXEC_INLINE: switch_bind_flag_enum_t = switch_bind_flag_enum_t(128);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_bind_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_bind_flag_t = u32;
impl switch_dtmf_direction_t {
    pub const SWITCH_DTMF_RECV: switch_dtmf_direction_t = switch_dtmf_direction_t(0);
}
impl switch_dtmf_direction_t {
    pub const SWITCH_DTMF_SEND: switch_dtmf_direction_t = switch_dtmf_direction_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_dtmf_direction_t(pub ::std::os::raw::c_uint);
impl switch_originate_flag_enum_t {
    pub const SOF_NONE: switch_originate_flag_enum_t = switch_originate_flag_enum_t(0);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NOBLOCK: switch_originate_flag_enum_t = switch_originate_flag_enum_t(1);
}
impl switch_originate_flag_enum_t {
    pub const SOF_FORKED_DIAL: switch_originate_flag_enum_t = switch_originate_flag_enum_t(2);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NO_EFFECTIVE_ANI: switch_originate_flag_enum_t = switch_originate_flag_enum_t(4);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NO_EFFECTIVE_ANIII: switch_originate_flag_enum_t =
        switch_originate_flag_enum_t(8);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NO_EFFECTIVE_CID_NUM: switch_originate_flag_enum_t =
        switch_originate_flag_enum_t(16);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NO_EFFECTIVE_CID_NAME: switch_originate_flag_enum_t =
        switch_originate_flag_enum_t(32);
}
impl switch_originate_flag_enum_t {
    pub const SOF_NO_LIMITS: switch_originate_flag_enum_t = switch_originate_flag_enum_t(64);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_originate_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_originate_flag_t = u32;
impl switch_port_flag_enum_t {
    pub const SPF_NONE: switch_port_flag_enum_t = switch_port_flag_enum_t(0);
}
impl switch_port_flag_enum_t {
    pub const SPF_ODD: switch_port_flag_enum_t = switch_port_flag_enum_t(1);
}
impl switch_port_flag_enum_t {
    pub const SPF_EVEN: switch_port_flag_enum_t = switch_port_flag_enum_t(2);
}
impl switch_port_flag_enum_t {
    pub const SPF_ROBUST_TCP: switch_port_flag_enum_t = switch_port_flag_enum_t(4);
}
impl switch_port_flag_enum_t {
    pub const SPF_ROBUST_UDP: switch_port_flag_enum_t = switch_port_flag_enum_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_port_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_port_flag_t = u32;
impl switch_eavesdrop_flag_enum_t {
    pub const ED_NONE: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(0);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_MUX_READ: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(1);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_MUX_WRITE: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(2);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_DTMF: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(4);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_COPY_DISPLAY: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(8);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_BRIDGE_READ: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(16);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_BRIDGE_WRITE: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(32);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_TAP_READ: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(64);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_TAP_WRITE: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(128);
}
impl switch_eavesdrop_flag_enum_t {
    pub const ED_STEREO: switch_eavesdrop_flag_enum_t = switch_eavesdrop_flag_enum_t(256);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_eavesdrop_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_eavesdrop_flag_t = u32;
impl switch_core_flag_enum_t {
    pub const SCF_NONE: switch_core_flag_enum_t = switch_core_flag_enum_t(0);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_SQL: switch_core_flag_enum_t = switch_core_flag_enum_t(1);
}
impl switch_core_flag_enum_t {
    pub const SCF_NO_NEW_OUTBOUND_SESSIONS: switch_core_flag_enum_t = switch_core_flag_enum_t(2);
}
impl switch_core_flag_enum_t {
    pub const SCF_NO_NEW_INBOUND_SESSIONS: switch_core_flag_enum_t = switch_core_flag_enum_t(4);
}
impl switch_core_flag_enum_t {
    pub const SCF_NO_NEW_SESSIONS: switch_core_flag_enum_t = switch_core_flag_enum_t(6);
}
impl switch_core_flag_enum_t {
    pub const SCF_SHUTTING_DOWN: switch_core_flag_enum_t = switch_core_flag_enum_t(8);
}
impl switch_core_flag_enum_t {
    pub const SCF_VG: switch_core_flag_enum_t = switch_core_flag_enum_t(16);
}
impl switch_core_flag_enum_t {
    pub const SCF_RESTART: switch_core_flag_enum_t = switch_core_flag_enum_t(32);
}
impl switch_core_flag_enum_t {
    pub const SCF_SHUTDOWN_REQUESTED: switch_core_flag_enum_t = switch_core_flag_enum_t(64);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_AUTO_NAT: switch_core_flag_enum_t = switch_core_flag_enum_t(128);
}
impl switch_core_flag_enum_t {
    pub const SCF_EARLY_HANGUP: switch_core_flag_enum_t = switch_core_flag_enum_t(256);
}
impl switch_core_flag_enum_t {
    pub const SCF_CALIBRATE_CLOCK: switch_core_flag_enum_t = switch_core_flag_enum_t(512);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_HEAVY_TIMING: switch_core_flag_enum_t = switch_core_flag_enum_t(1024);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_CLOCK_RT: switch_core_flag_enum_t = switch_core_flag_enum_t(2048);
}
impl switch_core_flag_enum_t {
    pub const SCF_VERBOSE_EVENTS: switch_core_flag_enum_t = switch_core_flag_enum_t(4096);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_WIN32_MONOTONIC: switch_core_flag_enum_t = switch_core_flag_enum_t(8192);
}
impl switch_core_flag_enum_t {
    pub const SCF_AUTO_SCHEMAS: switch_core_flag_enum_t = switch_core_flag_enum_t(16384);
}
impl switch_core_flag_enum_t {
    pub const SCF_MINIMAL: switch_core_flag_enum_t = switch_core_flag_enum_t(32768);
}
impl switch_core_flag_enum_t {
    pub const SCF_USE_NAT_MAPPING: switch_core_flag_enum_t = switch_core_flag_enum_t(65536);
}
impl switch_core_flag_enum_t {
    pub const SCF_CLEAR_SQL: switch_core_flag_enum_t = switch_core_flag_enum_t(131072);
}
impl switch_core_flag_enum_t {
    pub const SCF_THREADED_SYSTEM_EXEC: switch_core_flag_enum_t = switch_core_flag_enum_t(262144);
}
impl switch_core_flag_enum_t {
    pub const SCF_SYNC_CLOCK_REQUESTED: switch_core_flag_enum_t = switch_core_flag_enum_t(524288);
}
impl switch_core_flag_enum_t {
    pub const SCF_CORE_NON_SQLITE_DB_REQ: switch_core_flag_enum_t =
        switch_core_flag_enum_t(1048576);
}
impl switch_core_flag_enum_t {
    pub const SCF_DEBUG_SQL: switch_core_flag_enum_t = switch_core_flag_enum_t(2097152);
}
impl switch_core_flag_enum_t {
    pub const SCF_API_EXPANSION: switch_core_flag_enum_t = switch_core_flag_enum_t(4194304);
}
impl switch_core_flag_enum_t {
    pub const SCF_SESSION_THREAD_POOL: switch_core_flag_enum_t = switch_core_flag_enum_t(8388608);
}
impl switch_core_flag_enum_t {
    pub const SCF_DIALPLAN_TIMESTAMPS: switch_core_flag_enum_t = switch_core_flag_enum_t(16777216);
}
impl switch_core_flag_enum_t {
    pub const SCF_CPF_SOFT_PREFIX: switch_core_flag_enum_t = switch_core_flag_enum_t(33554432);
}
impl switch_core_flag_enum_t {
    pub const SCF_CPF_SOFT_LOOKUP: switch_core_flag_enum_t = switch_core_flag_enum_t(67108864);
}
impl switch_core_flag_enum_t {
    pub const SCF_EVENT_CHANNEL_ENABLE_HIERARCHY_DELIVERY: switch_core_flag_enum_t =
        switch_core_flag_enum_t(134217728);
}
impl switch_core_flag_enum_t {
    pub const SCF_EVENT_CHANNEL_HIERARCHY_DELIVERY_ONCE: switch_core_flag_enum_t =
        switch_core_flag_enum_t(268435456);
}
impl switch_core_flag_enum_t {
    pub const SCF_EVENT_CHANNEL_LOG_UNDELIVERABLE_JSON: switch_core_flag_enum_t =
        switch_core_flag_enum_t(536870912);
}
impl switch_core_flag_enum_t {
    pub const SCF_LOG_DISABLE: switch_core_flag_enum_t = switch_core_flag_enum_t(1073741824);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_core_flag_t = u32;
impl switch_module_interface_name_t {
    pub const SWITCH_ENDPOINT_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(0);
}
impl switch_module_interface_name_t {
    pub const SWITCH_TIMER_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(1);
}
impl switch_module_interface_name_t {
    pub const SWITCH_DIALPLAN_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(2);
}
impl switch_module_interface_name_t {
    pub const SWITCH_CODEC_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(3);
}
impl switch_module_interface_name_t {
    pub const SWITCH_APPLICATION_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(4);
}
impl switch_module_interface_name_t {
    pub const SWITCH_API_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(5);
}
impl switch_module_interface_name_t {
    pub const SWITCH_FILE_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(6);
}
impl switch_module_interface_name_t {
    pub const SWITCH_SPEECH_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(7);
}
impl switch_module_interface_name_t {
    pub const SWITCH_DIRECTORY_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(8);
}
impl switch_module_interface_name_t {
    pub const SWITCH_CHAT_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(9);
}
impl switch_module_interface_name_t {
    pub const SWITCH_SAY_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(10);
}
impl switch_module_interface_name_t {
    pub const SWITCH_ASR_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(11);
}
impl switch_module_interface_name_t {
    pub const SWITCH_MANAGEMENT_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(12);
}
impl switch_module_interface_name_t {
    pub const SWITCH_LIMIT_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(13);
}
impl switch_module_interface_name_t {
    pub const SWITCH_CHAT_APPLICATION_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(14);
}
impl switch_module_interface_name_t {
    pub const SWITCH_JSON_API_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(15);
}
impl switch_module_interface_name_t {
    pub const SWITCH_DATABASE_INTERFACE: switch_module_interface_name_t =
        switch_module_interface_name_t(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_module_interface_name_t(pub ::std::os::raw::c_uint);
impl switch_database_flag_enum_t {
    pub const SWITCH_DATABASE_FLAG_ROW_SIZE_LIMIT: switch_database_flag_enum_t =
        switch_database_flag_enum_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_database_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_database_flag_t = u32;
impl switch_unicast_flag_enum_t {
    pub const SUF_NONE: switch_unicast_flag_enum_t = switch_unicast_flag_enum_t(0);
}
impl switch_unicast_flag_enum_t {
    pub const SUF_THREAD_RUNNING: switch_unicast_flag_enum_t = switch_unicast_flag_enum_t(1);
}
impl switch_unicast_flag_enum_t {
    pub const SUF_READY: switch_unicast_flag_enum_t = switch_unicast_flag_enum_t(2);
}
impl switch_unicast_flag_enum_t {
    pub const SUF_NATIVE: switch_unicast_flag_enum_t = switch_unicast_flag_enum_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_unicast_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_unicast_flag_t = u32;
impl switch_bool_t {
    pub const SWITCH_FALSE: switch_bool_t = switch_bool_t(0);
}
impl switch_bool_t {
    pub const SWITCH_TRUE: switch_bool_t = switch_bool_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_bool_t(pub ::std::os::raw::c_uint);
impl switch_say_method_t {
    pub const SSM_NA: switch_say_method_t = switch_say_method_t(0);
}
impl switch_say_method_t {
    pub const SSM_PRONOUNCED: switch_say_method_t = switch_say_method_t(1);
}
impl switch_say_method_t {
    pub const SSM_ITERATED: switch_say_method_t = switch_say_method_t(2);
}
impl switch_say_method_t {
    pub const SSM_COUNTED: switch_say_method_t = switch_say_method_t(3);
}
impl switch_say_method_t {
    pub const SSM_PRONOUNCED_YEAR: switch_say_method_t = switch_say_method_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_say_method_t(pub ::std::os::raw::c_uint);
impl switch_say_type_t {
    pub const SST_NUMBER: switch_say_type_t = switch_say_type_t(0);
}
impl switch_say_type_t {
    pub const SST_ITEMS: switch_say_type_t = switch_say_type_t(1);
}
impl switch_say_type_t {
    pub const SST_PERSONS: switch_say_type_t = switch_say_type_t(2);
}
impl switch_say_type_t {
    pub const SST_MESSAGES: switch_say_type_t = switch_say_type_t(3);
}
impl switch_say_type_t {
    pub const SST_CURRENCY: switch_say_type_t = switch_say_type_t(4);
}
impl switch_say_type_t {
    pub const SST_TIME_MEASUREMENT: switch_say_type_t = switch_say_type_t(5);
}
impl switch_say_type_t {
    pub const SST_CURRENT_DATE: switch_say_type_t = switch_say_type_t(6);
}
impl switch_say_type_t {
    pub const SST_CURRENT_TIME: switch_say_type_t = switch_say_type_t(7);
}
impl switch_say_type_t {
    pub const SST_CURRENT_DATE_TIME: switch_say_type_t = switch_say_type_t(8);
}
impl switch_say_type_t {
    pub const SST_TELEPHONE_NUMBER: switch_say_type_t = switch_say_type_t(9);
}
impl switch_say_type_t {
    pub const SST_TELEPHONE_EXTENSION: switch_say_type_t = switch_say_type_t(10);
}
impl switch_say_type_t {
    pub const SST_URL: switch_say_type_t = switch_say_type_t(11);
}
impl switch_say_type_t {
    pub const SST_IP_ADDRESS: switch_say_type_t = switch_say_type_t(12);
}
impl switch_say_type_t {
    pub const SST_EMAIL_ADDRESS: switch_say_type_t = switch_say_type_t(13);
}
impl switch_say_type_t {
    pub const SST_POSTAL_ADDRESS: switch_say_type_t = switch_say_type_t(14);
}
impl switch_say_type_t {
    pub const SST_ACCOUNT_NUMBER: switch_say_type_t = switch_say_type_t(15);
}
impl switch_say_type_t {
    pub const SST_NAME_SPELLED: switch_say_type_t = switch_say_type_t(16);
}
impl switch_say_type_t {
    pub const SST_NAME_PHONETIC: switch_say_type_t = switch_say_type_t(17);
}
impl switch_say_type_t {
    pub const SST_SHORT_DATE_TIME: switch_say_type_t = switch_say_type_t(18);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_say_type_t(pub ::std::os::raw::c_uint);
impl switch_say_gender_t {
    pub const SSG_MASCULINE: switch_say_gender_t = switch_say_gender_t(0);
}
impl switch_say_gender_t {
    pub const SSG_FEMININE: switch_say_gender_t = switch_say_gender_t(1);
}
impl switch_say_gender_t {
    pub const SSG_NEUTER: switch_say_gender_t = switch_say_gender_t(2);
}
impl switch_say_gender_t {
    pub const SSG_UTRUM: switch_say_gender_t = switch_say_gender_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_say_gender_t(pub ::std::os::raw::c_uint);
impl switch_management_action_t {
    pub const SMA_NONE: switch_management_action_t = switch_management_action_t(0);
}
impl switch_management_action_t {
    pub const SMA_GET: switch_management_action_t = switch_management_action_t(1);
}
impl switch_management_action_t {
    pub const SMA_SET: switch_management_action_t = switch_management_action_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_management_action_t(pub ::std::os::raw::c_uint);
impl switch_scheduler_flag_enum_t {
    pub const SSHF_NONE: switch_scheduler_flag_enum_t = switch_scheduler_flag_enum_t(0);
}
impl switch_scheduler_flag_enum_t {
    pub const SSHF_OWN_THREAD: switch_scheduler_flag_enum_t = switch_scheduler_flag_enum_t(1);
}
impl switch_scheduler_flag_enum_t {
    pub const SSHF_FREE_ARG: switch_scheduler_flag_enum_t = switch_scheduler_flag_enum_t(2);
}
impl switch_scheduler_flag_enum_t {
    pub const SSHF_NO_DEL: switch_scheduler_flag_enum_t = switch_scheduler_flag_enum_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_scheduler_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_scheduler_flag_t = u32;
impl switch_media_flag_enum_t {
    pub const SMF_NONE: switch_media_flag_enum_t = switch_media_flag_enum_t(0);
}
impl switch_media_flag_enum_t {
    pub const SMF_REBRIDGE: switch_media_flag_enum_t = switch_media_flag_enum_t(1);
}
impl switch_media_flag_enum_t {
    pub const SMF_ECHO_ALEG: switch_media_flag_enum_t = switch_media_flag_enum_t(2);
}
impl switch_media_flag_enum_t {
    pub const SMF_ECHO_BLEG: switch_media_flag_enum_t = switch_media_flag_enum_t(4);
}
impl switch_media_flag_enum_t {
    pub const SMF_FORCE: switch_media_flag_enum_t = switch_media_flag_enum_t(8);
}
impl switch_media_flag_enum_t {
    pub const SMF_LOOP: switch_media_flag_enum_t = switch_media_flag_enum_t(16);
}
impl switch_media_flag_enum_t {
    pub const SMF_HOLD_BLEG: switch_media_flag_enum_t = switch_media_flag_enum_t(32);
}
impl switch_media_flag_enum_t {
    pub const SMF_IMMEDIATE: switch_media_flag_enum_t = switch_media_flag_enum_t(64);
}
impl switch_media_flag_enum_t {
    pub const SMF_EXEC_INLINE: switch_media_flag_enum_t = switch_media_flag_enum_t(128);
}
impl switch_media_flag_enum_t {
    pub const SMF_PRIORITY: switch_media_flag_enum_t = switch_media_flag_enum_t(256);
}
impl switch_media_flag_enum_t {
    pub const SMF_REPLYONLY_A: switch_media_flag_enum_t = switch_media_flag_enum_t(512);
}
impl switch_media_flag_enum_t {
    pub const SMF_REPLYONLY_B: switch_media_flag_enum_t = switch_media_flag_enum_t(1024);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_media_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_media_flag_t = u32;
impl switch_bitpack_mode_t {
    pub const SWITCH_BITPACK_MODE_RFC3551: switch_bitpack_mode_t = switch_bitpack_mode_t(0);
}
impl switch_bitpack_mode_t {
    pub const SWITCH_BITPACK_MODE_AAL2: switch_bitpack_mode_t = switch_bitpack_mode_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_bitpack_mode_t(pub ::std::os::raw::c_uint);
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_INIT: switch_abc_type_t = switch_abc_type_t(0);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_READ: switch_abc_type_t = switch_abc_type_t(1);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_WRITE: switch_abc_type_t = switch_abc_type_t(2);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_WRITE_REPLACE: switch_abc_type_t = switch_abc_type_t(3);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_READ_REPLACE: switch_abc_type_t = switch_abc_type_t(4);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_READ_PING: switch_abc_type_t = switch_abc_type_t(5);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_TAP_NATIVE_READ: switch_abc_type_t = switch_abc_type_t(6);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_TAP_NATIVE_WRITE: switch_abc_type_t = switch_abc_type_t(7);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_CLOSE: switch_abc_type_t = switch_abc_type_t(8);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_READ_VIDEO_PING: switch_abc_type_t = switch_abc_type_t(9);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_WRITE_VIDEO_PING: switch_abc_type_t = switch_abc_type_t(10);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_STREAM_VIDEO_PING: switch_abc_type_t = switch_abc_type_t(11);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_VIDEO_PATCH: switch_abc_type_t = switch_abc_type_t(12);
}
impl switch_abc_type_t {
    pub const SWITCH_ABC_TYPE_READ_TEXT: switch_abc_type_t = switch_abc_type_t(13);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_abc_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_bitpack_t {
    pub buf: *mut switch_byte_t,
    pub buflen: u32,
    pub cur: *mut switch_byte_t,
    pub bytes: u32,
    pub bits_tot: u32,
    pub bits_cur: switch_byte_t,
    pub bits_rem: switch_byte_t,
    pub frame_bits: switch_byte_t,
    pub shiftby: switch_byte_t,
    pub this_byte: switch_byte_t,
    pub under: switch_byte_t,
    pub over: switch_byte_t,
    pub mode: switch_bitpack_mode_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_directories {
    pub base_dir: *mut ::std::os::raw::c_char,
    pub mod_dir: *mut ::std::os::raw::c_char,
    pub conf_dir: *mut ::std::os::raw::c_char,
    pub log_dir: *mut ::std::os::raw::c_char,
    pub run_dir: *mut ::std::os::raw::c_char,
    pub db_dir: *mut ::std::os::raw::c_char,
    pub script_dir: *mut ::std::os::raw::c_char,
    pub temp_dir: *mut ::std::os::raw::c_char,
    pub htdocs_dir: *mut ::std::os::raw::c_char,
    pub grammar_dir: *mut ::std::os::raw::c_char,
    pub storage_dir: *mut ::std::os::raw::c_char,
    pub cache_dir: *mut ::std::os::raw::c_char,
    pub recordings_dir: *mut ::std::os::raw::c_char,
    pub sounds_dir: *mut ::std::os::raw::c_char,
    pub lib_dir: *mut ::std::os::raw::c_char,
    pub certs_dir: *mut ::std::os::raw::c_char,
    pub fonts_dir: *mut ::std::os::raw::c_char,
    pub images_dir: *mut ::std::os::raw::c_char,
    pub data_dir: *mut ::std::os::raw::c_char,
    pub localstate_dir: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut SWITCH_GLOBAL_dirs: switch_directories;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_filenames {
    pub conf_name: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut SWITCH_GLOBAL_filenames: switch_filenames;
}
impl switch_rw_t {
    pub const SWITCH_RW_READ: switch_rw_t = switch_rw_t(0);
}
impl switch_rw_t {
    pub const SWITCH_RW_WRITE: switch_rw_t = switch_rw_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rw_t(pub ::std::os::raw::c_uint);
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_NONE: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(0);
}
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_SCREEN: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(1);
}
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_HIDE_NAME: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(2);
}
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_HIDE_NUMBER: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(4);
}
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_SOFT_PREFIX: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(8);
}
impl switch_caller_profile_flag_enum_t {
    pub const SWITCH_CPF_SOFT_LOOKUP: switch_caller_profile_flag_enum_t =
        switch_caller_profile_flag_enum_t(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_caller_profile_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_caller_profile_flag_t = u32;
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_TITLE: switch_audio_col_t = switch_audio_col_t(1);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_COPYRIGHT: switch_audio_col_t = switch_audio_col_t(2);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_SOFTWARE: switch_audio_col_t = switch_audio_col_t(3);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_ARTIST: switch_audio_col_t = switch_audio_col_t(4);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_COMMENT: switch_audio_col_t = switch_audio_col_t(5);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_DATE: switch_audio_col_t = switch_audio_col_t(6);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_ALBUM: switch_audio_col_t = switch_audio_col_t(7);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_LICENSE: switch_audio_col_t = switch_audio_col_t(8);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_TRACKNUMBER: switch_audio_col_t = switch_audio_col_t(9);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_GENRE: switch_audio_col_t = switch_audio_col_t(16);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_FILE_SIZE: switch_audio_col_t = switch_audio_col_t(240);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_FILE_TRIMMED: switch_audio_col_t = switch_audio_col_t(241);
}
impl switch_audio_col_t {
    pub const SWITCH_AUDIO_COL_STR_FILE_TRIMMED_MS: switch_audio_col_t = switch_audio_col_t(242);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_audio_col_t(pub ::std::os::raw::c_uint);
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_RESULT: switch_xml_section_enum_t = switch_xml_section_enum_t(0);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_CONFIG: switch_xml_section_enum_t = switch_xml_section_enum_t(1);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_DIRECTORY: switch_xml_section_enum_t =
        switch_xml_section_enum_t(2);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_DIALPLAN: switch_xml_section_enum_t = switch_xml_section_enum_t(4);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_LANGUAGES: switch_xml_section_enum_t =
        switch_xml_section_enum_t(8);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_CHATPLAN: switch_xml_section_enum_t =
        switch_xml_section_enum_t(16);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_CHANNELS: switch_xml_section_enum_t =
        switch_xml_section_enum_t(32);
}
impl switch_xml_section_enum_t {
    pub const SWITCH_XML_SECTION_MAX: switch_xml_section_enum_t = switch_xml_section_enum_t(32);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_xml_section_enum_t(pub ::std::os::raw::c_uint);
pub type switch_xml_section_t = u32;
impl switch_vad_flag_enum_t {
    pub const SWITCH_VAD_FLAG_TALKING: switch_vad_flag_enum_t = switch_vad_flag_enum_t(1);
}
impl switch_vad_flag_enum_t {
    pub const SWITCH_VAD_FLAG_EVENTS_TALK: switch_vad_flag_enum_t = switch_vad_flag_enum_t(2);
}
impl switch_vad_flag_enum_t {
    pub const SWITCH_VAD_FLAG_EVENTS_NOTALK: switch_vad_flag_enum_t = switch_vad_flag_enum_t(4);
}
impl switch_vad_flag_enum_t {
    pub const SWITCH_VAD_FLAG_CNG: switch_vad_flag_enum_t = switch_vad_flag_enum_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_vad_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_vad_flag_t = u32;
impl switch_vad_state_t {
    pub const SWITCH_VAD_STATE_NONE: switch_vad_state_t = switch_vad_state_t(0);
}
impl switch_vad_state_t {
    pub const SWITCH_VAD_STATE_START_TALKING: switch_vad_state_t = switch_vad_state_t(1);
}
impl switch_vad_state_t {
    pub const SWITCH_VAD_STATE_TALKING: switch_vad_state_t = switch_vad_state_t(2);
}
impl switch_vad_state_t {
    pub const SWITCH_VAD_STATE_STOP_TALKING: switch_vad_state_t = switch_vad_state_t(3);
}
impl switch_vad_state_t {
    pub const SWITCH_VAD_STATE_ERROR: switch_vad_state_t = switch_vad_state_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_vad_state_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_vad_s {
    _unused: [u8; 0],
}
pub type switch_vad_t = switch_vad_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct error_period {
    pub start: i64,
    pub stop: i64,
    pub flaws: u32,
    pub consecutive_flaws: u32,
    pub next: *mut error_period,
}
pub type switch_error_period_t = error_period;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_numbers_t {
    pub raw_bytes: switch_size_t,
    pub media_bytes: switch_size_t,
    pub packet_count: switch_size_t,
    pub period_packet_count: switch_size_t,
    pub media_packet_count: switch_size_t,
    pub skip_packet_count: switch_size_t,
    pub jb_packet_count: switch_size_t,
    pub dtmf_packet_count: switch_size_t,
    pub cng_packet_count: switch_size_t,
    pub flush_packet_count: switch_size_t,
    pub largest_jb_size: switch_size_t,
    pub last_proc_time: i64,
    pub jitter_n: i64,
    pub jitter_add: i64,
    pub jitter_addsq: i64,
    pub variance: f64,
    pub min_variance: f64,
    pub max_variance: f64,
    pub std_deviation: f64,
    pub lossrate: f64,
    pub burstrate: f64,
    pub mean_interval: f64,
    pub loss: [::std::os::raw::c_int; 1024usize],
    pub last_loss: ::std::os::raw::c_int,
    pub recved: ::std::os::raw::c_int,
    pub last_processed_seq: ::std::os::raw::c_int,
    pub flaws: switch_size_t,
    pub last_flaw: switch_size_t,
    pub R: f64,
    pub mos: f64,
    pub error_log: *mut error_period,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_numbers_t {
    pub packet_count: u32,
    pub octet_count: u32,
    pub peer_ssrc: u32,
    pub last_rpt_ts: u32,
    pub ssrc: u32,
    pub csrc: u32,
    pub last_pkt_tsdiff: u32,
    pub inter_jitter: f64,
    pub last_rpt_ext_seq: u32,
    pub last_rpt_cycle: u16,
    pub period_pkt_count: u16,
    pub pkt_count: u16,
    pub sent_pkt_count: u16,
    pub rtcp_rtp_count: u32,
    pub high_ext_seq_recv: u32,
    pub cycle: u16,
    pub bad_seq: u32,
    pub base_seq: u16,
    pub cum_lost: u32,
    pub last_recv_lsr_local: u32,
    pub last_recv_lsr_peer: u32,
    pub init: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_video_counters_t {
    pub nack_count: u16,
    pub fir_count: u16,
    pub pli_count: u16,
    pub sr_count: u16,
    pub rr_count: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_video_stats_t {
    pub video_in: switch_rtcp_video_counters_t,
    pub video_out: switch_rtcp_video_counters_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_stats_t {
    pub inbound: switch_rtp_numbers_t,
    pub outbound: switch_rtp_numbers_t,
    pub rtcp: switch_rtcp_numbers_t,
    pub read_count: u32,
}
impl switch_rtp_flush_t {
    pub const SWITCH_RTP_FLUSH_ONCE: switch_rtp_flush_t = switch_rtp_flush_t(0);
}
impl switch_rtp_flush_t {
    pub const SWITCH_RTP_FLUSH_STICK: switch_rtp_flush_t = switch_rtp_flush_t(1);
}
impl switch_rtp_flush_t {
    pub const SWITCH_RTP_FLUSH_UNSTICK: switch_rtp_flush_t = switch_rtp_flush_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_flush_t(pub ::std::os::raw::c_uint);
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_NOBLOCK: switch_rtp_flag_t = switch_rtp_flag_t(0);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_DTMF_ON: switch_rtp_flag_t = switch_rtp_flag_t(1);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_IO: switch_rtp_flag_t = switch_rtp_flag_t(2);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_USE_TIMER: switch_rtp_flag_t = switch_rtp_flag_t(3);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_RTCP_PASSTHRU: switch_rtp_flag_t = switch_rtp_flag_t(4);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_SEND: switch_rtp_flag_t = switch_rtp_flag_t(5);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_RECV: switch_rtp_flag_t = switch_rtp_flag_t(6);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_AUTOADJ: switch_rtp_flag_t = switch_rtp_flag_t(7);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_RTCP_AUTOADJ: switch_rtp_flag_t = switch_rtp_flag_t(8);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_RAW_WRITE: switch_rtp_flag_t = switch_rtp_flag_t(9);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_GOOGLEHACK: switch_rtp_flag_t = switch_rtp_flag_t(10);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_VAD: switch_rtp_flag_t = switch_rtp_flag_t(11);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_BREAK: switch_rtp_flag_t = switch_rtp_flag_t(12);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_UDPTL: switch_rtp_flag_t = switch_rtp_flag_t(13);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_DATAWAIT: switch_rtp_flag_t = switch_rtp_flag_t(14);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_BYTESWAP: switch_rtp_flag_t = switch_rtp_flag_t(15);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_PASS_RFC2833: switch_rtp_flag_t = switch_rtp_flag_t(16);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_AUTO_CNG: switch_rtp_flag_t = switch_rtp_flag_t(17);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_SEND_RESET: switch_rtp_flag_t = switch_rtp_flag_t(18);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_RECV_RESET: switch_rtp_flag_t = switch_rtp_flag_t(19);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_PROXY_MEDIA: switch_rtp_flag_t = switch_rtp_flag_t(20);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SHUTDOWN: switch_rtp_flag_t = switch_rtp_flag_t(21);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_FLUSH: switch_rtp_flag_t = switch_rtp_flag_t(22);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_AUTOFLUSH: switch_rtp_flag_t = switch_rtp_flag_t(23);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_STICKY_FLUSH: switch_rtp_flag_t = switch_rtp_flag_t(24);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_DEBUG_RTP_READ: switch_rtp_flag_t = switch_rtp_flag_t(25);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_DEBUG_RTP_WRITE: switch_rtp_flag_t = switch_rtp_flag_t(26);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_ESTIMATORS: switch_rtp_flag_t = switch_rtp_flag_t(27);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_ADJ_BITRATE_CAP: switch_rtp_flag_t = switch_rtp_flag_t(28);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_VIDEO: switch_rtp_flag_t = switch_rtp_flag_t(29);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_ENABLE_RTCP: switch_rtp_flag_t = switch_rtp_flag_t(30);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_RTCP_MUX: switch_rtp_flag_t = switch_rtp_flag_t(31);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_KILL_JB: switch_rtp_flag_t = switch_rtp_flag_t(32);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_VIDEO_BREAK: switch_rtp_flag_t = switch_rtp_flag_t(33);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_PAUSE: switch_rtp_flag_t = switch_rtp_flag_t(34);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_FIR: switch_rtp_flag_t = switch_rtp_flag_t(35);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_PLI: switch_rtp_flag_t = switch_rtp_flag_t(36);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_RESET: switch_rtp_flag_t = switch_rtp_flag_t(37);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_MUTE: switch_rtp_flag_t = switch_rtp_flag_t(38);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_NACK: switch_rtp_flag_t = switch_rtp_flag_t(39);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_TMMBR: switch_rtp_flag_t = switch_rtp_flag_t(40);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_DETECT_SSRC: switch_rtp_flag_t = switch_rtp_flag_t(41);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_TEXT: switch_rtp_flag_t = switch_rtp_flag_t(42);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_OLD_FIR: switch_rtp_flag_t = switch_rtp_flag_t(43);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_PASSTHRU: switch_rtp_flag_t = switch_rtp_flag_t(44);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_SEND_MKI: switch_rtp_flag_t = switch_rtp_flag_t(45);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SECURE_RECV_MKI: switch_rtp_flag_t = switch_rtp_flag_t(46);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_SRTP_HANGUP_ON_ERROR: switch_rtp_flag_t = switch_rtp_flag_t(47);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_AUDIO_FIRE_SEND_RTCP_EVENT: switch_rtp_flag_t = switch_rtp_flag_t(48);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_VIDEO_FIRE_SEND_RTCP_EVENT: switch_rtp_flag_t = switch_rtp_flag_t(49);
}
impl switch_rtp_flag_t {
    pub const SWITCH_RTP_FLAG_INVALID: switch_rtp_flag_t = switch_rtp_flag_t(50);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_flag_t(pub ::std::os::raw::c_uint);
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_NONE: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(0);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_CISCO_SKIP_MARK_BIT_2833: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(1);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_SONUS_SEND_INVALID_TIMESTAMP_2833: switch_rtp_bug_flag_t =
        switch_rtp_bug_flag_t(2);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_IGNORE_MARK_BIT: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(4);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_SEND_LINEAR_TIMESTAMPS: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(8);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_START_SEQ_AT_ZERO: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(16);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_NEVER_SEND_MARKER: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(32);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_IGNORE_DTMF_DURATION: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(64);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_ACCEPT_ANY_PACKETS: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(128);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_GEN_ONE_GEN_ALL: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(256);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_CHANGE_SSRC_ON_MARKER: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(512);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_FLUSH_JB_ON_DTMF: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(1024);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_ACCEPT_ANY_PAYLOAD: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(2048);
}
impl switch_rtp_bug_flag_t {
    pub const RTP_BUG_ALWAYS_AUTO_ADJUST: switch_rtp_bug_flag_t = switch_rtp_bug_flag_t(4096);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_bug_flag_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_hdr_t {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 12usize]>,
}
impl switch_rtp_hdr_t {
    #[inline]
    pub fn cc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_cc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn x(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_x(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn pt(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_pt(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn m(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_m(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn seq(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_seq(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn ts(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_ts(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn ssrc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_ssrc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cc: ::std::os::raw::c_uint,
        x: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        pt: ::std::os::raw::c_uint,
        m: ::std::os::raw::c_uint,
        seq: ::std::os::raw::c_uint,
        ts: ::std::os::raw::c_uint,
        ssrc: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 12usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 12usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let cc: u32 = unsafe { ::std::mem::transmute(cc) };
            cc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let x: u32 = unsafe { ::std::mem::transmute(x) };
            x as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 7u8, {
            let pt: u32 = unsafe { ::std::mem::transmute(pt) };
            pt as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let m: u32 = unsafe { ::std::mem::transmute(m) };
            m as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let seq: u32 = unsafe { ::std::mem::transmute(seq) };
            seq as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let ts: u32 = unsafe { ::std::mem::transmute(ts) };
            ts as u64
        });
        __bindgen_bitfield_unit.set(64usize, 32u8, {
            let ssrc: u32 = unsafe { ::std::mem::transmute(ssrc) };
            ssrc as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_hdr_ext_t {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl switch_rtp_hdr_ext_t {
    #[inline]
    pub fn profile(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_profile(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        profile: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let profile: u32 = unsafe { ::std::mem::transmute(profile) };
            profile as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_hdr_s {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl switch_rtcp_hdr_s {
    #[inline]
    pub fn count(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_count(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn p(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_p(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn version(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_version(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn length(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        count: ::std::os::raw::c_uint,
        p: ::std::os::raw::c_uint,
        version: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
        length: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let count: u32 = unsafe { ::std::mem::transmute(count) };
            count as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let p: u32 = unsafe { ::std::mem::transmute(p) };
            p as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let version: u32 = unsafe { ::std::mem::transmute(version) };
            version as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type switch_rtcp_hdr_t = switch_rtcp_hdr_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audio_buffer_header_s {
    pub ts: u32,
    pub len: u32,
}
pub type audio_buffer_header_t = audio_buffer_header_s;
impl switch_priority_t {
    pub const SWITCH_PRIORITY_NORMAL: switch_priority_t = switch_priority_t(0);
}
impl switch_priority_t {
    pub const SWITCH_PRIORITY_LOW: switch_priority_t = switch_priority_t(1);
}
impl switch_priority_t {
    pub const SWITCH_PRIORITY_HIGH: switch_priority_t = switch_priority_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_priority_t(pub ::std::os::raw::c_uint);
impl switch_ivr_option_enum_t {
    pub const SWITCH_IVR_OPTION_NONE: switch_ivr_option_enum_t = switch_ivr_option_enum_t(0);
}
impl switch_ivr_option_enum_t {
    pub const SWITCH_IVR_OPTION_ASYNC: switch_ivr_option_enum_t = switch_ivr_option_enum_t(1);
}
impl switch_ivr_option_enum_t {
    pub const SWITCH_IVR_OPTION_FILE: switch_ivr_option_enum_t = switch_ivr_option_enum_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_ivr_option_enum_t(pub ::std::os::raw::c_uint);
pub type switch_ivr_option_t = u32;
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_REDIRECT_AUDIO: switch_core_session_message_types_t =
        switch_core_session_message_types_t(0);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_TRANSMIT_TEXT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(1);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_ANSWER: switch_core_session_message_types_t =
        switch_core_session_message_types_t(2);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_ACKNOWLEDGE_CALL: switch_core_session_message_types_t =
        switch_core_session_message_types_t(3);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_PROGRESS: switch_core_session_message_types_t =
        switch_core_session_message_types_t(4);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_BRIDGE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(5);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_UNBRIDGE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(6);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_TRANSFER: switch_core_session_message_types_t =
        switch_core_session_message_types_t(7);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_RINGING: switch_core_session_message_types_t =
        switch_core_session_message_types_t(8);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_ALERTING: switch_core_session_message_types_t =
        switch_core_session_message_types_t(9);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_MEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(10);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_3P_MEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(11);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_NOMEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(12);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_3P_NOMEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(13);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_HOLD: switch_core_session_message_types_t =
        switch_core_session_message_types_t(14);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_UNHOLD: switch_core_session_message_types_t =
        switch_core_session_message_types_t(15);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_REDIRECT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(16);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_RESPOND: switch_core_session_message_types_t =
        switch_core_session_message_types_t(17);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_BROADCAST: switch_core_session_message_types_t =
        switch_core_session_message_types_t(18);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_MEDIA_REDIRECT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(19);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_DEFLECT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(20);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_VIDEO_REFRESH_REQ: switch_core_session_message_types_t =
        switch_core_session_message_types_t(21);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_DISPLAY: switch_core_session_message_types_t =
        switch_core_session_message_types_t(22);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_MEDIA_PARAMS: switch_core_session_message_types_t =
        switch_core_session_message_types_t(23);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_TRANSCODING_NECESSARY: switch_core_session_message_types_t =
        switch_core_session_message_types_t(24);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_AUDIO_SYNC: switch_core_session_message_types_t =
        switch_core_session_message_types_t(25);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_VIDEO_SYNC: switch_core_session_message_types_t =
        switch_core_session_message_types_t(26);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_REQUEST_IMAGE_MEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(27);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_UUID_CHANGE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(28);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_SIMPLIFY: switch_core_session_message_types_t =
        switch_core_session_message_types_t(29);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_DEBUG_MEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(30);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_PROXY_MEDIA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(31);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_APPLICATION_EXEC: switch_core_session_message_types_t =
        switch_core_session_message_types_t(32);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_APPLICATION_EXEC_COMPLETE:
        switch_core_session_message_types_t = switch_core_session_message_types_t(33);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_PHONE_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(34);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_T38_DESCRIPTION: switch_core_session_message_types_t =
        switch_core_session_message_types_t(35);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_UDPTL_MODE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(36);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_CLEAR_PROGRESS: switch_core_session_message_types_t =
        switch_core_session_message_types_t(37);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_JITTER_BUFFER: switch_core_session_message_types_t =
        switch_core_session_message_types_t(38);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_RECOVERY_REFRESH: switch_core_session_message_types_t =
        switch_core_session_message_types_t(39);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_SIGNAL_DATA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(40);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_MESSAGE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(41);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_INFO: switch_core_session_message_types_t =
        switch_core_session_message_types_t(42);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_AUDIO_DATA: switch_core_session_message_types_t =
        switch_core_session_message_types_t(43);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_BLIND_TRANSFER_RESPONSE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(44);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_STUN_ERROR: switch_core_session_message_types_t =
        switch_core_session_message_types_t(45);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_MEDIA_RENEG: switch_core_session_message_types_t =
        switch_core_session_message_types_t(46);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_KEEPALIVE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(47);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_HARD_MUTE: switch_core_session_message_types_t =
        switch_core_session_message_types_t(48);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_BITRATE_REQ: switch_core_session_message_types_t =
        switch_core_session_message_types_t(49);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_BITRATE_ACK: switch_core_session_message_types_t =
        switch_core_session_message_types_t(50);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_CODEC_DEBUG_REQ: switch_core_session_message_types_t =
        switch_core_session_message_types_t(51);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_CODEC_SPECIFIC_REQ: switch_core_session_message_types_t =
        switch_core_session_message_types_t(52);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_REFER_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(53);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_ANSWER_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(54);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_PROGRESS_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(55);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_RING_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(56);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_RESAMPLE_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(57);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_HEARTBEAT_EVENT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(58);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_SESSION_ID: switch_core_session_message_types_t =
        switch_core_session_message_types_t(59);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INDICATE_PROMPT: switch_core_session_message_types_t =
        switch_core_session_message_types_t(60);
}
impl switch_core_session_message_types_t {
    pub const SWITCH_MESSAGE_INVALID: switch_core_session_message_types_t =
        switch_core_session_message_types_t(61);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_session_message_types_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_t38_options_t {
    pub T38FaxVersion: u16,
    pub T38MaxBitRate: u32,
    pub T38FaxFillBitRemoval: switch_bool_t,
    pub T38FaxTranscodingMMR: switch_bool_t,
    pub T38FaxTranscodingJBIG: switch_bool_t,
    pub T38FaxRateManagement: *const ::std::os::raw::c_char,
    pub T38FaxMaxBuffer: u32,
    pub T38FaxMaxDatagram: u32,
    pub T38FaxUdpEC: *const ::std::os::raw::c_char,
    pub T38VendorInfo: *const ::std::os::raw::c_char,
    pub remote_ip: *const ::std::os::raw::c_char,
    pub remote_port: u16,
    pub local_ip: *const ::std::os::raw::c_char,
    pub local_port: u16,
    pub sdp_o_line: *const ::std::os::raw::c_char,
}
impl switch_stack_t {
    pub const SWITCH_STACK_BOTTOM: switch_stack_t = switch_stack_t(1);
}
impl switch_stack_t {
    pub const SWITCH_STACK_TOP: switch_stack_t = switch_stack_t(2);
}
impl switch_stack_t {
    pub const SWITCH_STACK_UNSHIFT: switch_stack_t = switch_stack_t(4);
}
impl switch_stack_t {
    pub const SWITCH_STACK_PUSH: switch_stack_t = switch_stack_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_stack_t(pub ::std::os::raw::c_uint);
impl switch_status_t {
    pub const SWITCH_STATUS_SUCCESS: switch_status_t = switch_status_t(0);
}
impl switch_status_t {
    pub const SWITCH_STATUS_FALSE: switch_status_t = switch_status_t(1);
}
impl switch_status_t {
    pub const SWITCH_STATUS_TIMEOUT: switch_status_t = switch_status_t(2);
}
impl switch_status_t {
    pub const SWITCH_STATUS_RESTART: switch_status_t = switch_status_t(3);
}
impl switch_status_t {
    pub const SWITCH_STATUS_INTR: switch_status_t = switch_status_t(4);
}
impl switch_status_t {
    pub const SWITCH_STATUS_NOTIMPL: switch_status_t = switch_status_t(5);
}
impl switch_status_t {
    pub const SWITCH_STATUS_MEMERR: switch_status_t = switch_status_t(6);
}
impl switch_status_t {
    pub const SWITCH_STATUS_NOOP: switch_status_t = switch_status_t(7);
}
impl switch_status_t {
    pub const SWITCH_STATUS_RESAMPLE: switch_status_t = switch_status_t(8);
}
impl switch_status_t {
    pub const SWITCH_STATUS_GENERR: switch_status_t = switch_status_t(9);
}
impl switch_status_t {
    pub const SWITCH_STATUS_INUSE: switch_status_t = switch_status_t(10);
}
impl switch_status_t {
    pub const SWITCH_STATUS_BREAK: switch_status_t = switch_status_t(11);
}
impl switch_status_t {
    pub const SWITCH_STATUS_SOCKERR: switch_status_t = switch_status_t(12);
}
impl switch_status_t {
    pub const SWITCH_STATUS_MORE_DATA: switch_status_t = switch_status_t(13);
}
impl switch_status_t {
    pub const SWITCH_STATUS_NOTFOUND: switch_status_t = switch_status_t(14);
}
impl switch_status_t {
    pub const SWITCH_STATUS_UNLOAD: switch_status_t = switch_status_t(15);
}
impl switch_status_t {
    pub const SWITCH_STATUS_NOUNLOAD: switch_status_t = switch_status_t(16);
}
impl switch_status_t {
    pub const SWITCH_STATUS_IGNORE: switch_status_t = switch_status_t(17);
}
impl switch_status_t {
    pub const SWITCH_STATUS_TOO_SMALL: switch_status_t = switch_status_t(18);
}
impl switch_status_t {
    pub const SWITCH_STATUS_FOUND: switch_status_t = switch_status_t(19);
}
impl switch_status_t {
    pub const SWITCH_STATUS_CONTINUE: switch_status_t = switch_status_t(20);
}
impl switch_status_t {
    pub const SWITCH_STATUS_TERM: switch_status_t = switch_status_t(21);
}
impl switch_status_t {
    pub const SWITCH_STATUS_NOT_INITALIZED: switch_status_t = switch_status_t(22);
}
impl switch_status_t {
    pub const SWITCH_STATUS_TOO_LATE: switch_status_t = switch_status_t(23);
}
impl switch_status_t {
    pub const SWITCH_STATUS_XBREAK: switch_status_t = switch_status_t(35);
}
impl switch_status_t {
    pub const SWITCH_STATUS_WINBREAK: switch_status_t = switch_status_t(730035);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_status_t(pub ::std::os::raw::c_uint);
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG10: switch_log_level_t = switch_log_level_t(110);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG9: switch_log_level_t = switch_log_level_t(109);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG8: switch_log_level_t = switch_log_level_t(108);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG7: switch_log_level_t = switch_log_level_t(107);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG6: switch_log_level_t = switch_log_level_t(106);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG5: switch_log_level_t = switch_log_level_t(105);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG4: switch_log_level_t = switch_log_level_t(104);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG3: switch_log_level_t = switch_log_level_t(103);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG2: switch_log_level_t = switch_log_level_t(102);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG1: switch_log_level_t = switch_log_level_t(101);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DEBUG: switch_log_level_t = switch_log_level_t(7);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_INFO: switch_log_level_t = switch_log_level_t(6);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_NOTICE: switch_log_level_t = switch_log_level_t(5);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_WARNING: switch_log_level_t = switch_log_level_t(4);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_ERROR: switch_log_level_t = switch_log_level_t(3);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_CRIT: switch_log_level_t = switch_log_level_t(2);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_ALERT: switch_log_level_t = switch_log_level_t(1);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_CONSOLE: switch_log_level_t = switch_log_level_t(0);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_DISABLE: switch_log_level_t = switch_log_level_t(-1);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_INVALID: switch_log_level_t = switch_log_level_t(64);
}
impl switch_log_level_t {
    pub const SWITCH_LOG_UNINIT: switch_log_level_t = switch_log_level_t(1000);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_log_level_t(pub ::std::os::raw::c_int);
impl switch_text_channel_t {
    pub const SWITCH_CHANNEL_ID_LOG: switch_text_channel_t = switch_text_channel_t(0);
}
impl switch_text_channel_t {
    pub const SWITCH_CHANNEL_ID_LOG_CLEAN: switch_text_channel_t = switch_text_channel_t(1);
}
impl switch_text_channel_t {
    pub const SWITCH_CHANNEL_ID_EVENT: switch_text_channel_t = switch_text_channel_t(2);
}
impl switch_text_channel_t {
    pub const SWITCH_CHANNEL_ID_SESSION: switch_text_channel_t = switch_text_channel_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_text_channel_t(pub ::std::os::raw::c_uint);
impl switch_core_session_message_flag_enum_t {
    pub const SCSMF_DYNAMIC: switch_core_session_message_flag_enum_t =
        switch_core_session_message_flag_enum_t(1);
}
impl switch_core_session_message_flag_enum_t {
    pub const SCSMF_FREE_STRING_REPLY: switch_core_session_message_flag_enum_t =
        switch_core_session_message_flag_enum_t(2);
}
impl switch_core_session_message_flag_enum_t {
    pub const SCSMF_FREE_POINTER_REPLY: switch_core_session_message_flag_enum_t =
        switch_core_session_message_flag_enum_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_session_message_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_core_session_message_flag_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_session {
    _unused: [u8; 0],
}
pub type switch_core_session_t = switch_core_session;
impl switch_channel_callstate_t {
    pub const CCS_DOWN: switch_channel_callstate_t = switch_channel_callstate_t(0);
}
impl switch_channel_callstate_t {
    pub const CCS_DIALING: switch_channel_callstate_t = switch_channel_callstate_t(1);
}
impl switch_channel_callstate_t {
    pub const CCS_RINGING: switch_channel_callstate_t = switch_channel_callstate_t(2);
}
impl switch_channel_callstate_t {
    pub const CCS_EARLY: switch_channel_callstate_t = switch_channel_callstate_t(3);
}
impl switch_channel_callstate_t {
    pub const CCS_ACTIVE: switch_channel_callstate_t = switch_channel_callstate_t(4);
}
impl switch_channel_callstate_t {
    pub const CCS_HELD: switch_channel_callstate_t = switch_channel_callstate_t(5);
}
impl switch_channel_callstate_t {
    pub const CCS_RING_WAIT: switch_channel_callstate_t = switch_channel_callstate_t(6);
}
impl switch_channel_callstate_t {
    pub const CCS_HANGUP: switch_channel_callstate_t = switch_channel_callstate_t(7);
}
impl switch_channel_callstate_t {
    pub const CCS_UNHELD: switch_channel_callstate_t = switch_channel_callstate_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_channel_callstate_t(pub ::std::os::raw::c_uint);
impl switch_device_state_t {
    pub const SDS_DOWN: switch_device_state_t = switch_device_state_t(0);
}
impl switch_device_state_t {
    pub const SDS_RINGING: switch_device_state_t = switch_device_state_t(1);
}
impl switch_device_state_t {
    pub const SDS_ACTIVE: switch_device_state_t = switch_device_state_t(2);
}
impl switch_device_state_t {
    pub const SDS_ACTIVE_MULTI: switch_device_state_t = switch_device_state_t(3);
}
impl switch_device_state_t {
    pub const SDS_HELD: switch_device_state_t = switch_device_state_t(4);
}
impl switch_device_state_t {
    pub const SDS_UNHELD: switch_device_state_t = switch_device_state_t(5);
}
impl switch_device_state_t {
    pub const SDS_HANGUP: switch_device_state_t = switch_device_state_t(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_device_state_t(pub ::std::os::raw::c_uint);
impl switch_channel_state_t {
    pub const CS_NEW: switch_channel_state_t = switch_channel_state_t(0);
}
impl switch_channel_state_t {
    pub const CS_INIT: switch_channel_state_t = switch_channel_state_t(1);
}
impl switch_channel_state_t {
    pub const CS_ROUTING: switch_channel_state_t = switch_channel_state_t(2);
}
impl switch_channel_state_t {
    pub const CS_SOFT_EXECUTE: switch_channel_state_t = switch_channel_state_t(3);
}
impl switch_channel_state_t {
    pub const CS_EXECUTE: switch_channel_state_t = switch_channel_state_t(4);
}
impl switch_channel_state_t {
    pub const CS_EXCHANGE_MEDIA: switch_channel_state_t = switch_channel_state_t(5);
}
impl switch_channel_state_t {
    pub const CS_PARK: switch_channel_state_t = switch_channel_state_t(6);
}
impl switch_channel_state_t {
    pub const CS_CONSUME_MEDIA: switch_channel_state_t = switch_channel_state_t(7);
}
impl switch_channel_state_t {
    pub const CS_HIBERNATE: switch_channel_state_t = switch_channel_state_t(8);
}
impl switch_channel_state_t {
    pub const CS_RESET: switch_channel_state_t = switch_channel_state_t(9);
}
impl switch_channel_state_t {
    pub const CS_HANGUP: switch_channel_state_t = switch_channel_state_t(10);
}
impl switch_channel_state_t {
    pub const CS_REPORTING: switch_channel_state_t = switch_channel_state_t(11);
}
impl switch_channel_state_t {
    pub const CS_DESTROY: switch_channel_state_t = switch_channel_state_t(12);
}
impl switch_channel_state_t {
    pub const CS_NONE: switch_channel_state_t = switch_channel_state_t(13);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_channel_state_t(pub ::std::os::raw::c_uint);
impl switch_ring_ready_t {
    pub const SWITCH_RING_READY_NONE: switch_ring_ready_t = switch_ring_ready_t(0);
}
impl switch_ring_ready_t {
    pub const SWITCH_RING_READY_RINGING: switch_ring_ready_t = switch_ring_ready_t(1);
}
impl switch_ring_ready_t {
    pub const SWITCH_RING_READY_QUEUED: switch_ring_ready_t = switch_ring_ready_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_ring_ready_t(pub ::std::os::raw::c_uint);
impl switch_channel_cap_t {
    pub const CC_MEDIA_ACK: switch_channel_cap_t = switch_channel_cap_t(1);
}
impl switch_channel_cap_t {
    pub const CC_BYPASS_MEDIA: switch_channel_cap_t = switch_channel_cap_t(2);
}
impl switch_channel_cap_t {
    pub const CC_PROXY_MEDIA: switch_channel_cap_t = switch_channel_cap_t(3);
}
impl switch_channel_cap_t {
    pub const CC_JITTERBUFFER: switch_channel_cap_t = switch_channel_cap_t(4);
}
impl switch_channel_cap_t {
    pub const CC_FS_RTP: switch_channel_cap_t = switch_channel_cap_t(5);
}
impl switch_channel_cap_t {
    pub const CC_QUEUEABLE_DTMF_DELAY: switch_channel_cap_t = switch_channel_cap_t(6);
}
impl switch_channel_cap_t {
    pub const CC_IO_OVERRIDE: switch_channel_cap_t = switch_channel_cap_t(7);
}
impl switch_channel_cap_t {
    pub const CC_RTP_RTT: switch_channel_cap_t = switch_channel_cap_t(8);
}
impl switch_channel_cap_t {
    pub const CC_MSRP: switch_channel_cap_t = switch_channel_cap_t(9);
}
impl switch_channel_cap_t {
    pub const CC_MUTE_VIA_MEDIA_STREAM: switch_channel_cap_t = switch_channel_cap_t(10);
}
impl switch_channel_cap_t {
    pub const CC_FLAG_MAX: switch_channel_cap_t = switch_channel_cap_t(11);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_channel_cap_t(pub ::std::os::raw::c_uint);
impl switch_channel_flag_t {
    pub const CF_ANSWERED: switch_channel_flag_t = switch_channel_flag_t(1);
}
impl switch_channel_flag_t {
    pub const CF_OUTBOUND: switch_channel_flag_t = switch_channel_flag_t(2);
}
impl switch_channel_flag_t {
    pub const CF_EARLY_MEDIA: switch_channel_flag_t = switch_channel_flag_t(3);
}
impl switch_channel_flag_t {
    pub const CF_BRIDGE_ORIGINATOR: switch_channel_flag_t = switch_channel_flag_t(4);
}
impl switch_channel_flag_t {
    pub const CF_UUID_BRIDGE_ORIGINATOR: switch_channel_flag_t = switch_channel_flag_t(5);
}
impl switch_channel_flag_t {
    pub const CF_TRANSFER: switch_channel_flag_t = switch_channel_flag_t(6);
}
impl switch_channel_flag_t {
    pub const CF_ACCEPT_CNG: switch_channel_flag_t = switch_channel_flag_t(7);
}
impl switch_channel_flag_t {
    pub const CF_REDIRECT: switch_channel_flag_t = switch_channel_flag_t(8);
}
impl switch_channel_flag_t {
    pub const CF_BRIDGED: switch_channel_flag_t = switch_channel_flag_t(9);
}
impl switch_channel_flag_t {
    pub const CF_HOLD: switch_channel_flag_t = switch_channel_flag_t(10);
}
impl switch_channel_flag_t {
    pub const CF_HOLD_BLEG: switch_channel_flag_t = switch_channel_flag_t(11);
}
impl switch_channel_flag_t {
    pub const CF_SERVICE: switch_channel_flag_t = switch_channel_flag_t(12);
}
impl switch_channel_flag_t {
    pub const CF_TAGGED: switch_channel_flag_t = switch_channel_flag_t(13);
}
impl switch_channel_flag_t {
    pub const CF_WINNER: switch_channel_flag_t = switch_channel_flag_t(14);
}
impl switch_channel_flag_t {
    pub const CF_REUSE_CALLER_PROFILE: switch_channel_flag_t = switch_channel_flag_t(15);
}
impl switch_channel_flag_t {
    pub const CF_CONTROLLED: switch_channel_flag_t = switch_channel_flag_t(16);
}
impl switch_channel_flag_t {
    pub const CF_PROXY_MODE: switch_channel_flag_t = switch_channel_flag_t(17);
}
impl switch_channel_flag_t {
    pub const CF_PROXY_OFF: switch_channel_flag_t = switch_channel_flag_t(18);
}
impl switch_channel_flag_t {
    pub const CF_SUSPEND: switch_channel_flag_t = switch_channel_flag_t(19);
}
impl switch_channel_flag_t {
    pub const CF_EVENT_PARSE: switch_channel_flag_t = switch_channel_flag_t(20);
}
impl switch_channel_flag_t {
    pub const CF_GEN_RINGBACK: switch_channel_flag_t = switch_channel_flag_t(21);
}
impl switch_channel_flag_t {
    pub const CF_RING_READY: switch_channel_flag_t = switch_channel_flag_t(22);
}
impl switch_channel_flag_t {
    pub const CF_BREAK: switch_channel_flag_t = switch_channel_flag_t(23);
}
impl switch_channel_flag_t {
    pub const CF_BROADCAST: switch_channel_flag_t = switch_channel_flag_t(24);
}
impl switch_channel_flag_t {
    pub const CF_UNICAST: switch_channel_flag_t = switch_channel_flag_t(25);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO: switch_channel_flag_t = switch_channel_flag_t(26);
}
impl switch_channel_flag_t {
    pub const CF_EVENT_LOCK: switch_channel_flag_t = switch_channel_flag_t(27);
}
impl switch_channel_flag_t {
    pub const CF_EVENT_LOCK_PRI: switch_channel_flag_t = switch_channel_flag_t(28);
}
impl switch_channel_flag_t {
    pub const CF_RESET: switch_channel_flag_t = switch_channel_flag_t(29);
}
impl switch_channel_flag_t {
    pub const CF_ORIGINATING: switch_channel_flag_t = switch_channel_flag_t(30);
}
impl switch_channel_flag_t {
    pub const CF_STOP_BROADCAST: switch_channel_flag_t = switch_channel_flag_t(31);
}
impl switch_channel_flag_t {
    pub const CF_PROXY_MEDIA: switch_channel_flag_t = switch_channel_flag_t(32);
}
impl switch_channel_flag_t {
    pub const CF_INNER_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(33);
}
impl switch_channel_flag_t {
    pub const CF_REQ_MEDIA: switch_channel_flag_t = switch_channel_flag_t(34);
}
impl switch_channel_flag_t {
    pub const CF_VERBOSE_EVENTS: switch_channel_flag_t = switch_channel_flag_t(35);
}
impl switch_channel_flag_t {
    pub const CF_PAUSE_BUGS: switch_channel_flag_t = switch_channel_flag_t(36);
}
impl switch_channel_flag_t {
    pub const CF_DIVERT_EVENTS: switch_channel_flag_t = switch_channel_flag_t(37);
}
impl switch_channel_flag_t {
    pub const CF_BLOCK_STATE: switch_channel_flag_t = switch_channel_flag_t(38);
}
impl switch_channel_flag_t {
    pub const CF_FS_RTP: switch_channel_flag_t = switch_channel_flag_t(39);
}
impl switch_channel_flag_t {
    pub const CF_REPORTING: switch_channel_flag_t = switch_channel_flag_t(40);
}
impl switch_channel_flag_t {
    pub const CF_PARK: switch_channel_flag_t = switch_channel_flag_t(41);
}
impl switch_channel_flag_t {
    pub const CF_TIMESTAMP_SET: switch_channel_flag_t = switch_channel_flag_t(42);
}
impl switch_channel_flag_t {
    pub const CF_ORIGINATOR: switch_channel_flag_t = switch_channel_flag_t(43);
}
impl switch_channel_flag_t {
    pub const CF_XFER_ZOMBIE: switch_channel_flag_t = switch_channel_flag_t(44);
}
impl switch_channel_flag_t {
    pub const CF_MEDIA_ACK: switch_channel_flag_t = switch_channel_flag_t(45);
}
impl switch_channel_flag_t {
    pub const CF_THREAD_SLEEPING: switch_channel_flag_t = switch_channel_flag_t(46);
}
impl switch_channel_flag_t {
    pub const CF_DISABLE_RINGBACK: switch_channel_flag_t = switch_channel_flag_t(47);
}
impl switch_channel_flag_t {
    pub const CF_NOT_READY: switch_channel_flag_t = switch_channel_flag_t(48);
}
impl switch_channel_flag_t {
    pub const CF_SIGNAL_BRIDGE_TTL: switch_channel_flag_t = switch_channel_flag_t(49);
}
impl switch_channel_flag_t {
    pub const CF_MEDIA_BRIDGE_TTL: switch_channel_flag_t = switch_channel_flag_t(50);
}
impl switch_channel_flag_t {
    pub const CF_BYPASS_MEDIA_AFTER_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(51);
}
impl switch_channel_flag_t {
    pub const CF_LEG_HOLDING: switch_channel_flag_t = switch_channel_flag_t(52);
}
impl switch_channel_flag_t {
    pub const CF_BROADCAST_DROP_MEDIA: switch_channel_flag_t = switch_channel_flag_t(53);
}
impl switch_channel_flag_t {
    pub const CF_EARLY_HANGUP: switch_channel_flag_t = switch_channel_flag_t(54);
}
impl switch_channel_flag_t {
    pub const CF_MEDIA_SET: switch_channel_flag_t = switch_channel_flag_t(55);
}
impl switch_channel_flag_t {
    pub const CF_CONSUME_ON_ORIGINATE: switch_channel_flag_t = switch_channel_flag_t(56);
}
impl switch_channel_flag_t {
    pub const CF_PASSTHRU_PTIME_MISMATCH: switch_channel_flag_t = switch_channel_flag_t(57);
}
impl switch_channel_flag_t {
    pub const CF_BRIDGE_NOWRITE: switch_channel_flag_t = switch_channel_flag_t(58);
}
impl switch_channel_flag_t {
    pub const CF_RECOVERED: switch_channel_flag_t = switch_channel_flag_t(59);
}
impl switch_channel_flag_t {
    pub const CF_JITTERBUFFER: switch_channel_flag_t = switch_channel_flag_t(60);
}
impl switch_channel_flag_t {
    pub const CF_JITTERBUFFER_PLC: switch_channel_flag_t = switch_channel_flag_t(61);
}
impl switch_channel_flag_t {
    pub const CF_DIALPLAN: switch_channel_flag_t = switch_channel_flag_t(62);
}
impl switch_channel_flag_t {
    pub const CF_BLEG: switch_channel_flag_t = switch_channel_flag_t(63);
}
impl switch_channel_flag_t {
    pub const CF_BLOCK_BROADCAST_UNTIL_MEDIA: switch_channel_flag_t = switch_channel_flag_t(64);
}
impl switch_channel_flag_t {
    pub const CF_CNG_PLC: switch_channel_flag_t = switch_channel_flag_t(65);
}
impl switch_channel_flag_t {
    pub const CF_ATTENDED_TRANSFER: switch_channel_flag_t = switch_channel_flag_t(66);
}
impl switch_channel_flag_t {
    pub const CF_LAZY_ATTENDED_TRANSFER: switch_channel_flag_t = switch_channel_flag_t(67);
}
impl switch_channel_flag_t {
    pub const CF_SIGNAL_DATA: switch_channel_flag_t = switch_channel_flag_t(68);
}
impl switch_channel_flag_t {
    pub const CF_SIMPLIFY: switch_channel_flag_t = switch_channel_flag_t(69);
}
impl switch_channel_flag_t {
    pub const CF_ZOMBIE_EXEC: switch_channel_flag_t = switch_channel_flag_t(70);
}
impl switch_channel_flag_t {
    pub const CF_INTERCEPT: switch_channel_flag_t = switch_channel_flag_t(71);
}
impl switch_channel_flag_t {
    pub const CF_INTERCEPTED: switch_channel_flag_t = switch_channel_flag_t(72);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_REFRESH_REQ: switch_channel_flag_t = switch_channel_flag_t(73);
}
impl switch_channel_flag_t {
    pub const CF_MANUAL_VID_REFRESH: switch_channel_flag_t = switch_channel_flag_t(74);
}
impl switch_channel_flag_t {
    pub const CF_MANUAL_MEDIA_PARAMS: switch_channel_flag_t = switch_channel_flag_t(75);
}
impl switch_channel_flag_t {
    pub const CF_SERVICE_AUDIO: switch_channel_flag_t = switch_channel_flag_t(76);
}
impl switch_channel_flag_t {
    pub const CF_SERVICE_VIDEO: switch_channel_flag_t = switch_channel_flag_t(77);
}
impl switch_channel_flag_t {
    pub const CF_CHANNEL_SWAP: switch_channel_flag_t = switch_channel_flag_t(78);
}
impl switch_channel_flag_t {
    pub const CF_DEVICE_LEG: switch_channel_flag_t = switch_channel_flag_t(79);
}
impl switch_channel_flag_t {
    pub const CF_FINAL_DEVICE_LEG: switch_channel_flag_t = switch_channel_flag_t(80);
}
impl switch_channel_flag_t {
    pub const CF_PICKUP: switch_channel_flag_t = switch_channel_flag_t(81);
}
impl switch_channel_flag_t {
    pub const CF_CONFIRM_BLIND_TRANSFER: switch_channel_flag_t = switch_channel_flag_t(82);
}
impl switch_channel_flag_t {
    pub const CF_NO_PRESENCE: switch_channel_flag_t = switch_channel_flag_t(83);
}
impl switch_channel_flag_t {
    pub const CF_CONFERENCE: switch_channel_flag_t = switch_channel_flag_t(84);
}
impl switch_channel_flag_t {
    pub const CF_CONFERENCE_ADV: switch_channel_flag_t = switch_channel_flag_t(85);
}
impl switch_channel_flag_t {
    pub const CF_RECOVERING: switch_channel_flag_t = switch_channel_flag_t(86);
}
impl switch_channel_flag_t {
    pub const CF_RECOVERING_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(87);
}
impl switch_channel_flag_t {
    pub const CF_TRACKED: switch_channel_flag_t = switch_channel_flag_t(88);
}
impl switch_channel_flag_t {
    pub const CF_TRACKABLE: switch_channel_flag_t = switch_channel_flag_t(89);
}
impl switch_channel_flag_t {
    pub const CF_NO_CDR: switch_channel_flag_t = switch_channel_flag_t(90);
}
impl switch_channel_flag_t {
    pub const CF_EARLY_OK: switch_channel_flag_t = switch_channel_flag_t(91);
}
impl switch_channel_flag_t {
    pub const CF_MEDIA_TRANS: switch_channel_flag_t = switch_channel_flag_t(92);
}
impl switch_channel_flag_t {
    pub const CF_HOLD_ON_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(93);
}
impl switch_channel_flag_t {
    pub const CF_SECURE: switch_channel_flag_t = switch_channel_flag_t(94);
}
impl switch_channel_flag_t {
    pub const CF_LIBERAL_DTMF: switch_channel_flag_t = switch_channel_flag_t(95);
}
impl switch_channel_flag_t {
    pub const CF_SLA_BARGE: switch_channel_flag_t = switch_channel_flag_t(96);
}
impl switch_channel_flag_t {
    pub const CF_SLA_BARGING: switch_channel_flag_t = switch_channel_flag_t(97);
}
impl switch_channel_flag_t {
    pub const CF_PROTO_HOLD: switch_channel_flag_t = switch_channel_flag_t(98);
}
impl switch_channel_flag_t {
    pub const CF_HOLD_LOCK: switch_channel_flag_t = switch_channel_flag_t(99);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_POSSIBLE: switch_channel_flag_t = switch_channel_flag_t(100);
}
impl switch_channel_flag_t {
    pub const CF_NOTIMER_DURING_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(101);
}
impl switch_channel_flag_t {
    pub const CF_PASS_RFC2833: switch_channel_flag_t = switch_channel_flag_t(102);
}
impl switch_channel_flag_t {
    pub const CF_T38_PASSTHRU: switch_channel_flag_t = switch_channel_flag_t(103);
}
impl switch_channel_flag_t {
    pub const CF_DROP_DTMF: switch_channel_flag_t = switch_channel_flag_t(104);
}
impl switch_channel_flag_t {
    pub const CF_REINVITE: switch_channel_flag_t = switch_channel_flag_t(105);
}
impl switch_channel_flag_t {
    pub const CF_NOSDP_REINVITE: switch_channel_flag_t = switch_channel_flag_t(106);
}
impl switch_channel_flag_t {
    pub const CF_AUTOFLUSH_DURING_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(107);
}
impl switch_channel_flag_t {
    pub const CF_RTP_NOTIMER_DURING_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(108);
}
impl switch_channel_flag_t {
    pub const CF_AVPF: switch_channel_flag_t = switch_channel_flag_t(109);
}
impl switch_channel_flag_t {
    pub const CF_AVPF_MOZ: switch_channel_flag_t = switch_channel_flag_t(110);
}
impl switch_channel_flag_t {
    pub const CF_ICE: switch_channel_flag_t = switch_channel_flag_t(111);
}
impl switch_channel_flag_t {
    pub const CF_DTLS: switch_channel_flag_t = switch_channel_flag_t(112);
}
impl switch_channel_flag_t {
    pub const CF_VERBOSE_SDP: switch_channel_flag_t = switch_channel_flag_t(113);
}
impl switch_channel_flag_t {
    pub const CF_DTLS_OK: switch_channel_flag_t = switch_channel_flag_t(114);
}
impl switch_channel_flag_t {
    pub const CF_3PCC: switch_channel_flag_t = switch_channel_flag_t(115);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_PASSIVE: switch_channel_flag_t = switch_channel_flag_t(116);
}
impl switch_channel_flag_t {
    pub const CF_NOVIDEO: switch_channel_flag_t = switch_channel_flag_t(117);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_BITRATE_UNMANAGABLE: switch_channel_flag_t = switch_channel_flag_t(118);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_ECHO: switch_channel_flag_t = switch_channel_flag_t(119);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_BLANK: switch_channel_flag_t = switch_channel_flag_t(120);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_WRITING: switch_channel_flag_t = switch_channel_flag_t(121);
}
impl switch_channel_flag_t {
    pub const CF_SLA_INTERCEPT: switch_channel_flag_t = switch_channel_flag_t(122);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_BREAK: switch_channel_flag_t = switch_channel_flag_t(123);
}
impl switch_channel_flag_t {
    pub const CF_AUDIO_PAUSE_READ: switch_channel_flag_t = switch_channel_flag_t(124);
}
impl switch_channel_flag_t {
    pub const CF_AUDIO_PAUSE_WRITE: switch_channel_flag_t = switch_channel_flag_t(125);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_PAUSE_READ: switch_channel_flag_t = switch_channel_flag_t(126);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_PAUSE_WRITE: switch_channel_flag_t = switch_channel_flag_t(127);
}
impl switch_channel_flag_t {
    pub const CF_BYPASS_MEDIA_AFTER_HOLD: switch_channel_flag_t = switch_channel_flag_t(128);
}
impl switch_channel_flag_t {
    pub const CF_HANGUP_HELD: switch_channel_flag_t = switch_channel_flag_t(129);
}
impl switch_channel_flag_t {
    pub const CF_CONFERENCE_RESET_MEDIA: switch_channel_flag_t = switch_channel_flag_t(130);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_DECODED_READ: switch_channel_flag_t = switch_channel_flag_t(131);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_DEBUG_READ: switch_channel_flag_t = switch_channel_flag_t(132);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_DEBUG_WRITE: switch_channel_flag_t = switch_channel_flag_t(133);
}
impl switch_channel_flag_t {
    pub const CF_NO_RECOVER: switch_channel_flag_t = switch_channel_flag_t(134);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_READY: switch_channel_flag_t = switch_channel_flag_t(135);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_MIRROR_INPUT: switch_channel_flag_t = switch_channel_flag_t(136);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_READ_FILE_ATTACHED: switch_channel_flag_t = switch_channel_flag_t(137);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_WRITE_FILE_ATTACHED: switch_channel_flag_t = switch_channel_flag_t(138);
}
impl switch_channel_flag_t {
    pub const CF_3P_MEDIA_REQUESTED: switch_channel_flag_t = switch_channel_flag_t(139);
}
impl switch_channel_flag_t {
    pub const CF_3P_NOMEDIA_REQUESTED: switch_channel_flag_t = switch_channel_flag_t(140);
}
impl switch_channel_flag_t {
    pub const CF_3P_NOMEDIA_REQUESTED_BLEG: switch_channel_flag_t = switch_channel_flag_t(141);
}
impl switch_channel_flag_t {
    pub const CF_IMAGE_SDP: switch_channel_flag_t = switch_channel_flag_t(142);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_SDP_RECVD: switch_channel_flag_t = switch_channel_flag_t(143);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_SDP_RECVD: switch_channel_flag_t = switch_channel_flag_t(144);
}
impl switch_channel_flag_t {
    pub const CF_HAS_TEXT: switch_channel_flag_t = switch_channel_flag_t(145);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_POSSIBLE: switch_channel_flag_t = switch_channel_flag_t(146);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_PASSIVE: switch_channel_flag_t = switch_channel_flag_t(147);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_ECHO: switch_channel_flag_t = switch_channel_flag_t(148);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_ACTIVE: switch_channel_flag_t = switch_channel_flag_t(149);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_IDLE: switch_channel_flag_t = switch_channel_flag_t(150);
}
impl switch_channel_flag_t {
    pub const CF_TEXT_LINE_BASED: switch_channel_flag_t = switch_channel_flag_t(151);
}
impl switch_channel_flag_t {
    pub const CF_QUEUE_TEXT_EVENTS: switch_channel_flag_t = switch_channel_flag_t(152);
}
impl switch_channel_flag_t {
    pub const CF_FIRE_TEXT_EVENTS: switch_channel_flag_t = switch_channel_flag_t(153);
}
impl switch_channel_flag_t {
    pub const CF_MSRP: switch_channel_flag_t = switch_channel_flag_t(154);
}
impl switch_channel_flag_t {
    pub const CF_MSRPS: switch_channel_flag_t = switch_channel_flag_t(155);
}
impl switch_channel_flag_t {
    pub const CF_WANT_MSRP: switch_channel_flag_t = switch_channel_flag_t(156);
}
impl switch_channel_flag_t {
    pub const CF_WANT_MSRPS: switch_channel_flag_t = switch_channel_flag_t(157);
}
impl switch_channel_flag_t {
    pub const CF_RTT: switch_channel_flag_t = switch_channel_flag_t(158);
}
impl switch_channel_flag_t {
    pub const CF_WANT_RTT: switch_channel_flag_t = switch_channel_flag_t(159);
}
impl switch_channel_flag_t {
    pub const CF_AUDIO: switch_channel_flag_t = switch_channel_flag_t(160);
}
impl switch_channel_flag_t {
    pub const CF_AWAITING_STREAM_CHANGE: switch_channel_flag_t = switch_channel_flag_t(161);
}
impl switch_channel_flag_t {
    pub const CF_PROCESSING_STREAM_CHANGE: switch_channel_flag_t = switch_channel_flag_t(162);
}
impl switch_channel_flag_t {
    pub const CF_STREAM_CHANGED: switch_channel_flag_t = switch_channel_flag_t(163);
}
impl switch_channel_flag_t {
    pub const CF_ARRANGED_BRIDGE: switch_channel_flag_t = switch_channel_flag_t(164);
}
impl switch_channel_flag_t {
    pub const CF_STATE_REPEAT: switch_channel_flag_t = switch_channel_flag_t(165);
}
impl switch_channel_flag_t {
    pub const CF_WANT_DTLSv1_2: switch_channel_flag_t = switch_channel_flag_t(166);
}
impl switch_channel_flag_t {
    pub const CF_RFC7329_COMPAT: switch_channel_flag_t = switch_channel_flag_t(167);
}
impl switch_channel_flag_t {
    pub const CF_REATTACHED: switch_channel_flag_t = switch_channel_flag_t(168);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_READ_TAPPED: switch_channel_flag_t = switch_channel_flag_t(169);
}
impl switch_channel_flag_t {
    pub const CF_VIDEO_WRITE_TAPPED: switch_channel_flag_t = switch_channel_flag_t(170);
}
impl switch_channel_flag_t {
    pub const CF_DEVICES_CHANGED: switch_channel_flag_t = switch_channel_flag_t(171);
}
impl switch_channel_flag_t {
    pub const CF_FLAG_MAX: switch_channel_flag_t = switch_channel_flag_t(172);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_channel_flag_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_vid_params_s {
    pub width: u32,
    pub height: u32,
    pub fps: u32,
    pub d_width: u32,
    pub d_height: u32,
}
pub type switch_vid_params_t = switch_vid_params_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_fps_s {
    pub fps: f32,
    pub ms: ::std::os::raw::c_int,
    pub samples: ::std::os::raw::c_int,
}
pub type switch_fps_t = switch_fps_s;
impl switch_channel_app_flag_t {
    pub const CF_APP_TAGGED: switch_channel_app_flag_t = switch_channel_app_flag_t(1);
}
impl switch_channel_app_flag_t {
    pub const CF_APP_T38: switch_channel_app_flag_t = switch_channel_app_flag_t(2);
}
impl switch_channel_app_flag_t {
    pub const CF_APP_T38_REQ: switch_channel_app_flag_t = switch_channel_app_flag_t(4);
}
impl switch_channel_app_flag_t {
    pub const CF_APP_T38_FAIL: switch_channel_app_flag_t = switch_channel_app_flag_t(8);
}
impl switch_channel_app_flag_t {
    pub const CF_APP_T38_NEGOTIATED: switch_channel_app_flag_t = switch_channel_app_flag_t(16);
}
impl switch_channel_app_flag_t {
    pub const CF_APP_T38_POSSIBLE: switch_channel_app_flag_t = switch_channel_app_flag_t(32);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_channel_app_flag_t(pub ::std::os::raw::c_uint);
impl switch_frame_flag_enum_t {
    pub const SFF_NONE: switch_frame_flag_enum_t = switch_frame_flag_enum_t(0);
}
impl switch_frame_flag_enum_t {
    pub const SFF_CNG: switch_frame_flag_enum_t = switch_frame_flag_enum_t(1);
}
impl switch_frame_flag_enum_t {
    pub const SFF_RAW_RTP: switch_frame_flag_enum_t = switch_frame_flag_enum_t(2);
}
impl switch_frame_flag_enum_t {
    pub const SFF_RTP_HEADER: switch_frame_flag_enum_t = switch_frame_flag_enum_t(4);
}
impl switch_frame_flag_enum_t {
    pub const SFF_PLC: switch_frame_flag_enum_t = switch_frame_flag_enum_t(8);
}
impl switch_frame_flag_enum_t {
    pub const SFF_RFC2833: switch_frame_flag_enum_t = switch_frame_flag_enum_t(16);
}
impl switch_frame_flag_enum_t {
    pub const SFF_PROXY_PACKET: switch_frame_flag_enum_t = switch_frame_flag_enum_t(32);
}
impl switch_frame_flag_enum_t {
    pub const SFF_DYNAMIC: switch_frame_flag_enum_t = switch_frame_flag_enum_t(64);
}
impl switch_frame_flag_enum_t {
    pub const SFF_UDPTL_PACKET: switch_frame_flag_enum_t = switch_frame_flag_enum_t(128);
}
impl switch_frame_flag_enum_t {
    pub const SFF_NOT_AUDIO: switch_frame_flag_enum_t = switch_frame_flag_enum_t(256);
}
impl switch_frame_flag_enum_t {
    pub const SFF_RTCP: switch_frame_flag_enum_t = switch_frame_flag_enum_t(512);
}
impl switch_frame_flag_enum_t {
    pub const SFF_MARKER: switch_frame_flag_enum_t = switch_frame_flag_enum_t(1024);
}
impl switch_frame_flag_enum_t {
    pub const SFF_WAIT_KEY_FRAME: switch_frame_flag_enum_t = switch_frame_flag_enum_t(2048);
}
impl switch_frame_flag_enum_t {
    pub const SFF_RAW_RTP_PARSE_FRAME: switch_frame_flag_enum_t = switch_frame_flag_enum_t(4096);
}
impl switch_frame_flag_enum_t {
    pub const SFF_PICTURE_RESET: switch_frame_flag_enum_t = switch_frame_flag_enum_t(8192);
}
impl switch_frame_flag_enum_t {
    pub const SFF_SAME_IMAGE: switch_frame_flag_enum_t = switch_frame_flag_enum_t(16384);
}
impl switch_frame_flag_enum_t {
    pub const SFF_USE_VIDEO_TIMESTAMP: switch_frame_flag_enum_t = switch_frame_flag_enum_t(32768);
}
impl switch_frame_flag_enum_t {
    pub const SFF_ENCODED: switch_frame_flag_enum_t = switch_frame_flag_enum_t(65536);
}
impl switch_frame_flag_enum_t {
    pub const SFF_TEXT_LINE_BREAK: switch_frame_flag_enum_t = switch_frame_flag_enum_t(131072);
}
impl switch_frame_flag_enum_t {
    pub const SFF_IS_KEYFRAME: switch_frame_flag_enum_t = switch_frame_flag_enum_t(262144);
}
impl switch_frame_flag_enum_t {
    pub const SFF_EXTERNAL: switch_frame_flag_enum_t = switch_frame_flag_enum_t(524288);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_frame_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_frame_flag_t = u32;
impl switch_application_flag_enum_t {
    pub const SAF_NONE: switch_application_flag_enum_t = switch_application_flag_enum_t(0);
}
impl switch_application_flag_enum_t {
    pub const SAF_SUPPORT_NOMEDIA: switch_application_flag_enum_t =
        switch_application_flag_enum_t(1);
}
impl switch_application_flag_enum_t {
    pub const SAF_ROUTING_EXEC: switch_application_flag_enum_t = switch_application_flag_enum_t(2);
}
impl switch_application_flag_enum_t {
    pub const SAF_MEDIA_TAP: switch_application_flag_enum_t = switch_application_flag_enum_t(4);
}
impl switch_application_flag_enum_t {
    pub const SAF_ZOMBIE_EXEC: switch_application_flag_enum_t = switch_application_flag_enum_t(8);
}
impl switch_application_flag_enum_t {
    pub const SAF_NO_LOOPBACK: switch_application_flag_enum_t = switch_application_flag_enum_t(16);
}
impl switch_application_flag_enum_t {
    pub const SAF_SUPPORT_TEXT_ONLY: switch_application_flag_enum_t =
        switch_application_flag_enum_t(32);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_application_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_application_flag_t = u32;
impl switch_chat_application_flag_enum_t {
    pub const SCAF_NONE: switch_chat_application_flag_enum_t =
        switch_chat_application_flag_enum_t(0);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_chat_application_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_chat_application_flag_t = u32;
impl switch_signal_t {
    pub const SWITCH_SIG_NONE: switch_signal_t = switch_signal_t(0);
}
impl switch_signal_t {
    pub const SWITCH_SIG_KILL: switch_signal_t = switch_signal_t(1);
}
impl switch_signal_t {
    pub const SWITCH_SIG_XFER: switch_signal_t = switch_signal_t(2);
}
impl switch_signal_t {
    pub const SWITCH_SIG_BREAK: switch_signal_t = switch_signal_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_signal_t(pub ::std::os::raw::c_uint);
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_ENCODE: switch_codec_flag_enum_t = switch_codec_flag_enum_t(1);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_DECODE: switch_codec_flag_enum_t = switch_codec_flag_enum_t(2);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_SILENCE_START: switch_codec_flag_enum_t =
        switch_codec_flag_enum_t(4);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_SILENCE_STOP: switch_codec_flag_enum_t =
        switch_codec_flag_enum_t(8);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_SILENCE: switch_codec_flag_enum_t = switch_codec_flag_enum_t(16);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_FREE_POOL: switch_codec_flag_enum_t = switch_codec_flag_enum_t(32);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_AAL2: switch_codec_flag_enum_t = switch_codec_flag_enum_t(64);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_PASSTHROUGH: switch_codec_flag_enum_t =
        switch_codec_flag_enum_t(128);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_READY: switch_codec_flag_enum_t = switch_codec_flag_enum_t(256);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_HAS_ADJ_BITRATE: switch_codec_flag_enum_t =
        switch_codec_flag_enum_t(16384);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_HAS_PLC: switch_codec_flag_enum_t = switch_codec_flag_enum_t(32768);
}
impl switch_codec_flag_enum_t {
    pub const SWITCH_CODEC_FLAG_VIDEO_PATCHING: switch_codec_flag_enum_t =
        switch_codec_flag_enum_t(65536);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_codec_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_codec_flag_t = u32;
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_NONE: switch_speech_flag_enum_t = switch_speech_flag_enum_t(0);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_HASTEXT: switch_speech_flag_enum_t = switch_speech_flag_enum_t(1);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_PEEK: switch_speech_flag_enum_t = switch_speech_flag_enum_t(2);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_FREE_POOL: switch_speech_flag_enum_t =
        switch_speech_flag_enum_t(4);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_BLOCKING: switch_speech_flag_enum_t = switch_speech_flag_enum_t(8);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_PAUSE: switch_speech_flag_enum_t = switch_speech_flag_enum_t(16);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_OPEN: switch_speech_flag_enum_t = switch_speech_flag_enum_t(32);
}
impl switch_speech_flag_enum_t {
    pub const SWITCH_SPEECH_FLAG_DONE: switch_speech_flag_enum_t = switch_speech_flag_enum_t(64);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_speech_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_speech_flag_t = u32;
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_NONE: switch_asr_flag_enum_t = switch_asr_flag_enum_t(0);
}
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_DATA: switch_asr_flag_enum_t = switch_asr_flag_enum_t(1);
}
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_FREE_POOL: switch_asr_flag_enum_t = switch_asr_flag_enum_t(2);
}
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_CLOSED: switch_asr_flag_enum_t = switch_asr_flag_enum_t(4);
}
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_FIRE_EVENTS: switch_asr_flag_enum_t = switch_asr_flag_enum_t(8);
}
impl switch_asr_flag_enum_t {
    pub const SWITCH_ASR_FLAG_AUTO_RESUME: switch_asr_flag_enum_t = switch_asr_flag_enum_t(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_asr_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_asr_flag_t = u32;
impl switch_directory_flag_enum_t {
    pub const SWITCH_DIRECTORY_FLAG_FREE_POOL: switch_directory_flag_enum_t =
        switch_directory_flag_enum_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_directory_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_directory_flag_t = u32;
impl switch_codec_type_t {
    pub const SWITCH_CODEC_TYPE_AUDIO: switch_codec_type_t = switch_codec_type_t(0);
}
impl switch_codec_type_t {
    pub const SWITCH_CODEC_TYPE_VIDEO: switch_codec_type_t = switch_codec_type_t(1);
}
impl switch_codec_type_t {
    pub const SWITCH_CODEC_TYPE_T38: switch_codec_type_t = switch_codec_type_t(2);
}
impl switch_codec_type_t {
    pub const SWITCH_CODEC_TYPE_APP: switch_codec_type_t = switch_codec_type_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_codec_type_t(pub ::std::os::raw::c_uint);
impl switch_media_type_t {
    pub const SWITCH_MEDIA_TYPE_AUDIO: switch_media_type_t = switch_media_type_t(0);
}
impl switch_media_type_t {
    pub const SWITCH_MEDIA_TYPE_VIDEO: switch_media_type_t = switch_media_type_t(1);
}
impl switch_media_type_t {
    pub const SWITCH_MEDIA_TYPE_TEXT: switch_media_type_t = switch_media_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_media_type_t(pub ::std::os::raw::c_uint);
impl switch_timer_flag_enum_t {
    pub const SWITCH_TIMER_FLAG_FREE_POOL: switch_timer_flag_enum_t = switch_timer_flag_enum_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_timer_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_timer_flag_t = u32;
impl switch_media_bug_flag_enum_t {
    pub const SMBF_BOTH: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(0);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_STREAM: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(1);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_WRITE_STREAM: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(2);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_WRITE_REPLACE: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(4);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_REPLACE: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(8);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_PING: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(16);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_STEREO: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(32);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_ANSWER_REQ: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(64);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_BRIDGE_REQ: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(128);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_THREAD_LOCK: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(256);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_PRUNE: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(512);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_NO_PAUSE: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(1024);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_STEREO_SWAP: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(2048);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_LOCK: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(4096);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_TAP_NATIVE_READ: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(8192);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_TAP_NATIVE_WRITE: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(16384);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_ONE_ONLY: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(32768);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_MASK: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(65536);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_VIDEO_PING: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(131072);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_WRITE_VIDEO_PING: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(262144);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_VIDEO_STREAM: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(524288);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_WRITE_VIDEO_STREAM: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(1048576);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_VIDEO_PATCH: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(2097152);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_SPY_VIDEO_STREAM: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(4194304);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_SPY_VIDEO_STREAM_BLEG: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(8388608);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_VIDEO_PATCH: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(16777216);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_READ_TEXT_STREAM: switch_media_bug_flag_enum_t =
        switch_media_bug_flag_enum_t(33554432);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_FIRST: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(67108864);
}
impl switch_media_bug_flag_enum_t {
    pub const SMBF_PAUSE: switch_media_bug_flag_enum_t = switch_media_bug_flag_enum_t(134217728);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_media_bug_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_media_bug_flag_t = u32;
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_FLAG_READ: switch_file_flag_enum_t = switch_file_flag_enum_t(1);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_FLAG_WRITE: switch_file_flag_enum_t = switch_file_flag_enum_t(2);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_FLAG_FREE_POOL: switch_file_flag_enum_t = switch_file_flag_enum_t(4);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DATA_SHORT: switch_file_flag_enum_t = switch_file_flag_enum_t(8);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DATA_INT: switch_file_flag_enum_t = switch_file_flag_enum_t(16);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DATA_FLOAT: switch_file_flag_enum_t = switch_file_flag_enum_t(32);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DATA_DOUBLE: switch_file_flag_enum_t = switch_file_flag_enum_t(64);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DATA_RAW: switch_file_flag_enum_t = switch_file_flag_enum_t(128);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_PAUSE: switch_file_flag_enum_t = switch_file_flag_enum_t(256);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_NATIVE: switch_file_flag_enum_t = switch_file_flag_enum_t(512);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_SEEK: switch_file_flag_enum_t = switch_file_flag_enum_t(1024);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_OPEN: switch_file_flag_enum_t = switch_file_flag_enum_t(2048);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_CALLBACK: switch_file_flag_enum_t = switch_file_flag_enum_t(4096);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_DONE: switch_file_flag_enum_t = switch_file_flag_enum_t(8192);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_BUFFER_DONE: switch_file_flag_enum_t = switch_file_flag_enum_t(16384);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_WRITE_APPEND: switch_file_flag_enum_t = switch_file_flag_enum_t(32768);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_WRITE_OVER: switch_file_flag_enum_t = switch_file_flag_enum_t(65536);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_NOMUX: switch_file_flag_enum_t = switch_file_flag_enum_t(131072);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_BREAK_ON_CHANGE: switch_file_flag_enum_t =
        switch_file_flag_enum_t(262144);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_FLAG_VIDEO: switch_file_flag_enum_t = switch_file_flag_enum_t(524288);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_FLAG_VIDEO_EOF: switch_file_flag_enum_t =
        switch_file_flag_enum_t(1048576);
}
impl switch_file_flag_enum_t {
    pub const SWITCH_FILE_PRE_CLOSED: switch_file_flag_enum_t = switch_file_flag_enum_t(2097152);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_file_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_file_flag_t = u32;
impl switch_io_flag_enum_t {
    pub const SWITCH_IO_FLAG_NONE: switch_io_flag_enum_t = switch_io_flag_enum_t(0);
}
impl switch_io_flag_enum_t {
    pub const SWITCH_IO_FLAG_NOBLOCK: switch_io_flag_enum_t = switch_io_flag_enum_t(1);
}
impl switch_io_flag_enum_t {
    pub const SWITCH_IO_FLAG_SINGLE_READ: switch_io_flag_enum_t = switch_io_flag_enum_t(2);
}
impl switch_io_flag_enum_t {
    pub const SWITCH_IO_FLAG_FORCE: switch_io_flag_enum_t = switch_io_flag_enum_t(4);
}
impl switch_io_flag_enum_t {
    pub const SWITCH_IO_FLAG_QUEUED: switch_io_flag_enum_t = switch_io_flag_enum_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_io_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_io_flag_t = u32;
impl switch_event_types_t {
    pub const SWITCH_EVENT_CUSTOM: switch_event_types_t = switch_event_types_t(0);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CLONE: switch_event_types_t = switch_event_types_t(1);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_CREATE: switch_event_types_t = switch_event_types_t(2);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_DESTROY: switch_event_types_t = switch_event_types_t(3);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_STATE: switch_event_types_t = switch_event_types_t(4);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_CALLSTATE: switch_event_types_t = switch_event_types_t(5);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_ANSWER: switch_event_types_t = switch_event_types_t(6);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_HANGUP: switch_event_types_t = switch_event_types_t(7);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_HANGUP_COMPLETE: switch_event_types_t = switch_event_types_t(8);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_EXECUTE: switch_event_types_t = switch_event_types_t(9);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_EXECUTE_COMPLETE: switch_event_types_t =
        switch_event_types_t(10);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_HOLD: switch_event_types_t = switch_event_types_t(11);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_UNHOLD: switch_event_types_t = switch_event_types_t(12);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_BRIDGE: switch_event_types_t = switch_event_types_t(13);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_UNBRIDGE: switch_event_types_t = switch_event_types_t(14);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_PROGRESS: switch_event_types_t = switch_event_types_t(15);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_PROGRESS_MEDIA: switch_event_types_t = switch_event_types_t(16);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_OUTGOING: switch_event_types_t = switch_event_types_t(17);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_PARK: switch_event_types_t = switch_event_types_t(18);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_UNPARK: switch_event_types_t = switch_event_types_t(19);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_APPLICATION: switch_event_types_t = switch_event_types_t(20);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_ORIGINATE: switch_event_types_t = switch_event_types_t(21);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_UUID: switch_event_types_t = switch_event_types_t(22);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_API: switch_event_types_t = switch_event_types_t(23);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_LOG: switch_event_types_t = switch_event_types_t(24);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_INBOUND_CHAN: switch_event_types_t = switch_event_types_t(25);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_OUTBOUND_CHAN: switch_event_types_t = switch_event_types_t(26);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_STARTUP: switch_event_types_t = switch_event_types_t(27);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SHUTDOWN: switch_event_types_t = switch_event_types_t(28);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PUBLISH: switch_event_types_t = switch_event_types_t(29);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_UNPUBLISH: switch_event_types_t = switch_event_types_t(30);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_TALK: switch_event_types_t = switch_event_types_t(31);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_NOTALK: switch_event_types_t = switch_event_types_t(32);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SESSION_CRASH: switch_event_types_t = switch_event_types_t(33);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MODULE_LOAD: switch_event_types_t = switch_event_types_t(34);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MODULE_UNLOAD: switch_event_types_t = switch_event_types_t(35);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_DTMF: switch_event_types_t = switch_event_types_t(36);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MESSAGE: switch_event_types_t = switch_event_types_t(37);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PRESENCE_IN: switch_event_types_t = switch_event_types_t(38);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_NOTIFY_IN: switch_event_types_t = switch_event_types_t(39);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PRESENCE_OUT: switch_event_types_t = switch_event_types_t(40);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PRESENCE_PROBE: switch_event_types_t = switch_event_types_t(41);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MESSAGE_WAITING: switch_event_types_t = switch_event_types_t(42);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MESSAGE_QUERY: switch_event_types_t = switch_event_types_t(43);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_ROSTER: switch_event_types_t = switch_event_types_t(44);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CODEC: switch_event_types_t = switch_event_types_t(45);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_BACKGROUND_JOB: switch_event_types_t = switch_event_types_t(46);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_DETECTED_SPEECH: switch_event_types_t = switch_event_types_t(47);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_DETECTED_TONE: switch_event_types_t = switch_event_types_t(48);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PRIVATE_COMMAND: switch_event_types_t = switch_event_types_t(49);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_HEARTBEAT: switch_event_types_t = switch_event_types_t(50);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_TRAP: switch_event_types_t = switch_event_types_t(51);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_ADD_SCHEDULE: switch_event_types_t = switch_event_types_t(52);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_DEL_SCHEDULE: switch_event_types_t = switch_event_types_t(53);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_EXE_SCHEDULE: switch_event_types_t = switch_event_types_t(54);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RE_SCHEDULE: switch_event_types_t = switch_event_types_t(55);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RELOADXML: switch_event_types_t = switch_event_types_t(56);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_NOTIFY: switch_event_types_t = switch_event_types_t(57);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PHONE_FEATURE: switch_event_types_t = switch_event_types_t(58);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PHONE_FEATURE_SUBSCRIBE: switch_event_types_t = switch_event_types_t(59);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SEND_MESSAGE: switch_event_types_t = switch_event_types_t(60);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RECV_MESSAGE: switch_event_types_t = switch_event_types_t(61);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_REQUEST_PARAMS: switch_event_types_t = switch_event_types_t(62);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CHANNEL_DATA: switch_event_types_t = switch_event_types_t(63);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_GENERAL: switch_event_types_t = switch_event_types_t(64);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_COMMAND: switch_event_types_t = switch_event_types_t(65);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SESSION_HEARTBEAT: switch_event_types_t = switch_event_types_t(66);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CLIENT_DISCONNECTED: switch_event_types_t = switch_event_types_t(67);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SERVER_DISCONNECTED: switch_event_types_t = switch_event_types_t(68);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SEND_INFO: switch_event_types_t = switch_event_types_t(69);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RECV_INFO: switch_event_types_t = switch_event_types_t(70);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RECV_RTCP_MESSAGE: switch_event_types_t = switch_event_types_t(71);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SEND_RTCP_MESSAGE: switch_event_types_t = switch_event_types_t(72);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CALL_SECURE: switch_event_types_t = switch_event_types_t(73);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_NAT: switch_event_types_t = switch_event_types_t(74);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RECORD_START: switch_event_types_t = switch_event_types_t(75);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_RECORD_STOP: switch_event_types_t = switch_event_types_t(76);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PLAYBACK_START: switch_event_types_t = switch_event_types_t(77);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_PLAYBACK_STOP: switch_event_types_t = switch_event_types_t(78);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CALL_UPDATE: switch_event_types_t = switch_event_types_t(79);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_FAILURE: switch_event_types_t = switch_event_types_t(80);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SOCKET_DATA: switch_event_types_t = switch_event_types_t(81);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MEDIA_BUG_START: switch_event_types_t = switch_event_types_t(82);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_MEDIA_BUG_STOP: switch_event_types_t = switch_event_types_t(83);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CONFERENCE_DATA_QUERY: switch_event_types_t = switch_event_types_t(84);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CONFERENCE_DATA: switch_event_types_t = switch_event_types_t(85);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CALL_SETUP_REQ: switch_event_types_t = switch_event_types_t(86);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CALL_SETUP_RESULT: switch_event_types_t = switch_event_types_t(87);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_CALL_DETAIL: switch_event_types_t = switch_event_types_t(88);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_DEVICE_STATE: switch_event_types_t = switch_event_types_t(89);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_TEXT: switch_event_types_t = switch_event_types_t(90);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_SHUTDOWN_REQUESTED: switch_event_types_t = switch_event_types_t(91);
}
impl switch_event_types_t {
    pub const SWITCH_EVENT_ALL: switch_event_types_t = switch_event_types_t(92);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_event_types_t(pub ::std::os::raw::c_uint);
impl switch_input_type_t {
    pub const SWITCH_INPUT_TYPE_DTMF: switch_input_type_t = switch_input_type_t(0);
}
impl switch_input_type_t {
    pub const SWITCH_INPUT_TYPE_EVENT: switch_input_type_t = switch_input_type_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_input_type_t(pub ::std::os::raw::c_uint);
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NONE: switch_call_cause_t = switch_call_cause_t(0);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_UNALLOCATED_NUMBER: switch_call_cause_t = switch_call_cause_t(1);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_ROUTE_TRANSIT_NET: switch_call_cause_t = switch_call_cause_t(2);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_ROUTE_DESTINATION: switch_call_cause_t = switch_call_cause_t(3);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_CHANNEL_UNACCEPTABLE: switch_call_cause_t = switch_call_cause_t(6);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_CALL_AWARDED_DELIVERED: switch_call_cause_t = switch_call_cause_t(7);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NORMAL_CLEARING: switch_call_cause_t = switch_call_cause_t(16);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_USER_BUSY: switch_call_cause_t = switch_call_cause_t(17);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_USER_RESPONSE: switch_call_cause_t = switch_call_cause_t(18);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_ANSWER: switch_call_cause_t = switch_call_cause_t(19);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SUBSCRIBER_ABSENT: switch_call_cause_t = switch_call_cause_t(20);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_CALL_REJECTED: switch_call_cause_t = switch_call_cause_t(21);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NUMBER_CHANGED: switch_call_cause_t = switch_call_cause_t(22);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_REDIRECTION_TO_NEW_DESTINATION: switch_call_cause_t =
        switch_call_cause_t(23);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_EXCHANGE_ROUTING_ERROR: switch_call_cause_t = switch_call_cause_t(25);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_DESTINATION_OUT_OF_ORDER: switch_call_cause_t = switch_call_cause_t(27);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_NUMBER_FORMAT: switch_call_cause_t = switch_call_cause_t(28);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_FACILITY_REJECTED: switch_call_cause_t = switch_call_cause_t(29);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_RESPONSE_TO_STATUS_ENQUIRY: switch_call_cause_t =
        switch_call_cause_t(30);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NORMAL_UNSPECIFIED: switch_call_cause_t = switch_call_cause_t(31);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NORMAL_CIRCUIT_CONGESTION: switch_call_cause_t = switch_call_cause_t(34);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NETWORK_OUT_OF_ORDER: switch_call_cause_t = switch_call_cause_t(38);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NORMAL_TEMPORARY_FAILURE: switch_call_cause_t = switch_call_cause_t(41);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SWITCH_CONGESTION: switch_call_cause_t = switch_call_cause_t(42);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_ACCESS_INFO_DISCARDED: switch_call_cause_t = switch_call_cause_t(43);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_REQUESTED_CHAN_UNAVAIL: switch_call_cause_t = switch_call_cause_t(44);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_PRE_EMPTED: switch_call_cause_t = switch_call_cause_t(45);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_FACILITY_NOT_SUBSCRIBED: switch_call_cause_t = switch_call_cause_t(50);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_OUTGOING_CALL_BARRED: switch_call_cause_t = switch_call_cause_t(52);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INCOMING_CALL_BARRED: switch_call_cause_t = switch_call_cause_t(54);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BEARERCAPABILITY_NOTAUTH: switch_call_cause_t = switch_call_cause_t(57);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BEARERCAPABILITY_NOTAVAIL: switch_call_cause_t = switch_call_cause_t(58);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SERVICE_UNAVAILABLE: switch_call_cause_t = switch_call_cause_t(63);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BEARERCAPABILITY_NOTIMPL: switch_call_cause_t = switch_call_cause_t(65);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_CHAN_NOT_IMPLEMENTED: switch_call_cause_t = switch_call_cause_t(66);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_FACILITY_NOT_IMPLEMENTED: switch_call_cause_t = switch_call_cause_t(69);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SERVICE_NOT_IMPLEMENTED: switch_call_cause_t = switch_call_cause_t(79);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_CALL_REFERENCE: switch_call_cause_t = switch_call_cause_t(81);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INCOMPATIBLE_DESTINATION: switch_call_cause_t = switch_call_cause_t(88);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_MSG_UNSPECIFIED: switch_call_cause_t = switch_call_cause_t(95);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_MANDATORY_IE_MISSING: switch_call_cause_t = switch_call_cause_t(96);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_MESSAGE_TYPE_NONEXIST: switch_call_cause_t = switch_call_cause_t(97);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_WRONG_MESSAGE: switch_call_cause_t = switch_call_cause_t(98);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_IE_NONEXIST: switch_call_cause_t = switch_call_cause_t(99);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_IE_CONTENTS: switch_call_cause_t = switch_call_cause_t(100);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_WRONG_CALL_STATE: switch_call_cause_t = switch_call_cause_t(101);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_RECOVERY_ON_TIMER_EXPIRE: switch_call_cause_t = switch_call_cause_t(102);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_MANDATORY_IE_LENGTH_ERROR: switch_call_cause_t =
        switch_call_cause_t(103);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_PROTOCOL_ERROR: switch_call_cause_t = switch_call_cause_t(111);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INTERWORKING: switch_call_cause_t = switch_call_cause_t(127);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SUCCESS: switch_call_cause_t = switch_call_cause_t(142);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_ORIGINATOR_CANCEL: switch_call_cause_t = switch_call_cause_t(487);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_CRASH: switch_call_cause_t = switch_call_cause_t(700);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SYSTEM_SHUTDOWN: switch_call_cause_t = switch_call_cause_t(701);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_LOSE_RACE: switch_call_cause_t = switch_call_cause_t(702);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_MANAGER_REQUEST: switch_call_cause_t = switch_call_cause_t(703);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BLIND_TRANSFER: switch_call_cause_t = switch_call_cause_t(800);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_ATTENDED_TRANSFER: switch_call_cause_t = switch_call_cause_t(801);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_ALLOTTED_TIMEOUT: switch_call_cause_t = switch_call_cause_t(802);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_USER_CHALLENGE: switch_call_cause_t = switch_call_cause_t(803);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_MEDIA_TIMEOUT: switch_call_cause_t = switch_call_cause_t(804);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_PICKED_OFF: switch_call_cause_t = switch_call_cause_t(805);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_USER_NOT_REGISTERED: switch_call_cause_t = switch_call_cause_t(806);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_PROGRESS_TIMEOUT: switch_call_cause_t = switch_call_cause_t(807);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_GATEWAY: switch_call_cause_t = switch_call_cause_t(808);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_GATEWAY_DOWN: switch_call_cause_t = switch_call_cause_t(809);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_URL: switch_call_cause_t = switch_call_cause_t(810);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_PROFILE: switch_call_cause_t = switch_call_cause_t(811);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_PICKUP: switch_call_cause_t = switch_call_cause_t(812);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_SRTP_READ_ERROR: switch_call_cause_t = switch_call_cause_t(813);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BOWOUT: switch_call_cause_t = switch_call_cause_t(814);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BUSY_EVERYWHERE: switch_call_cause_t = switch_call_cause_t(815);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_DECLINE: switch_call_cause_t = switch_call_cause_t(816);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_DOES_NOT_EXIST_ANYWHERE: switch_call_cause_t = switch_call_cause_t(817);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NOT_ACCEPTABLE: switch_call_cause_t = switch_call_cause_t(818);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_UNWANTED: switch_call_cause_t = switch_call_cause_t(819);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_NO_IDENTITY: switch_call_cause_t = switch_call_cause_t(820);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_BAD_IDENTITY_INFO: switch_call_cause_t = switch_call_cause_t(821);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_UNSUPPORTED_CERTIFICATE: switch_call_cause_t = switch_call_cause_t(822);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_INVALID_IDENTITY: switch_call_cause_t = switch_call_cause_t(823);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_STALE_DATE: switch_call_cause_t = switch_call_cause_t(824);
}
impl switch_call_cause_t {
    pub const SWITCH_CAUSE_REJECT_ALL: switch_call_cause_t = switch_call_cause_t(825);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_call_cause_t(pub ::std::os::raw::c_uint);
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_INBOUND: switch_session_ctl_t = switch_session_ctl_t(0);
}
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_OUTBOUND: switch_session_ctl_t = switch_session_ctl_t(1);
}
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_ALL: switch_session_ctl_t = switch_session_ctl_t(2);
}
impl switch_session_ctl_t {
    pub const SCSC_HUPALL: switch_session_ctl_t = switch_session_ctl_t(3);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN: switch_session_ctl_t = switch_session_ctl_t(4);
}
impl switch_session_ctl_t {
    pub const SCSC_CHECK_RUNNING: switch_session_ctl_t = switch_session_ctl_t(5);
}
impl switch_session_ctl_t {
    pub const SCSC_LOGLEVEL: switch_session_ctl_t = switch_session_ctl_t(6);
}
impl switch_session_ctl_t {
    pub const SCSC_SPS: switch_session_ctl_t = switch_session_ctl_t(7);
}
impl switch_session_ctl_t {
    pub const SCSC_LAST_SPS: switch_session_ctl_t = switch_session_ctl_t(8);
}
impl switch_session_ctl_t {
    pub const SCSC_RECLAIM: switch_session_ctl_t = switch_session_ctl_t(9);
}
impl switch_session_ctl_t {
    pub const SCSC_MAX_SESSIONS: switch_session_ctl_t = switch_session_ctl_t(10);
}
impl switch_session_ctl_t {
    pub const SCSC_SYNC_CLOCK: switch_session_ctl_t = switch_session_ctl_t(11);
}
impl switch_session_ctl_t {
    pub const SCSC_MAX_DTMF_DURATION: switch_session_ctl_t = switch_session_ctl_t(12);
}
impl switch_session_ctl_t {
    pub const SCSC_MIN_DTMF_DURATION: switch_session_ctl_t = switch_session_ctl_t(13);
}
impl switch_session_ctl_t {
    pub const SCSC_DEFAULT_DTMF_DURATION: switch_session_ctl_t = switch_session_ctl_t(14);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN_ELEGANT: switch_session_ctl_t = switch_session_ctl_t(15);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN_ASAP: switch_session_ctl_t = switch_session_ctl_t(16);
}
impl switch_session_ctl_t {
    pub const SCSC_CANCEL_SHUTDOWN: switch_session_ctl_t = switch_session_ctl_t(17);
}
impl switch_session_ctl_t {
    pub const SCSC_SEND_SIGHUP: switch_session_ctl_t = switch_session_ctl_t(18);
}
impl switch_session_ctl_t {
    pub const SCSC_DEBUG_LEVEL: switch_session_ctl_t = switch_session_ctl_t(19);
}
impl switch_session_ctl_t {
    pub const SCSC_FLUSH_DB_HANDLES: switch_session_ctl_t = switch_session_ctl_t(20);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN_NOW: switch_session_ctl_t = switch_session_ctl_t(21);
}
impl switch_session_ctl_t {
    pub const SCSC_REINCARNATE_NOW: switch_session_ctl_t = switch_session_ctl_t(22);
}
impl switch_session_ctl_t {
    pub const SCSC_CALIBRATE_CLOCK: switch_session_ctl_t = switch_session_ctl_t(23);
}
impl switch_session_ctl_t {
    pub const SCSC_SAVE_HISTORY: switch_session_ctl_t = switch_session_ctl_t(24);
}
impl switch_session_ctl_t {
    pub const SCSC_CRASH: switch_session_ctl_t = switch_session_ctl_t(25);
}
impl switch_session_ctl_t {
    pub const SCSC_MIN_IDLE_CPU: switch_session_ctl_t = switch_session_ctl_t(26);
}
impl switch_session_ctl_t {
    pub const SCSC_VERBOSE_EVENTS: switch_session_ctl_t = switch_session_ctl_t(27);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN_CHECK: switch_session_ctl_t = switch_session_ctl_t(28);
}
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_INBOUND_CHECK: switch_session_ctl_t = switch_session_ctl_t(29);
}
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_OUTBOUND_CHECK: switch_session_ctl_t = switch_session_ctl_t(30);
}
impl switch_session_ctl_t {
    pub const SCSC_PAUSE_CHECK: switch_session_ctl_t = switch_session_ctl_t(31);
}
impl switch_session_ctl_t {
    pub const SCSC_READY_CHECK: switch_session_ctl_t = switch_session_ctl_t(32);
}
impl switch_session_ctl_t {
    pub const SCSC_THREADED_SYSTEM_EXEC: switch_session_ctl_t = switch_session_ctl_t(33);
}
impl switch_session_ctl_t {
    pub const SCSC_SYNC_CLOCK_WHEN_IDLE: switch_session_ctl_t = switch_session_ctl_t(34);
}
impl switch_session_ctl_t {
    pub const SCSC_DEBUG_SQL: switch_session_ctl_t = switch_session_ctl_t(35);
}
impl switch_session_ctl_t {
    pub const SCSC_SQL: switch_session_ctl_t = switch_session_ctl_t(36);
}
impl switch_session_ctl_t {
    pub const SCSC_API_EXPANSION: switch_session_ctl_t = switch_session_ctl_t(37);
}
impl switch_session_ctl_t {
    pub const SCSC_RECOVER: switch_session_ctl_t = switch_session_ctl_t(38);
}
impl switch_session_ctl_t {
    pub const SCSC_SPS_PEAK: switch_session_ctl_t = switch_session_ctl_t(39);
}
impl switch_session_ctl_t {
    pub const SCSC_SPS_PEAK_FIVEMIN: switch_session_ctl_t = switch_session_ctl_t(40);
}
impl switch_session_ctl_t {
    pub const SCSC_SESSIONS_PEAK: switch_session_ctl_t = switch_session_ctl_t(41);
}
impl switch_session_ctl_t {
    pub const SCSC_SESSIONS_PEAK_FIVEMIN: switch_session_ctl_t = switch_session_ctl_t(42);
}
impl switch_session_ctl_t {
    pub const SCSC_MDNS_RESOLVE: switch_session_ctl_t = switch_session_ctl_t(43);
}
impl switch_session_ctl_t {
    pub const SCSC_SHUTDOWN_CAUSE: switch_session_ctl_t = switch_session_ctl_t(44);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_session_ctl_t(pub ::std::os::raw::c_uint);
impl switch_state_handler_flag_t {
    pub const SSH_FLAG_STICKY: switch_state_handler_flag_t = switch_state_handler_flag_t(1);
}
impl switch_state_handler_flag_t {
    pub const SSH_FLAG_PRE_EXEC: switch_state_handler_flag_t = switch_state_handler_flag_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_state_handler_flag_t(pub ::std::os::raw::c_uint);
pub type switch_os_socket_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_pool_t {
    _unused: [u8; 0],
}
pub type switch_memory_pool_t = fspr_pool_t;
pub type switch_plc_state_t = *mut ::std::os::raw::c_void;
pub type switch_port_t = u16;
pub type switch_payload_t = u8;
pub type switch_app_log_t = switch_app_log;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp {
    _unused: [u8; 0],
}
pub type switch_rtp_t = switch_rtp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp {
    _unused: [u8; 0],
}
pub type switch_rtcp_t = switch_rtcp;
pub type switch_core_session_message_t = switch_core_session_message;
pub type switch_event_header_t = switch_event_header;
pub type switch_event_t = switch_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_event_subclass {
    _unused: [u8; 0],
}
pub type switch_event_subclass_t = switch_event_subclass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_event_node {
    _unused: [u8; 0],
}
pub type switch_event_node_t = switch_event_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_loadable_module {
    _unused: [u8; 0],
}
pub type switch_loadable_module_t = switch_loadable_module;
pub type switch_frame_t = switch_frame;
pub type switch_rtcp_frame_t = switch_rtcp_frame;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_channel {
    _unused: [u8; 0],
}
pub type switch_channel_t = switch_channel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_sql_queue_manager {
    _unused: [u8; 0],
}
pub type switch_sql_queue_manager_t = switch_sql_queue_manager;
pub type switch_file_handle_t = switch_file_handle;
pub type switch_caller_profile_t = switch_caller_profile;
pub type switch_caller_extension_t = switch_caller_extension;
pub type switch_caller_application_t = switch_caller_application;
pub type switch_state_handler_table_t = switch_state_handler_table;
pub type switch_timer_t = switch_timer;
pub type switch_codec_t = switch_codec;
pub type switch_core_thread_session_t = switch_core_thread_session;
pub type switch_codec_implementation_t = switch_codec_implementation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_buffer {
    _unused: [u8; 0],
}
pub type switch_buffer_t = switch_buffer;
pub type switch_codec_settings_t = switch_codec_settings;
pub type switch_codec_fmtp_t = switch_codec_fmtp;
pub type switch_coredb_handle_t = switch_coredb_handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_odbc_handle {
    _unused: [u8; 0],
}
pub type switch_odbc_handle_t = switch_odbc_handle;
pub type switch_database_interface_handle_t = switch_database_interface_handle;
pub type switch_io_routines_t = switch_io_routines;
pub type switch_speech_handle_t = switch_speech_handle;
pub type switch_asr_handle_t = switch_asr_handle;
pub type switch_directory_handle_t = switch_directory_handle;
pub type switch_loadable_module_interface_t = switch_loadable_module_interface;
pub type switch_endpoint_interface_t = switch_endpoint_interface;
pub type switch_timer_interface_t = switch_timer_interface;
pub type switch_dialplan_interface_t = switch_dialplan_interface;
pub type switch_codec_interface_t = switch_codec_interface;
pub type switch_application_interface_t = switch_application_interface;
pub type switch_chat_application_interface_t = switch_chat_application_interface;
pub type switch_api_interface_t = switch_api_interface;
pub type switch_json_api_interface_t = switch_json_api_interface;
pub type switch_file_interface_t = switch_file_interface;
pub type switch_speech_interface_t = switch_speech_interface;
pub type switch_asr_interface_t = switch_asr_interface;
pub type switch_directory_interface_t = switch_directory_interface;
pub type switch_chat_interface_t = switch_chat_interface;
pub type switch_management_interface_t = switch_management_interface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_port_allocator {
    _unused: [u8; 0],
}
pub type switch_core_port_allocator_t = switch_core_port_allocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_media_bug {
    _unused: [u8; 0],
}
pub type switch_media_bug_t = switch_media_bug;
pub type switch_limit_interface_t = switch_limit_interface;
pub type switch_database_interface_t = switch_database_interface;
pub type hashtable_destructor_t =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_console_callback_match_node {
    pub val: *mut ::std::os::raw::c_char,
    pub next: *mut switch_console_callback_match_node,
}
pub type switch_console_callback_match_node_t = switch_console_callback_match_node;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_console_callback_match {
    pub head: *mut switch_console_callback_match_node,
    pub end: *mut switch_console_callback_match_node,
    pub count: ::std::os::raw::c_int,
    pub dynamic: ::std::os::raw::c_int,
}
pub type switch_console_callback_match_t = switch_console_callback_match;
pub type switch_media_bug_exec_cb_t = ::std::option::Option<
    unsafe extern "C" fn(bug: *mut switch_media_bug_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type switch_core_video_thread_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t,
>;
pub type switch_core_text_thread_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t,
>;
pub type switch_cap_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type switch_console_complete_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        matches: *mut *mut switch_console_callback_match_t,
    ) -> switch_status_t,
>;
pub type switch_media_bug_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_media_bug_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: switch_abc_type_t,
    ) -> switch_bool_t,
>;
pub type switch_tone_detect_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> switch_bool_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_binding {
    _unused: [u8; 0],
}
pub type switch_xml_binding_t = switch_xml_binding;
pub type switch_engine_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type switch_core_codec_encode_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        codec: *mut switch_codec_t,
        other_codec: *mut switch_codec_t,
        decoded_data: *mut ::std::os::raw::c_void,
        decoded_data_len: u32,
        decoded_rate: u32,
        encoded_data: *mut ::std::os::raw::c_void,
        encoded_data_len: *mut u32,
        encoded_rate: *mut u32,
        flag: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t,
>;
pub type switch_core_codec_decode_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        codec: *mut switch_codec_t,
        other_codec: *mut switch_codec_t,
        encoded_data: *mut ::std::os::raw::c_void,
        encoded_data_len: u32,
        encoded_rate: u32,
        decoded_data: *mut ::std::os::raw::c_void,
        decoded_data_len: *mut u32,
        decoded_rate: *mut u32,
        flag: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t,
>;
pub type switch_core_codec_video_encode_func_t = ::std::option::Option<
    unsafe extern "C" fn(codec: *mut switch_codec_t, frame: *mut switch_frame_t) -> switch_status_t,
>;
pub type switch_core_codec_video_decode_func_t = ::std::option::Option<
    unsafe extern "C" fn(codec: *mut switch_codec_t, frame: *mut switch_frame_t) -> switch_status_t,
>;
impl switch_codec_control_command_t {
    pub const SCC_VIDEO_GEN_KEYFRAME: switch_codec_control_command_t =
        switch_codec_control_command_t(0);
}
impl switch_codec_control_command_t {
    pub const SCC_VIDEO_BANDWIDTH: switch_codec_control_command_t =
        switch_codec_control_command_t(1);
}
impl switch_codec_control_command_t {
    pub const SCC_VIDEO_RESET: switch_codec_control_command_t = switch_codec_control_command_t(2);
}
impl switch_codec_control_command_t {
    pub const SCC_AUDIO_PACKET_LOSS: switch_codec_control_command_t =
        switch_codec_control_command_t(3);
}
impl switch_codec_control_command_t {
    pub const SCC_AUDIO_ADJUST_BITRATE: switch_codec_control_command_t =
        switch_codec_control_command_t(4);
}
impl switch_codec_control_command_t {
    pub const SCC_AUDIO_VAD: switch_codec_control_command_t = switch_codec_control_command_t(5);
}
impl switch_codec_control_command_t {
    pub const SCC_DEBUG: switch_codec_control_command_t = switch_codec_control_command_t(6);
}
impl switch_codec_control_command_t {
    pub const SCC_CODEC_SPECIFIC: switch_codec_control_command_t =
        switch_codec_control_command_t(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_codec_control_command_t(pub ::std::os::raw::c_uint);
impl switch_codec_control_type_t {
    pub const SCCT_NONE: switch_codec_control_type_t = switch_codec_control_type_t(0);
}
impl switch_codec_control_type_t {
    pub const SCCT_STRING: switch_codec_control_type_t = switch_codec_control_type_t(1);
}
impl switch_codec_control_type_t {
    pub const SCCT_INT: switch_codec_control_type_t = switch_codec_control_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_codec_control_type_t(pub ::std::os::raw::c_uint);
impl switch_io_type_t {
    pub const SWITCH_IO_READ: switch_io_type_t = switch_io_type_t(0);
}
impl switch_io_type_t {
    pub const SWITCH_IO_WRITE: switch_io_type_t = switch_io_type_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_io_type_t(pub ::std::os::raw::c_uint);
pub type switch_core_codec_control_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        codec: *mut switch_codec_t,
        cmd: switch_codec_control_command_t,
        ctype: switch_codec_control_type_t,
        cmd_data: *mut ::std::os::raw::c_void,
        atype: switch_codec_control_type_t,
        cmd_arg: *mut ::std::os::raw::c_void,
        rtype: *mut switch_codec_control_type_t,
        ret_data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t,
>;
pub type switch_core_codec_init_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_codec_t,
        arg2: switch_codec_flag_t,
        codec_settings: *const switch_codec_settings_t,
    ) -> switch_status_t,
>;
pub type switch_core_codec_fmtp_parse_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        fmtp: *const ::std::os::raw::c_char,
        codec_fmtp: *mut switch_codec_fmtp_t,
    ) -> switch_status_t,
>;
pub type switch_core_codec_destroy_func_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_codec_t) -> switch_status_t>;
pub type switch_chat_application_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_event_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> switch_status_t,
>;
pub type switch_application_function_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t, arg2: *const ::std::os::raw::c_char),
>;
pub type switch_core_recover_callback_t = ::std::option::Option<
    unsafe extern "C" fn(session: *mut switch_core_session_t) -> ::std::os::raw::c_int,
>;
pub type switch_event_callback_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_event_t)>;
pub type switch_dialplan_hunt_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut switch_caller_profile_t,
    ) -> *mut switch_caller_extension_t,
>;
pub type switch_hash_delete_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        key: *const ::std::os::raw::c_void,
        val: *const ::std::os::raw::c_void,
        pData: *mut ::std::os::raw::c_void,
    ) -> switch_bool_t,
>;
pub type switch_scheduler_task_t = switch_scheduler_task;
pub type switch_scheduler_func_t =
    ::std::option::Option<unsafe extern "C" fn(task: *mut switch_scheduler_task_t)>;
pub type switch_state_handler_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t) -> switch_status_t,
>;
pub type switch_stream_handle_t = switch_stream_handle;
pub type switch_stream_handle_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut switch_stream_handle_t,
        len: *mut ::std::os::raw::c_int,
    ) -> *mut u8,
>;
pub type switch_stream_handle_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut switch_stream_handle_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t,
>;
pub type switch_stream_handle_raw_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        handle: *mut switch_stream_handle_t,
        data: *mut u8,
        datalen: switch_size_t,
    ) -> switch_status_t,
>;
pub type switch_api_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        cmd: *const ::std::os::raw::c_char,
        session: *mut switch_core_session_t,
        stream: *mut switch_stream_handle_t,
    ) -> switch_status_t,
>;
pub type switch_json_api_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        json: *const cJSON,
        session: *mut switch_core_session_t,
        json_reply: *mut *mut cJSON,
    ) -> switch_status_t,
>;
pub type switch_input_callback_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        input: *mut ::std::os::raw::c_void,
        input_type: switch_input_type_t,
        buf: *mut ::std::os::raw::c_void,
        buflen: ::std::os::raw::c_uint,
    ) -> switch_status_t,
>;
pub type switch_read_frame_callback_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t,
>;
pub type switch_say_interface_t = switch_say_interface;
impl dm_match_type_t {
    pub const DM_MATCH_POSITIVE: dm_match_type_t = dm_match_type_t(0);
}
impl dm_match_type_t {
    pub const DM_MATCH_NEGATIVE: dm_match_type_t = dm_match_type_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct dm_match_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_dmachine {
    _unused: [u8; 0],
}
pub type switch_ivr_dmachine_t = switch_ivr_dmachine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_dmachine_match {
    pub dmachine: *mut switch_ivr_dmachine_t,
    pub match_digits: *const ::std::os::raw::c_char,
    pub match_key: i32,
    pub type_: dm_match_type_t,
    pub user_data: *mut ::std::os::raw::c_void,
}
pub type switch_ivr_dmachine_match_t = switch_ivr_dmachine_match;
pub type switch_ivr_dmachine_callback_t = ::std::option::Option<
    unsafe extern "C" fn(match_: *mut switch_ivr_dmachine_match_t) -> switch_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_input_args_t {
    pub input_callback: switch_input_callback_function_t,
    pub buf: *mut ::std::os::raw::c_void,
    pub buflen: u32,
    pub read_frame_callback: switch_read_frame_callback_function_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub dmachine: *mut switch_ivr_dmachine_t,
    pub loops: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_say_args_t {
    pub type_: switch_say_type_t,
    pub method: switch_say_method_t,
    pub gender: switch_say_gender_t,
    pub ext: *const ::std::os::raw::c_char,
}
pub type switch_say_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        tosay: *mut ::std::os::raw::c_char,
        say_args: *mut switch_say_args_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t,
>;
pub type switch_say_string_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        tosay: *mut ::std::os::raw::c_char,
        say_args: *mut switch_say_args_t,
        rstr: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_say_file_handle {
    _unused: [u8; 0],
}
pub type switch_say_file_handle_t = switch_say_file_handle;
pub type switch_new_say_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        sh: *mut switch_say_file_handle_t,
        tosay: *mut ::std::os::raw::c_char,
        say_args: *mut switch_say_args_t,
    ) -> switch_status_t,
>;
pub type switch_xml_t = *mut switch_xml;
pub type switch_core_time_duration_t = switch_core_time_duration;
pub type switch_xml_open_root_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        reload: u8,
        err: *mut *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_xml_t,
>;
pub type switch_xml_search_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        section: *const ::std::os::raw::c_char,
        tag_name: *const ::std::os::raw::c_char,
        key_name: *const ::std::os::raw::c_char,
        key_value: *const ::std::os::raw::c_char,
        params: *mut switch_event_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_xml_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_hashtable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_hashtable_iterator {
    _unused: [u8; 0],
}
pub type switch_hash_t = switch_hashtable;
pub type switch_inthash_t = switch_hashtable;
pub type switch_hash_index_t = switch_hashtable_iterator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_network_list {
    _unused: [u8; 0],
}
pub type switch_network_list_t = switch_network_list;
pub type switch_module_load_t = ::std::option::Option<
    unsafe extern "C" fn(
        module_interface: *mut *mut switch_loadable_module_interface_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t,
>;
pub type switch_module_runtime_t = ::std::option::Option<unsafe extern "C" fn() -> switch_status_t>;
pub type switch_module_shutdown_t =
    ::std::option::Option<unsafe extern "C" fn() -> switch_status_t>;
impl switch_thread_priority_t {
    pub const SWITCH_PRI_LOW: switch_thread_priority_t = switch_thread_priority_t(1);
}
impl switch_thread_priority_t {
    pub const SWITCH_PRI_NORMAL: switch_thread_priority_t = switch_thread_priority_t(10);
}
impl switch_thread_priority_t {
    pub const SWITCH_PRI_IMPORTANT: switch_thread_priority_t = switch_thread_priority_t(50);
}
impl switch_thread_priority_t {
    pub const SWITCH_PRI_REALTIME: switch_thread_priority_t = switch_thread_priority_t(99);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_thread_priority_t(pub ::std::os::raw::c_uint);
impl switch_module_flag_enum_t {
    pub const SMODF_NONE: switch_module_flag_enum_t = switch_module_flag_enum_t(0);
}
impl switch_module_flag_enum_t {
    pub const SMODF_GLOBAL_SYMBOLS: switch_module_flag_enum_t = switch_module_flag_enum_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_module_flag_enum_t(pub ::std::os::raw::c_uint);
pub type switch_module_flag_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_loadable_module_function_table {
    pub switch_api_version: ::std::os::raw::c_int,
    pub load: switch_module_load_t,
    pub shutdown: switch_module_shutdown_t,
    pub runtime: switch_module_runtime_t,
    pub flags: switch_module_flag_t,
}
pub type switch_loadable_module_function_table_t = switch_loadable_module_function_table;
pub type switch_modulename_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        module_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type switch_slin_data_t = switch_slin_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_digit_stream_parser {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sql_queue_manager {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_media_handle_s {
    _unused: [u8; 0],
}
pub type switch_media_handle_t = switch_media_handle_s;
pub type switch_event_channel_id_t = u32;
pub type switch_event_channel_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        event_channel: *const ::std::os::raw::c_char,
        json: *mut cJSON,
        key: *const ::std::os::raw::c_char,
        id: switch_event_channel_id_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_live_array_s {
    _unused: [u8; 0],
}
pub type switch_live_array_t = switch_live_array_s;
impl switch_sdp_type_t {
    pub const SDP_TYPE_REQUEST: switch_sdp_type_t = switch_sdp_type_t(0);
}
impl switch_sdp_type_t {
    pub const SDP_TYPE_RESPONSE: switch_sdp_type_t = switch_sdp_type_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_sdp_type_t(pub ::std::os::raw::c_uint);
impl switch_rtp_crypto_key_type_t {
    pub const AEAD_AES_256_GCM_8: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(0);
}
impl switch_rtp_crypto_key_type_t {
    pub const AEAD_AES_256_GCM: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(1);
}
impl switch_rtp_crypto_key_type_t {
    pub const AEAD_AES_128_GCM_8: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(2);
}
impl switch_rtp_crypto_key_type_t {
    pub const AEAD_AES_128_GCM: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(3);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_256_HMAC_SHA1_80: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(4);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_192_HMAC_SHA1_80: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(5);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_128_HMAC_SHA1_80: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(6);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_256_HMAC_SHA1_32: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(7);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_192_HMAC_SHA1_32: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(8);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_128_HMAC_SHA1_32: switch_rtp_crypto_key_type_t =
        switch_rtp_crypto_key_type_t(9);
}
impl switch_rtp_crypto_key_type_t {
    pub const AES_CM_128_NULL_AUTH: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(10);
}
impl switch_rtp_crypto_key_type_t {
    pub const CRYPTO_INVALID: switch_rtp_crypto_key_type_t = switch_rtp_crypto_key_type_t(11);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_crypto_key_type_t(pub ::std::os::raw::c_uint);
impl switch_rtp_crypto_key_param_method_type_t {
    pub const CRYPTO_KEY_PARAM_METHOD_INLINE: switch_rtp_crypto_key_param_method_type_t =
        switch_rtp_crypto_key_param_method_type_t(0);
}
impl switch_rtp_crypto_key_param_method_type_t {
    pub const CRYPTO_KEY_PARAM_METHOD_INVALID: switch_rtp_crypto_key_param_method_type_t =
        switch_rtp_crypto_key_param_method_type_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_crypto_key_param_method_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct payload_map_s {
    pub type_: switch_media_type_t,
    pub sdp_type: switch_sdp_type_t,
    pub ptime: u32,
    pub rate: u32,
    pub allocated: u8,
    pub negotiated: u8,
    pub current: u8,
    pub hash: ::std::os::raw::c_ulong,
    pub rm_encoding: *mut ::std::os::raw::c_char,
    pub iananame: *mut ::std::os::raw::c_char,
    pub modname: *mut ::std::os::raw::c_char,
    pub pt: switch_payload_t,
    pub rm_rate: ::std::os::raw::c_ulong,
    pub adv_rm_rate: ::std::os::raw::c_ulong,
    pub codec_ms: u32,
    pub bitrate: u32,
    pub rm_fmtp: *mut ::std::os::raw::c_char,
    pub recv_pt: switch_payload_t,
    pub fmtp_out: *mut ::std::os::raw::c_char,
    pub remote_sdp_ip: *mut ::std::os::raw::c_char,
    pub remote_sdp_port: switch_port_t,
    pub channels: ::std::os::raw::c_int,
    pub adv_channels: ::std::os::raw::c_int,
    pub next: *mut payload_map_s,
}
pub type payload_map_t = payload_map_s;
impl switch_media_flow_t {
    pub const SWITCH_MEDIA_FLOW_SENDRECV: switch_media_flow_t = switch_media_flow_t(0);
}
impl switch_media_flow_t {
    pub const SWITCH_MEDIA_FLOW_SENDONLY: switch_media_flow_t = switch_media_flow_t(1);
}
impl switch_media_flow_t {
    pub const SWITCH_MEDIA_FLOW_RECVONLY: switch_media_flow_t = switch_media_flow_t(2);
}
impl switch_media_flow_t {
    pub const SWITCH_MEDIA_FLOW_INACTIVE: switch_media_flow_t = switch_media_flow_t(3);
}
impl switch_media_flow_t {
    pub const SWITCH_MEDIA_FLOW_DISABLED: switch_media_flow_t = switch_media_flow_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_media_flow_t(pub ::std::os::raw::c_uint);
impl switch_core_media_ice_type_t {
    pub const ICE_GOOGLE_JINGLE: switch_core_media_ice_type_t = switch_core_media_ice_type_t(1);
}
impl switch_core_media_ice_type_t {
    pub const ICE_VANILLA: switch_core_media_ice_type_t = switch_core_media_ice_type_t(2);
}
impl switch_core_media_ice_type_t {
    pub const ICE_CONTROLLED: switch_core_media_ice_type_t = switch_core_media_ice_type_t(4);
}
impl switch_core_media_ice_type_t {
    pub const ICE_LITE: switch_core_media_ice_type_t = switch_core_media_ice_type_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_ice_type_t(pub ::std::os::raw::c_uint);
impl switch_poll_t {
    pub const SWITCH_POLL_READ: switch_poll_t = switch_poll_t(1);
}
impl switch_poll_t {
    pub const SWITCH_POLL_WRITE: switch_poll_t = switch_poll_t(2);
}
impl switch_poll_t {
    pub const SWITCH_POLL_ERROR: switch_poll_t = switch_poll_t(4);
}
impl switch_poll_t {
    pub const SWITCH_POLL_HUP: switch_poll_t = switch_poll_t(8);
}
impl switch_poll_t {
    pub const SWITCH_POLL_RDNORM: switch_poll_t = switch_poll_t(16);
}
impl switch_poll_t {
    pub const SWITCH_POLL_RDBAND: switch_poll_t = switch_poll_t(32);
}
impl switch_poll_t {
    pub const SWITCH_POLL_PRI: switch_poll_t = switch_poll_t(64);
}
impl switch_poll_t {
    pub const SWITCH_POLL_INVALID: switch_poll_t = switch_poll_t(128);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_poll_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_waitlist_s {
    pub sock: switch_os_socket_t,
    pub events: u32,
    pub revents: u32,
}
pub type switch_waitlist_t = switch_waitlist_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_jb_s {
    _unused: [u8; 0],
}
pub type switch_jb_t = switch_jb_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_img_txt_handle_s {
    _unused: [u8; 0],
}
pub type switch_img_txt_handle_t = switch_img_txt_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_frame_buffer_s {
    _unused: [u8; 0],
}
pub type switch_frame_buffer_t = switch_frame_buffer_s;
impl switch_video_read_flag_t {
    pub const SVR_BLOCK: switch_video_read_flag_t = switch_video_read_flag_t(1);
}
impl switch_video_read_flag_t {
    pub const SVR_FLUSH: switch_video_read_flag_t = switch_video_read_flag_t(2);
}
impl switch_video_read_flag_t {
    pub const SVR_CHECK: switch_video_read_flag_t = switch_video_read_flag_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_video_read_flag_t(pub ::std::os::raw::c_uint);
impl switch_vid_spy_fmt_t {
    pub const SPY_LOWER_RIGHT_SMALL: switch_vid_spy_fmt_t = switch_vid_spy_fmt_t(0);
}
impl switch_vid_spy_fmt_t {
    pub const SPY_LOWER_RIGHT_LARGE: switch_vid_spy_fmt_t = switch_vid_spy_fmt_t(1);
}
impl switch_vid_spy_fmt_t {
    pub const SPY_DUAL_CROP: switch_vid_spy_fmt_t = switch_vid_spy_fmt_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_vid_spy_fmt_t(pub ::std::os::raw::c_uint);
impl switch_file_command_t {
    pub const SCFC_FLUSH_AUDIO: switch_file_command_t = switch_file_command_t(0);
}
impl switch_file_command_t {
    pub const SCFC_PAUSE_READ: switch_file_command_t = switch_file_command_t(1);
}
impl switch_file_command_t {
    pub const SCFC_PAUSE_WRITE: switch_file_command_t = switch_file_command_t(2);
}
impl switch_file_command_t {
    pub const SCFC_RESUME_WRITE: switch_file_command_t = switch_file_command_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_file_command_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_text_factory_s {
    _unused: [u8; 0],
}
pub type switch_rtp_text_factory_t = switch_rtp_text_factory_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_agc_s {
    _unused: [u8; 0],
}
pub type switch_agc_t = switch_agc_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_chromakey_s {
    _unused: [u8; 0],
}
pub type switch_chromakey_t = switch_chromakey_s;
impl switch_video_encode_speed_t {
    pub const SWITCH_VIDEO_ENCODE_SPEED_DEFAULT: switch_video_encode_speed_t =
        switch_video_encode_speed_t(0);
}
impl switch_video_encode_speed_t {
    pub const SWITCH_VIDEO_ENCODE_SPEED_FAST: switch_video_encode_speed_t =
        switch_video_encode_speed_t(0);
}
impl switch_video_encode_speed_t {
    pub const SWITCH_VIDEO_ENCODE_SPEED_MEDIUM: switch_video_encode_speed_t =
        switch_video_encode_speed_t(1);
}
impl switch_video_encode_speed_t {
    pub const SWITCH_VIDEO_ENCODE_SPEED_SLOW: switch_video_encode_speed_t =
        switch_video_encode_speed_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_video_encode_speed_t(pub ::std::os::raw::c_uint);
impl switch_video_profile_t {
    pub const SWITCH_VIDEO_PROFILE_BASELINE: switch_video_profile_t = switch_video_profile_t(0);
}
impl switch_video_profile_t {
    pub const SWITCH_VIDEO_PROFILE_MAIN: switch_video_profile_t = switch_video_profile_t(1);
}
impl switch_video_profile_t {
    pub const SWITCH_VIDEO_PROFILE_HIGH: switch_video_profile_t = switch_video_profile_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_video_profile_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_mm_s {
    pub samplerate: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub keyint: ::std::os::raw::c_int,
    pub ab: ::std::os::raw::c_int,
    pub vb: ::std::os::raw::c_int,
    pub vw: ::std::os::raw::c_int,
    pub vh: ::std::os::raw::c_int,
    pub cbr: ::std::os::raw::c_int,
    pub fps: f32,
    pub source_fps: f32,
    pub source_kps: ::std::os::raw::c_int,
    pub vbuf: ::std::os::raw::c_int,
    pub vprofile: switch_video_profile_t,
    pub vencspd: switch_video_encode_speed_t,
    pub try_hardware_encoder: u8,
    pub scale_w: ::std::os::raw::c_int,
    pub scale_h: ::std::os::raw::c_int,
    pub fmt: switch_img_fmt_t,
    pub auth_username: *mut ::std::os::raw::c_char,
    pub auth_password: *mut ::std::os::raw::c_char,
}
pub type switch_mm_t = switch_mm_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_crypto_key_material_s {
    pub method: switch_rtp_crypto_key_param_method_type_t,
    pub raw_key: [::std::os::raw::c_uchar; 64usize],
    pub crypto_key: *mut ::std::os::raw::c_char,
    pub lifetime: u64,
    pub mki_id: ::std::os::raw::c_uint,
    pub mki_size: ::std::os::raw::c_uint,
    pub next: *mut switch_crypto_key_material_s,
}
pub type switch_crypto_key_material_t = switch_crypto_key_material_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secure_settings_s {
    pub crypto_tag: ::std::os::raw::c_int,
    pub local_raw_key: [::std::os::raw::c_uchar; 64usize],
    pub remote_raw_key: [::std::os::raw::c_uchar; 64usize],
    pub crypto_type: switch_rtp_crypto_key_type_t,
    pub local_crypto_key: *mut ::std::os::raw::c_char,
    pub remote_crypto_key: *mut ::std::os::raw::c_char,
    pub local_key_material_next: *mut switch_crypto_key_material_s,
    pub local_key_material_n: ::std::os::raw::c_ulong,
    pub remote_key_material_next: *mut switch_crypto_key_material_s,
    pub remote_key_material_n: ::std::os::raw::c_ulong,
}
pub type switch_secure_settings_t = secure_settings_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dial_handle_s {
    _unused: [u8; 0],
}
pub type switch_dial_handle_t = switch_dial_handle_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dial_leg_s {
    _unused: [u8; 0],
}
pub type switch_dial_leg_t = switch_dial_leg_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dial_leg_list_s {
    _unused: [u8; 0],
}
pub type switch_dial_leg_list_t = switch_dial_leg_list_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dial_handle_list_s {
    _unused: [u8; 0],
}
pub type switch_dial_handle_list_t = switch_dial_handle_list_s;
extern "C" {
    pub fn switch_status_is_timeup(status: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type switch_thread_id_t = pthread_t;
extern "C" {
    pub fn switch_thread_self() -> switch_thread_id_t;
}
extern "C" {
    pub fn switch_thread_equal(
        tid1: switch_thread_id_t,
        tid2: switch_thread_id_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_pool_clear(pool: *mut switch_memory_pool_t);
}
extern "C" {
    pub fn switch_snprintf(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_vasprintf(
        buf: *mut *mut ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_vsnprintf(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        format: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_copy_string(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dst_size: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_hashfunc_default(
        key: *const ::std::os::raw::c_char,
        klen: *mut switch_ssize_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_ci_hashfunc_default(
        char_key: *const ::std::os::raw::c_char,
        klen: *mut switch_ssize_t,
    ) -> ::std::os::raw::c_uint;
}
pub type switch_time_t = i64;
pub type switch_interval_time_t = i64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_time_exp_t {
    pub tm_usec: i32,
    pub tm_sec: i32,
    pub tm_min: i32,
    pub tm_hour: i32,
    pub tm_mday: i32,
    pub tm_mon: i32,
    pub tm_year: i32,
    pub tm_wday: i32,
    pub tm_yday: i32,
    pub tm_isdst: i32,
    pub tm_gmtoff: i32,
}
extern "C" {
    pub fn switch_time_make(sec: switch_time_t, usec: i32) -> switch_time_t;
}
extern "C" {
    pub fn switch_time_now() -> switch_time_t;
}
extern "C" {
    pub fn switch_time_exp_gmt_get(
        result: *mut switch_time_t,
        input: *mut switch_time_exp_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_strftime(
        s: *mut ::std::os::raw::c_char,
        retsize: *mut switch_size_t,
        max: switch_size_t,
        format: *const ::std::os::raw::c_char,
        tm: *mut switch_time_exp_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_strftime_nocheck(
        s: *mut ::std::os::raw::c_char,
        retsize: *mut switch_size_t,
        max: switch_size_t,
        format: *const ::std::os::raw::c_char,
        tm: *mut switch_time_exp_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rfc822_date(
        date_str: *mut ::std::os::raw::c_char,
        t: switch_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_exp_gmt(
        result: *mut switch_time_exp_t,
        input: switch_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_exp_get(
        result: *mut switch_time_t,
        input: *mut switch_time_exp_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_exp_lt(
        result: *mut switch_time_exp_t,
        input: switch_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_exp_tz(
        result: *mut switch_time_exp_t,
        input: switch_time_t,
        offs: switch_int32_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sleep(t: switch_interval_time_t);
}
extern "C" {
    pub fn switch_micro_sleep(t: switch_interval_time_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_thread_mutex_t {
    _unused: [u8; 0],
}
pub type switch_mutex_t = fspr_thread_mutex_t;
extern "C" {
    pub fn switch_mutex_init(
        lock: *mut *mut switch_mutex_t,
        flags: ::std::os::raw::c_uint,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_mutex_destroy(lock: *mut switch_mutex_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_mutex_lock(lock: *mut switch_mutex_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_mutex_unlock(lock: *mut switch_mutex_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_mutex_trylock(lock: *mut switch_mutex_t) -> switch_status_t;
}
pub type switch_atomic_t = u32;
extern "C" {
    pub fn switch_atomic_init(pool: *mut switch_memory_pool_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_atomic_read(mem: *mut switch_atomic_t) -> u32;
}
extern "C" {
    pub fn switch_atomic_set(mem: *mut switch_atomic_t, val: u32);
}
extern "C" {
    pub fn switch_atomic_add(mem: *mut switch_atomic_t, val: u32);
}
extern "C" {
    pub fn switch_atomic_inc(mem: *mut switch_atomic_t);
}
extern "C" {
    pub fn switch_atomic_dec(mem: *mut switch_atomic_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_thread_rwlock_t {
    _unused: [u8; 0],
}
pub type switch_thread_rwlock_t = fspr_thread_rwlock_t;
extern "C" {
    pub fn switch_thread_rwlock_create(
        rwlock: *mut *mut switch_thread_rwlock_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_destroy(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_pool_get(
        rwlock: *mut switch_thread_rwlock_t,
    ) -> *mut switch_memory_pool_t;
}
extern "C" {
    pub fn switch_thread_rwlock_rdlock(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_tryrdlock(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_wrlock(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_trywrlock(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_trywrlock_timeout(
        rwlock: *mut switch_thread_rwlock_t,
        timeout: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_rwlock_unlock(rwlock: *mut switch_thread_rwlock_t) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_thread_cond_t {
    _unused: [u8; 0],
}
pub type switch_thread_cond_t = fspr_thread_cond_t;
extern "C" {
    pub fn switch_thread_cond_create(
        cond: *mut *mut switch_thread_cond_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_cond_wait(
        cond: *mut switch_thread_cond_t,
        mutex: *mut switch_mutex_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_cond_timedwait(
        cond: *mut switch_thread_cond_t,
        mutex: *mut switch_mutex_t,
        timeout: switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_cond_signal(cond: *mut switch_thread_cond_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_cond_broadcast(cond: *mut switch_thread_cond_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_cond_destroy(cond: *mut switch_thread_cond_t) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_uuid_t {
    pub data: [::std::os::raw::c_uchar; 16usize],
}
extern "C" {
    pub fn switch_uuid_format(buffer: *mut ::std::os::raw::c_char, uuid: *const switch_uuid_t);
}
extern "C" {
    pub fn switch_uuid_get(uuid: *mut switch_uuid_t);
}
extern "C" {
    pub fn switch_uuid_parse(
        uuid: *mut switch_uuid_t,
        uuid_str: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_md5(
        digest: *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_void,
        inputLen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_md5_string(
        digest_str: *mut ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_void,
        inputLen: switch_size_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_apr_queue_t {
    _unused: [u8; 0],
}
pub type switch_queue_t = switch_apr_queue_t;
extern "C" {
    pub fn switch_queue_create(
        queue: *mut *mut switch_queue_t,
        queue_capacity: ::std::os::raw::c_uint,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_pop(
        queue: *mut switch_queue_t,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_pop_timeout(
        queue: *mut switch_queue_t,
        data: *mut *mut ::std::os::raw::c_void,
        timeout: switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_push(
        queue: *mut switch_queue_t,
        data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_size(queue: *mut switch_queue_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_queue_trypop(
        queue: *mut switch_queue_t,
        data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_interrupt_all(queue: *mut switch_queue_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_term(queue: *mut switch_queue_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_queue_trypush(
        queue: *mut switch_queue_t,
        data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_file_t {
    _unused: [u8; 0],
}
pub type switch_file_t = fspr_file_t;
pub type switch_fileperms_t = i32;
pub type switch_seek_where_t = ::std::os::raw::c_int;
extern "C" {
    pub fn switch_file_open(
        newf: *mut *mut switch_file_t,
        fname: *const ::std::os::raw::c_char,
        flag: i32,
        perm: switch_fileperms_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_seek(
        thefile: *mut switch_file_t,
        where_: switch_seek_where_t,
        offset: *mut i64,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_copy(
        from_path: *const ::std::os::raw::c_char,
        to_path: *const ::std::os::raw::c_char,
        perms: switch_fileperms_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_close(thefile: *mut switch_file_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_trunc(thefile: *mut switch_file_t, offset: i64) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_lock(
        thefile: *mut switch_file_t,
        type_: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_remove(
        path: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_rename(
        from_path: *const ::std::os::raw::c_char,
        to_path: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_read(
        thefile: *mut switch_file_t,
        buf: *mut ::std::os::raw::c_void,
        nbytes: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_write(
        thefile: *mut switch_file_t,
        buf: *const ::std::os::raw::c_void,
        nbytes: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_printf(
        thefile: *mut switch_file_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_file_mktemp(
        thefile: *mut *mut switch_file_t,
        templ: *mut ::std::os::raw::c_char,
        flags: i32,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_get_size(thefile: *mut switch_file_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_file_exists(
        filename: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_directory_exists(
        dirname: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dir_make(
        path: *const ::std::os::raw::c_char,
        perm: switch_fileperms_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dir_make_recursive(
        path: *const ::std::os::raw::c_char,
        perm: switch_fileperms_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dir {
    _unused: [u8; 0],
}
pub type switch_dir_t = switch_dir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_array_header_t {
    pub pool: *mut switch_memory_pool_t,
    pub elt_size: ::std::os::raw::c_int,
    pub nelts: ::std::os::raw::c_int,
    pub nalloc: ::std::os::raw::c_int,
    pub elts: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub fn switch_dir_open(
        new_dir: *mut *mut switch_dir_t,
        dirname: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dir_close(thedir: *mut switch_dir_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_dir_next_file(
        thedir: *mut switch_dir_t,
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_dir_count(thedir: *mut switch_dir_t) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_thread_t {
    _unused: [u8; 0],
}
pub type switch_thread_t = fspr_thread_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_threadattr_t {
    _unused: [u8; 0],
}
pub type switch_threadattr_t = fspr_threadattr_t;
pub type switch_thread_start_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_thread_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn switch_threadattr_stacksize_set(
        attr: *mut switch_threadattr_t,
        stacksize: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_threadattr_priority_set(
        attr: *mut switch_threadattr_t,
        priority: switch_thread_priority_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_threadattr_create(
        new_attr: *mut *mut switch_threadattr_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_threadattr_detach_set(attr: *mut switch_threadattr_t, on: i32)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_create(
        new_thread: *mut *mut switch_thread_t,
        attr: *mut switch_threadattr_t,
        func: switch_thread_start_t,
        data: *mut ::std::os::raw::c_void,
        cont: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_socket_t {
    _unused: [u8; 0],
}
pub type switch_socket_t = fspr_socket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_sockaddr_t {
    _unused: [u8; 0],
}
pub type switch_sockaddr_t = fspr_sockaddr_t;
impl switch_shutdown_how_e {
    pub const SWITCH_SHUTDOWN_READ: switch_shutdown_how_e = switch_shutdown_how_e(0);
}
impl switch_shutdown_how_e {
    pub const SWITCH_SHUTDOWN_WRITE: switch_shutdown_how_e = switch_shutdown_how_e(1);
}
impl switch_shutdown_how_e {
    pub const SWITCH_SHUTDOWN_READWRITE: switch_shutdown_how_e = switch_shutdown_how_e(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_shutdown_how_e(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_socket_create(
        new_sock: *mut *mut switch_socket_t,
        family: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_shutdown(
        sock: *mut switch_socket_t,
        how: switch_shutdown_how_e,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_close(sock: *mut switch_socket_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_bind(
        sock: *mut switch_socket_t,
        sa: *mut switch_sockaddr_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_listen(sock: *mut switch_socket_t, backlog: i32) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_accept(
        new_sock: *mut *mut switch_socket_t,
        sock: *mut switch_socket_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_connect(
        sock: *mut switch_socket_t,
        sa: *mut switch_sockaddr_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_fd_get(sock: *mut switch_socket_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_sockaddr_get_port(sa: *mut switch_sockaddr_t) -> u16;
}
extern "C" {
    pub fn switch_get_addr(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        in_: *mut switch_sockaddr_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_getnameinfo(
        hostname: *mut *mut ::std::os::raw::c_char,
        sa: *mut switch_sockaddr_t,
        flags: i32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sockaddr_get_family(sa: *mut switch_sockaddr_t) -> i32;
}
extern "C" {
    pub fn switch_sockaddr_ip_get(
        addr: *mut *mut ::std::os::raw::c_char,
        sa: *mut switch_sockaddr_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sockaddr_equal(
        sa1: *const switch_sockaddr_t,
        sa2: *const switch_sockaddr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_sockaddr_info_get(
        sa: *mut *mut switch_sockaddr_t,
        hostname: *const ::std::os::raw::c_char,
        family: i32,
        port: switch_port_t,
        flags: i32,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sockaddr_create(
        sa: *mut *mut switch_sockaddr_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sockaddr_new(
        sa: *mut *mut switch_sockaddr_t,
        ip: *const ::std::os::raw::c_char,
        port: switch_port_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_send(
        sock: *mut switch_socket_t,
        buf: *const ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_sendto(
        sock: *mut switch_socket_t,
        where_: *mut switch_sockaddr_t,
        flags: i32,
        buf: *const ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_send_nonblock(
        sock: *mut switch_socket_t,
        buf: *const ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_recvfrom(
        from: *mut switch_sockaddr_t,
        sock: *mut switch_socket_t,
        flags: i32,
        buf: *mut ::std::os::raw::c_char,
        len: *mut usize,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_atmark(
        sock: *mut switch_socket_t,
        atmark: *mut ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_recv(
        sock: *mut switch_socket_t,
        buf: *mut ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_opt_set(sock: *mut switch_socket_t, opt: i32, on: i32) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_timeout_get(
        sock: *mut switch_socket_t,
        t: *mut switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_timeout_set(
        sock: *mut switch_socket_t,
        t: switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_mcast_join(
        sock: *mut switch_socket_t,
        join: *mut switch_sockaddr_t,
        iface: *mut switch_sockaddr_t,
        source: *mut switch_sockaddr_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_mcast_hops(sock: *mut switch_socket_t, ttl: u8) -> switch_status_t;
}
extern "C" {
    pub fn switch_mcast_loopback(sock: *mut switch_socket_t, opt: u8) -> switch_status_t;
}
extern "C" {
    pub fn switch_mcast_interface(
        sock: *mut switch_socket_t,
        iface: *mut switch_sockaddr_t,
    ) -> switch_status_t;
}
impl switch_pollset_type_t {
    pub const SWITCH_NO_DESC: switch_pollset_type_t = switch_pollset_type_t(0);
}
impl switch_pollset_type_t {
    pub const SWITCH_POLL_SOCKET: switch_pollset_type_t = switch_pollset_type_t(1);
}
impl switch_pollset_type_t {
    pub const SWITCH_POLL_FILE: switch_pollset_type_t = switch_pollset_type_t(2);
}
impl switch_pollset_type_t {
    pub const SWITCH_POLL_LASTDESC: switch_pollset_type_t = switch_pollset_type_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_pollset_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub union switch_descriptor_t {
    pub f: *mut switch_file_t,
    pub s: *mut switch_socket_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct switch_pollfd {
    pub p: *mut switch_memory_pool_t,
    pub desc_type: switch_pollset_type_t,
    pub reqevents: i16,
    pub rtnevents: i16,
    pub desc: switch_descriptor_t,
    pub client_data: *mut ::std::os::raw::c_void,
}
pub type switch_pollfd_t = switch_pollfd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fspr_pollset_t {
    _unused: [u8; 0],
}
pub type switch_pollset_t = fspr_pollset_t;
extern "C" {
    pub fn switch_pollset_create(
        pollset: *mut *mut switch_pollset_t,
        size: u32,
        pool: *mut switch_memory_pool_t,
        flags: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_pollset_add(
        pollset: *mut switch_pollset_t,
        descriptor: *const switch_pollfd_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_pollset_remove(
        pollset: *mut switch_pollset_t,
        descriptor: *const switch_pollfd_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_poll(
        aprset: *mut switch_pollfd_t,
        numsock: i32,
        nsds: *mut i32,
        timeout: switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_pollset_poll(
        pollset: *mut switch_pollset_t,
        timeout: switch_interval_time_t,
        num: *mut i32,
        descriptors: *mut *const switch_pollfd_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_create_pollset(
        poll: *mut *mut switch_pollfd_t,
        sock: *mut switch_socket_t,
        flags: i16,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_interval_time_from_timeval(tvp: *mut timeval) -> switch_interval_time_t;
}
extern "C" {
    pub fn switch_socket_create_pollfd(
        pollfd: *mut *mut switch_pollfd_t,
        sock: *mut switch_socket_t,
        flags: i16,
        client_data: *mut ::std::os::raw::c_void,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_match_glob(
        pattern: *const ::std::os::raw::c_char,
        result: *mut *mut switch_array_header_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_os_sock_get(
        thesock: *mut switch_os_socket_t,
        sock: *mut switch_socket_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_os_sock_put(
        sock: *mut *mut switch_socket_t,
        thesock: *mut switch_os_socket_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_socket_addr_get(
        sa: *mut *mut switch_sockaddr_t,
        remote: switch_bool_t,
        sock: *mut switch_socket_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_pipe_create(
        in_: *mut *mut switch_file_t,
        out: *mut *mut switch_file_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_pipe_timeout_get(
        thepipe: *mut switch_file_t,
        timeout: *mut switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_file_pipe_timeout_set(
        thepipe: *mut switch_file_t,
        timeout: switch_interval_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_exit(
        thd: *mut switch_thread_t,
        retval: switch_status_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_join(
        retval: *mut switch_status_t,
        thd: *mut switch_thread_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_strerror(
        statcode: switch_status_t,
        buf: *mut ::std::os::raw::c_char,
        bufsize: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_plc_init(s: *mut switch_plc_state_t) -> *mut switch_plc_state_t;
}
extern "C" {
    pub fn switch_plc_free(s: *mut switch_plc_state_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_plc_rx(
        s: *mut switch_plc_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_plc_fillin(
        s: *mut switch_plc_state_t,
        amp: *mut i16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_mprintf(
        zFormat: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_vmprintf(
        zFormat: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_snprintfv(
        zBuf: *mut ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
        zFormat: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3 {
    _unused: [u8; 0],
}
pub type switch_core_db_t = sqlite3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_coredb_handle {
    pub in_memory: switch_bool_t,
    pub handle: *mut switch_core_db_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sqlite3_stmt {
    _unused: [u8; 0],
}
pub type switch_core_db_stmt_t = sqlite3_stmt;
pub type switch_core_db_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        pArg: *mut ::std::os::raw::c_void,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        columnNames: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type switch_core_db_err_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        pArg: *mut ::std::os::raw::c_void,
        errmsg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type switch_core_db_destructor_type_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn switch_core_db_close(db: *mut switch_core_db_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_open(
        filename: *const ::std::os::raw::c_char,
        ppDb: *mut *mut switch_core_db_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_open_v2(
        filename: *const ::std::os::raw::c_char,
        ppDb: *mut *mut switch_core_db_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_column_text(
        stmt: *mut switch_core_db_stmt_t,
        iCol: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn switch_core_db_column_name(
        stmt: *mut switch_core_db_stmt_t,
        N: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_db_column_count(pStmt: *mut switch_core_db_stmt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_errmsg(db: *mut switch_core_db_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_db_exec(
        db: *mut switch_core_db_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        data: *mut ::std::os::raw::c_void,
        errmsg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_finalize(pStmt: *mut switch_core_db_stmt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_prepare(
        db: *mut switch_core_db_t,
        zSql: *const ::std::os::raw::c_char,
        nBytes: ::std::os::raw::c_int,
        ppStmt: *mut *mut switch_core_db_stmt_t,
        pzTail: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_step(stmt: *mut switch_core_db_stmt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_reset(pStmt: *mut switch_core_db_stmt_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_bind_int(
        pStmt: *mut switch_core_db_stmt_t,
        i: ::std::os::raw::c_int,
        iValue: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_bind_int64(
        pStmt: *mut switch_core_db_stmt_t,
        i: ::std::os::raw::c_int,
        iValue: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_bind_text(
        pStmt: *mut switch_core_db_stmt_t,
        i: ::std::os::raw::c_int,
        zData: *const ::std::os::raw::c_char,
        nData: ::std::os::raw::c_int,
        xDel: switch_core_db_destructor_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_bind_double(
        pStmt: *mut switch_core_db_stmt_t,
        i: ::std::os::raw::c_int,
        dValue: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_last_insert_rowid(db: *mut switch_core_db_t) -> i64;
}
extern "C" {
    pub fn switch_core_db_get_table(
        db: *mut switch_core_db_t,
        sql: *const ::std::os::raw::c_char,
        resultp: *mut *mut *mut ::std::os::raw::c_char,
        nrow: *mut ::std::os::raw::c_int,
        ncolumn: *mut ::std::os::raw::c_int,
        errmsg: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_free_table(result: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn switch_core_db_free(z: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn switch_core_db_changes(db: *mut switch_core_db_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_db_load_extension(
        db: *mut switch_core_db_t,
        extension: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_sql_concat() -> *mut ::std::os::raw::c_char;
}
pub type switch_dso_func_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type switch_dso_lib_t = *mut ::std::os::raw::c_void;
pub type switch_dso_data_t = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn switch_dso_destroy(lib: *mut switch_dso_lib_t);
}
extern "C" {
    pub fn switch_dso_open(
        path: *const ::std::os::raw::c_char,
        global: ::std::os::raw::c_int,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_dso_lib_t;
}
extern "C" {
    pub fn switch_dso_func_sym(
        lib: switch_dso_lib_t,
        sym: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_dso_func_t;
}
extern "C" {
    pub fn switch_dso_data_sym(
        lib: switch_dso_lib_t,
        sym: *const ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre {
    _unused: [u8; 0],
}
pub type switch_regex_t = real_pcre;
extern "C" {
    pub fn switch_regex_compile(
        pattern: *const ::std::os::raw::c_char,
        options: ::std::os::raw::c_int,
        errorptr: *mut *const ::std::os::raw::c_char,
        erroroffset: *mut ::std::os::raw::c_int,
        tables: *const ::std::os::raw::c_uchar,
    ) -> *mut switch_regex_t;
}
extern "C" {
    pub fn switch_regex_copy_substring(
        subject: *const ::std::os::raw::c_char,
        ovector: *mut ::std::os::raw::c_int,
        stringcount: ::std::os::raw::c_int,
        stringnumber: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_regex_free(data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn switch_regex_perform(
        field: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
        new_re: *mut *mut switch_regex_t,
        ovector: *mut ::std::os::raw::c_int,
        olen: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_perform_substitution(
        re: *mut switch_regex_t,
        match_count: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_char,
        field_data: *const ::std::os::raw::c_char,
        substituted: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        ovector: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_regex_match(
        target: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_regex_match_partial(
        target: *const ::std::os::raw::c_char,
        expression: *const ::std::os::raw::c_char,
        partial_match: *mut ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_capture_regex(
        re: *mut switch_regex_t,
        match_count: ::std::os::raw::c_int,
        field_data: *const ::std::os::raw::c_char,
        ovector: *mut ::std::os::raw::c_int,
        var: *const ::std::os::raw::c_char,
        callback: switch_cap_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_regex_set_var_callback(
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_regex_set_event_header_callback(
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_time_duration {
    pub mms: u32,
    pub ms: u32,
    pub sec: u32,
    pub min: u32,
    pub hr: u32,
    pub day: u32,
    pub yr: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_app_log {
    pub app: *mut ::std::os::raw::c_char,
    pub arg: *mut ::std::os::raw::c_char,
    pub stamp: switch_time_t,
    pub next: *mut switch_app_log,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_thread_data_s {
    pub func: switch_thread_start_t,
    pub obj: *mut ::std::os::raw::c_void,
    pub alloc: ::std::os::raw::c_int,
    pub running: ::std::os::raw::c_int,
    pub pool: *mut switch_memory_pool_t,
}
pub type switch_thread_data_t = switch_thread_data_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_hold_record_s {
    pub on: switch_time_t,
    pub off: switch_time_t,
    pub uuid: *mut ::std::os::raw::c_char,
    pub next: *mut switch_hold_record_s,
}
pub type switch_hold_record_t = switch_hold_record_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct device_uuid_node_s {
    pub uuid: *mut ::std::os::raw::c_char,
    pub xml_cdr: switch_xml_t,
    pub event: *mut switch_event_t,
    pub callstate: switch_channel_callstate_t,
    pub hold_record: *mut switch_hold_record_t,
    pub hup_profile: *mut switch_caller_profile_t,
    pub direction: switch_call_direction_t,
    pub parent: *mut switch_device_record_s,
    pub next: *mut device_uuid_node_s,
}
pub type switch_device_node_t = device_uuid_node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_device_stats_s {
    pub total: u32,
    pub total_in: u32,
    pub total_out: u32,
    pub offhook: u32,
    pub offhook_in: u32,
    pub offhook_out: u32,
    pub active: u32,
    pub active_in: u32,
    pub active_out: u32,
    pub held: u32,
    pub held_in: u32,
    pub held_out: u32,
    pub unheld: u32,
    pub unheld_in: u32,
    pub unheld_out: u32,
    pub hup: u32,
    pub hup_in: u32,
    pub hup_out: u32,
    pub ringing: u32,
    pub ringing_in: u32,
    pub ringing_out: u32,
    pub early: u32,
    pub early_in: u32,
    pub early_out: u32,
    pub ring_wait: u32,
}
pub type switch_device_stats_t = switch_device_stats_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_device_record_s {
    pub device_id: *mut ::std::os::raw::c_char,
    pub uuid: *mut ::std::os::raw::c_char,
    pub refs: ::std::os::raw::c_int,
    pub stats: switch_device_stats_t,
    pub last_stats: switch_device_stats_t,
    pub state: switch_device_state_t,
    pub last_state: switch_device_state_t,
    pub active_start: switch_time_t,
    pub active_stop: switch_time_t,
    pub last_call_time: switch_time_t,
    pub ring_start: switch_time_t,
    pub ring_stop: switch_time_t,
    pub hold_start: switch_time_t,
    pub hold_stop: switch_time_t,
    pub call_start: switch_time_t,
    pub uuid_list: *mut device_uuid_node_s,
    pub uuid_tail: *mut device_uuid_node_s,
    pub mutex: *mut switch_mutex_t,
    pub pool: *mut switch_memory_pool_t,
    pub user_data: *mut ::std::os::raw::c_void,
}
pub type switch_device_record_t = switch_device_record_s;
pub type switch_device_state_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        session: *mut switch_core_session_t,
        callstate: switch_channel_callstate_t,
        drec: *mut switch_device_record_t,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dtls_fp_s {
    pub len: u32,
    pub data: [u8; 65usize],
    pub type_: *mut ::std::os::raw::c_char,
    pub str_: [::std::os::raw::c_char; 192usize],
}
pub type dtls_fingerprint_t = dtls_fp_s;
impl dtls_type_t {
    pub const DTLS_TYPE_CLIENT: dtls_type_t = dtls_type_t(1);
}
impl dtls_type_t {
    pub const DTLS_TYPE_SERVER: dtls_type_t = dtls_type_t(2);
}
impl dtls_type_t {
    pub const DTLS_TYPE_RTP: dtls_type_t = dtls_type_t(4);
}
impl dtls_type_t {
    pub const DTLS_TYPE_RTCP: dtls_type_t = dtls_type_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct dtls_type_t(pub ::std::os::raw::c_uint);
impl dtls_state_t {
    pub const DS_OFF: dtls_state_t = dtls_state_t(0);
}
impl dtls_state_t {
    pub const DS_HANDSHAKE: dtls_state_t = dtls_state_t(1);
}
impl dtls_state_t {
    pub const DS_SETUP: dtls_state_t = dtls_state_t(2);
}
impl dtls_state_t {
    pub const DS_READY: dtls_state_t = dtls_state_t(3);
}
impl dtls_state_t {
    pub const DS_FAIL: dtls_state_t = dtls_state_t(4);
}
impl dtls_state_t {
    pub const DS_INVALID: dtls_state_t = dtls_state_t(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct dtls_state_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_session_message {
    pub from: *mut ::std::os::raw::c_char,
    pub message_id: switch_core_session_message_types_t,
    pub numeric_arg: ::std::os::raw::c_int,
    pub string_arg: *const ::std::os::raw::c_char,
    pub string_arg_size: switch_size_t,
    pub pointer_arg: *mut ::std::os::raw::c_void,
    pub pointer_arg_size: switch_size_t,
    pub numeric_reply: ::std::os::raw::c_int,
    pub string_reply: *mut ::std::os::raw::c_char,
    pub string_reply_size: switch_size_t,
    pub pointer_reply: *mut ::std::os::raw::c_void,
    pub pointer_reply_size: switch_size_t,
    pub flags: switch_core_session_message_flag_t,
    pub _file: *const ::std::os::raw::c_char,
    pub _func: *const ::std::os::raw::c_char,
    pub _line: ::std::os::raw::c_int,
    pub string_array_arg: [*const ::std::os::raw::c_char; 10usize],
    pub delivery_time: time_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_thread_session {
    pub running: ::std::os::raw::c_int,
    pub mutex: *mut switch_mutex_t,
    pub objs: [*mut ::std::os::raw::c_void; 128usize],
    pub input_callback: switch_input_callback_function_t,
    pub pool: *mut switch_memory_pool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_runtime {
    _unused: [u8; 0],
}
extern "C" {
    pub fn switch_core_screen_size(x: *mut ::std::os::raw::c_int, y: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_core_session_sched_heartbeat(session: *mut switch_core_session_t, seconds: u32);
}
extern "C" {
    pub fn switch_core_session_unsched_heartbeat(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_enable_heartbeat(session: *mut switch_core_session_t, seconds: u32);
}
extern "C" {
    pub fn switch_core_session_disable_heartbeat(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_bug_pop(
        orig_session: *mut switch_core_session_t,
        function: *const ::std::os::raw::c_char,
        pop: *mut *mut switch_media_bug_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_exec_all(
        orig_session: *mut switch_core_session_t,
        function: *const ::std::os::raw::c_char,
        cb: switch_media_bug_exec_cb_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_patch_video(
        orig_session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_count(
        orig_session: *mut switch_core_session_t,
        function: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn switch_media_bug_set_spy_fmt(
        bug: *mut switch_media_bug_t,
        spy_fmt: switch_vid_spy_fmt_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_push_spy_frame(
        bug: *mut switch_media_bug_t,
        frame: *mut switch_frame_t,
        rw: switch_rw_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_patch_spy_frame(
        bug: *mut switch_media_bug_t,
        img: *mut switch_image_t,
        rw: switch_rw_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_media_bug_parse_spy_fmt(
        name: *const ::std::os::raw::c_char,
    ) -> switch_vid_spy_fmt_t;
}
extern "C" {
    pub fn switch_core_media_bug_add(
        session: *mut switch_core_session_t,
        function: *const ::std::os::raw::c_char,
        target: *const ::std::os::raw::c_char,
        callback: switch_media_bug_callback_t,
        user_data: *mut ::std::os::raw::c_void,
        stop_time: time_t,
        flags: switch_media_bug_flag_t,
        new_bug: *mut *mut switch_media_bug_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_pause(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_bug_resume(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_bug_inuse(
        bug: *mut switch_media_bug_t,
        readp: *mut switch_size_t,
        writep: *mut switch_size_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_get_user_data(
        bug: *mut switch_media_bug_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_media_bug_get_write_replace_frame(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_frame_t;
}
extern "C" {
    pub fn switch_core_media_bug_get_native_read_frame(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_frame_t;
}
extern "C" {
    pub fn switch_core_media_bug_get_native_write_frame(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_frame_t;
}
extern "C" {
    pub fn switch_core_media_bug_get_video_ping_frame(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_frame_t;
}
extern "C" {
    pub fn switch_core_media_bug_set_write_replace_frame(
        bug: *mut switch_media_bug_t,
        frame: *mut switch_frame_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_get_read_replace_frame(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_frame_t;
}
extern "C" {
    pub fn switch_core_media_bug_set_read_demux_frame(
        bug: *mut switch_media_bug_t,
        frame: *mut switch_frame_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_get_session(
        bug: *mut switch_media_bug_t,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_media_bug_set_media_params(
        bug: *mut switch_media_bug_t,
        mm: *mut switch_mm_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_get_media_params(
        bug: *mut switch_media_bug_t,
        mm: *mut switch_mm_t,
    );
}
extern "C" {
    pub fn switch_core_media_bug_get_text(
        bug: *mut switch_media_bug_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_media_bug_test_flag(bug: *mut switch_media_bug_t, flag: u32) -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_set_flag(bug: *mut switch_media_bug_t, flag: u32) -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_clear_flag(bug: *mut switch_media_bug_t, flag: u32) -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_set_read_replace_frame(
        bug: *mut switch_media_bug_t,
        frame: *mut switch_frame_t,
    );
}
extern "C" {
    pub fn switch_core_cpu_count() -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_remove(
        session: *mut switch_core_session_t,
        bug: *mut *mut switch_media_bug_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_prune(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_media_bug_remove_callback(
        session: *mut switch_core_session_t,
        callback: switch_media_bug_callback_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_close(
        bug: *mut *mut switch_media_bug_t,
        destroy: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_remove_all_function(
        session: *mut switch_core_session_t,
        function: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_enumerate(
        session: *mut switch_core_session_t,
        stream: *mut switch_stream_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_transfer_callback(
        orig_session: *mut switch_core_session_t,
        new_session: *mut switch_core_session_t,
        callback: switch_media_bug_callback_t,
        user_data_dup_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut switch_core_session_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_read(
        bug: *mut switch_media_bug_t,
        frame: *mut switch_frame_t,
        fill: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_flush(bug: *mut switch_media_bug_t);
}
extern "C" {
    pub fn switch_core_media_bug_flush_all(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_bug_set_pre_buffer_framecount(
        bug: *mut switch_media_bug_t,
        framecount: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_port_allocator_new(
        ip: *const ::std::os::raw::c_char,
        start: switch_port_t,
        end: switch_port_t,
        flags: switch_port_flag_t,
        new_allocator: *mut *mut switch_core_port_allocator_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_port_allocator_request_port(
        alloc: *mut switch_core_port_allocator_t,
        port_ptr: *mut switch_port_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_port_allocator_free_port(
        alloc: *mut switch_core_port_allocator_t,
        port: switch_port_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_port_allocator_destroy(alloc: *mut *mut switch_core_port_allocator_t);
}
extern "C" {
    pub fn switch_core_test_flag(flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_init(
        flags: switch_core_flag_t,
        console: switch_bool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_init_and_modload(
        flags: switch_core_flag_t,
        console: switch_bool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_limit(new_limit: u32) -> u32;
}
extern "C" {
    pub fn switch_core_sessions_per_second(new_limit: u32) -> u32;
}
extern "C" {
    pub fn switch_core_destroy() -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_io_read_lock(session: *mut switch_core_session_t)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_io_write_lock(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_io_rwunlock(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_read_lock(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_read_lock_hangup(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_lock(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_rwunlock(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_add_state_handler(
        state_handler: *const switch_state_handler_table_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_remove_state_handler(state_handler: *const switch_state_handler_table_t);
}
extern "C" {
    pub fn switch_core_get_state_handler(
        index: ::std::os::raw::c_int,
    ) -> *const switch_state_handler_table_t;
}
extern "C" {
    pub fn switch_core_memory_pool_tag(
        pool: *mut switch_memory_pool_t,
        tag: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_pool_stats(stream: *mut switch_stream_handle_t);
}
extern "C" {
    pub fn switch_core_perform_new_memory_pool(
        pool: *mut *mut switch_memory_pool_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_sync_clock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_perform_destroy_memory_pool(
        pool: *mut *mut switch_memory_pool_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_memory_pool_set_data(
        pool: *mut switch_memory_pool_t,
        key: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_core_memory_pool_get_data(
        pool: *mut switch_memory_pool_t,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_session_run(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_running(
        session: *mut switch_core_session_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_core_session_started(
        session: *mut switch_core_session_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_core_perform_permanent_alloc(
        memory: switch_size_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_perform_alloc(
        pool: *mut switch_memory_pool_t,
        memory: switch_size_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_perform_session_alloc(
        session: *mut switch_core_session_t,
        memory: switch_size_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_perform_permanent_strdup(
        todup: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_perform_session_strdup(
        session: *mut switch_core_session_t,
        todup: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_perform_strdup(
        pool: *mut switch_memory_pool_t,
        todup: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_perform_strndup(
        pool: *mut switch_memory_pool_t,
        todup: *const ::std::os::raw::c_char,
        len: usize,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_sprintf(
        session: *mut switch_core_session_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_vsprintf(
        session: *mut switch_core_session_t,
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_sprintf(
        pool: *mut switch_memory_pool_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_vsprintf(
        pool: *mut switch_memory_pool_t,
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_get_pool(
        session: *mut switch_core_session_t,
    ) -> *mut switch_memory_pool_t;
}
extern "C" {
    pub fn switch_core_session_request_xml(
        endpoint_interface: *mut switch_endpoint_interface_t,
        pool: *mut *mut switch_memory_pool_t,
        xml: switch_xml_t,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_session_request_uuid(
        endpoint_interface: *mut switch_endpoint_interface_t,
        direction: switch_call_direction_t,
        originate_flags: switch_originate_flag_t,
        pool: *mut *mut switch_memory_pool_t,
        use_uuid: *const ::std::os::raw::c_char,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_session_set_uuid(
        session: *mut switch_core_session_t,
        use_uuid: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_external_id(
        session: *mut switch_core_session_t,
        use_external_id: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_perform_destroy(
        session: *mut *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_session_destroy_state(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_reporting_state(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_hangup_state(
        session: *mut switch_core_session_t,
        force: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_core_session_count() -> u32;
}
extern "C" {
    pub fn switch_core_session_get_id(session: *mut switch_core_session_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_core_session_id() -> switch_size_t;
}
extern "C" {
    pub fn switch_core_session_id_dec() -> switch_size_t;
}
extern "C" {
    pub fn switch_core_session_request_by_name(
        endpoint_name: *const ::std::os::raw::c_char,
        direction: switch_call_direction_t,
        pool: *mut *mut switch_memory_pool_t,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_session_thread_launch(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_pool_launch_thread(tdp: *mut *mut switch_thread_data_t)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_thread_pool_launch(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_thread_pool_wait(
        td: *mut switch_thread_data_t,
        ms: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_channel(
        session: *mut switch_core_session_t,
    ) -> *mut switch_channel_t;
}
extern "C" {
    pub fn switch_core_session_get_mutex(
        session: *mut switch_core_session_t,
    ) -> *mut switch_mutex_t;
}
extern "C" {
    pub fn switch_core_session_wake_session_thread(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_signal_state_change(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_get_uuid(
        session: *mut switch_core_session_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_get_external_id(
        session: *mut switch_core_session_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_set_loglevel(
        session: *mut switch_core_session_t,
        loglevel: switch_log_level_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_loglevel(
        session: *mut switch_core_session_t,
    ) -> switch_log_level_t;
}
extern "C" {
    pub fn switch_core_session_get_jb(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> *mut switch_jb_t;
}
extern "C" {
    pub fn switch_core_session_soft_lock(session: *mut switch_core_session_t, sec: u32);
}
extern "C" {
    pub fn switch_core_session_soft_unlock(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_set_dmachine(
        session: *mut switch_core_session_t,
        dmachine: *mut switch_ivr_dmachine_t,
        target: switch_digit_action_target_t,
    );
}
extern "C" {
    pub fn switch_core_session_get_dmachine(
        session: *mut switch_core_session_t,
        target: switch_digit_action_target_t,
    ) -> *mut switch_ivr_dmachine_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_get_target(
        dmachine: *mut switch_ivr_dmachine_t,
    ) -> switch_digit_action_target_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_set_target(
        dmachine: *mut switch_ivr_dmachine_t,
        target: switch_digit_action_target_t,
    );
}
extern "C" {
    pub fn switch_ivr_dmachine_set_terminators(
        dmachine: *mut switch_ivr_dmachine_t,
        terminators: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_codec_slin(
        session: *mut switch_core_session_t,
        data: *mut switch_slin_data_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_raw_read(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_get_uuid() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_perform_locate(
        uuid_str: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_session_perform_force_locate(
        uuid_str: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_core_get_variable(
        varname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_get_variable_dup(
        varname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_get_variable_pdup(
        varname: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_get_hostname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_get_switchname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_get_domain(dup: switch_bool_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_set_variable(
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_get_variables(event: *mut *mut switch_event_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_set_var_conditional(
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        val2: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_dump_variables(stream: *mut switch_stream_handle_t);
}
extern "C" {
    pub fn switch_core_session_hupall(cause: switch_call_cause_t);
}
impl switch_hup_type_t {
    pub const SHT_NONE: switch_hup_type_t = switch_hup_type_t(0);
}
impl switch_hup_type_t {
    pub const SHT_UNANSWERED: switch_hup_type_t = switch_hup_type_t(1);
}
impl switch_hup_type_t {
    pub const SHT_ANSWERED: switch_hup_type_t = switch_hup_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_hup_type_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_core_session_hupall_matching_var_ans(
        var_name: *const ::std::os::raw::c_char,
        var_val: *const ::std::os::raw::c_char,
        cause: switch_call_cause_t,
        type_: switch_hup_type_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_core_session_findall_matching_var(
        var_name: *const ::std::os::raw::c_char,
        var_val: *const ::std::os::raw::c_char,
    ) -> *mut switch_console_callback_match_t;
}
extern "C" {
    pub fn switch_core_session_findall() -> *mut switch_console_callback_match_t;
}
extern "C" {
    pub fn switch_core_session_hupall_matching_vars_ans(
        vars: *mut switch_event_t,
        cause: switch_call_cause_t,
        type_: switch_hup_type_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_core_session_hupall_endpoint(
        endpoint_interface: *const switch_endpoint_interface_t,
        cause: switch_call_cause_t,
    );
}
extern "C" {
    pub fn switch_core_session_perform_get_partner(
        session: *mut switch_core_session_t,
        partner: *mut *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_message_send(
        uuid_str: *const ::std::os::raw::c_char,
        message: *mut switch_core_session_message_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_queue_message(
        session: *mut switch_core_session_t,
        message: *mut switch_core_session_message_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_free_message(message: *mut *mut switch_core_session_message_t);
}
extern "C" {
    pub fn switch_core_session_queue_signal_data(
        session: *mut switch_core_session_t,
        signal_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_dequeue_signal_data(
        session: *mut switch_core_session_t,
        signal_data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_pass_indication(
        session: *mut switch_core_session_t,
        indication: switch_core_session_message_types_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_queue_indication(
        session: *mut switch_core_session_t,
        indication: switch_core_session_message_types_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_dequeue_message(
        session: *mut switch_core_session_t,
        message: *mut *mut switch_core_session_message_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_flush_message(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_event_send(
        uuid_str: *const ::std::os::raw::c_char,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_app_log(
        session: *mut switch_core_session_t,
    ) -> *mut switch_app_log_t;
}
extern "C" {
    pub fn switch_core_session_exec(
        session: *mut switch_core_session_t,
        application_interface: *const switch_application_interface_t,
        arg: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_video_reset(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_execute_application_get_flags(
        session: *mut switch_core_session_t,
        app: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
        flags: *mut i32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_execute_application_async(
        session: *mut switch_core_session_t,
        app: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_app_flags(
        app: *const ::std::os::raw::c_char,
        flags: *mut i32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_stack_count(
        session: *mut switch_core_session_t,
        x: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn switch_core_session_execute_exten(
        session: *mut switch_core_session_t,
        exten: *const ::std::os::raw::c_char,
        dialplan: *const ::std::os::raw::c_char,
        context: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_receive_event(
        session: *mut switch_core_session_t,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_private_class(
        session: *mut switch_core_session_t,
        index: switch_pvt_class_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_session_set_private_class(
        session: *mut switch_core_session_t,
        private_info: *mut ::std::os::raw::c_void,
        index: switch_pvt_class_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_add_stream(
        session: *mut switch_core_session_t,
        private_info: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_session_get_stream(
        session: *mut switch_core_session_t,
        index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_session_get_stream_count(
        session: *mut switch_core_session_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_session_get_text_buffer(
        session: *mut switch_core_session_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_launch_thread(
        session: *mut switch_core_session_t,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut switch_thread_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        obj: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_core_thread_session_end(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_service_session_av(
        session: *mut switch_core_session_t,
        audio: switch_bool_t,
        video: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_core_session_outgoing_channel(
        session: *mut switch_core_session_t,
        var_event: *mut switch_event_t,
        endpoint_name: *const ::std::os::raw::c_char,
        caller_profile: *mut switch_caller_profile_t,
        new_session: *mut *mut switch_core_session_t,
        pool: *mut *mut switch_memory_pool_t,
        flags: switch_originate_flag_t,
        cancel_cause: *mut switch_call_cause_t,
    ) -> switch_call_cause_t;
}
extern "C" {
    pub fn switch_core_session_perform_receive_message(
        session: *mut switch_core_session_t,
        message: *mut switch_core_session_message_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_queue_event(
        session: *mut switch_core_session_t,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_event_count(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_session_messages_waiting(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_session_dequeue_event(
        session: *mut switch_core_session_t,
        event: *mut *mut switch_event_t,
        force: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_queue_private_event(
        session: *mut switch_core_session_t,
        event: *mut *mut switch_event_t,
        priority: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_private_event_count(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_session_dequeue_private_event(
        session: *mut switch_core_session_t,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_flush_private_events(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_session_read_frame(
        session: *mut switch_core_session_t,
        frame: *mut *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_transcoding(
        session_a: *mut switch_core_session_t,
        session_b: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_session_passthru(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        on: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_core_session_read_video_frame(
        session: *mut switch_core_session_t,
        frame: *mut *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_video_frame(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_encoded_video_frame(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_read_impl(
        session: *mut switch_core_session_t,
        impp: *const switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_write_impl(
        session: *mut switch_core_session_t,
        impp: *const switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_video_read_impl(
        session: *mut switch_core_session_t,
        impp: *const switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_video_write_impl(
        session: *mut switch_core_session_t,
        impp: *const switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_reset(
        session: *mut switch_core_session_t,
        flush_dtmf: switch_bool_t,
        reset_read_codec: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_core_session_try_reset(
        session: *mut switch_core_session_t,
        flush_dtmf: switch_bool_t,
        reset_read_codec: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_frame(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_perform_kill_channel(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        sig: switch_signal_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_send_dtmf(
        session: *mut switch_core_session_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_send_dtmf_string(
        session: *mut switch_core_session_t,
        dtmf_string: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_recv_dtmf(
        session: *mut switch_core_session_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_init_case(
        hash: *mut *mut switch_hash_t,
        case_sensitive: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_destroy(hash: *mut *mut switch_hash_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_pointer(
        hash: *mut switch_hash_t,
        data: *const ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_auto_free(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_dup_auto_free(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_destructor(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        destructor: hashtable_destructor_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_alloc_destructor(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        size: usize,
        destructor: hashtable_destructor_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_insert_dup_destructor(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
        destructor: hashtable_destructor_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_locked(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        mutex: *mut switch_mutex_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_insert_wrlock(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        rwlock: *mut switch_thread_rwlock_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_delete(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_delete_locked(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        mutex: *mut switch_mutex_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_delete_wrlock(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        rwlock: *mut switch_thread_rwlock_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_delete_multi(
        hash: *mut switch_hash_t,
        callback: switch_hash_delete_callback_t,
        pData: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_hash_find(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_find_locked(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        mutex: *mut switch_mutex_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_find_rdlock(
        hash: *mut switch_hash_t,
        key: *const ::std::os::raw::c_char,
        rwlock: *mut switch_thread_rwlock_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_hash_first_iter(
        hash: *mut switch_hash_t,
        hi: *mut switch_hash_index_t,
    ) -> *mut switch_hash_index_t;
}
extern "C" {
    pub fn switch_core_hash_empty(hash: *mut switch_hash_t) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_hash_next(hi: *mut *mut switch_hash_index_t) -> *mut switch_hash_index_t;
}
extern "C" {
    pub fn switch_core_hash_this(
        hi: *mut switch_hash_index_t,
        key: *mut *const ::std::os::raw::c_void,
        klen: *mut switch_ssize_t,
        val: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_core_hash_this_val(
        hi: *mut switch_hash_index_t,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_core_inthash_init(hash: *mut *mut switch_inthash_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_inthash_destroy(hash: *mut *mut switch_inthash_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_inthash_insert(
        hash: *mut switch_inthash_t,
        key: u32,
        data: *const ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_inthash_delete(
        hash: *mut switch_inthash_t,
        key: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_inthash_find(
        hash: *mut switch_inthash_t,
        key: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_core_timer_init(
        timer: *mut switch_timer_t,
        timer_name: *const ::std::os::raw::c_char,
        interval: ::std::os::raw::c_int,
        samples: ::std::os::raw::c_int,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_calibrate_clock();
}
extern "C" {
    pub fn switch_core_timer_next(timer: *mut switch_timer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_timer_step(timer: *mut switch_timer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_timer_sync(timer: *mut switch_timer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_timer_check(
        timer: *mut switch_timer_t,
        step: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_timer_destroy(timer: *mut switch_timer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_init_with_bitrate(
        codec: *mut switch_codec_t,
        codec_name: *const ::std::os::raw::c_char,
        fmtp: *const ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
        rate: u32,
        ms: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
        bitrate: u32,
        flags: u32,
        codec_settings: *const switch_codec_settings_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_copy(
        codec: *mut switch_codec_t,
        new_codec: *mut switch_codec_t,
        codec_settings: *const switch_codec_settings_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_parse_fmtp(
        codec_name: *const ::std::os::raw::c_char,
        fmtp: *const ::std::os::raw::c_char,
        rate: u32,
        codec_fmtp: *mut switch_codec_fmtp_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_reset(codec: *mut switch_codec_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_encode(
        codec: *mut switch_codec_t,
        other_codec: *mut switch_codec_t,
        decoded_data: *mut ::std::os::raw::c_void,
        decoded_data_len: u32,
        decoded_rate: u32,
        encoded_data: *mut ::std::os::raw::c_void,
        encoded_data_len: *mut u32,
        encoded_rate: *mut u32,
        flag: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_decode(
        codec: *mut switch_codec_t,
        other_codec: *mut switch_codec_t,
        encoded_data: *mut ::std::os::raw::c_void,
        encoded_data_len: u32,
        encoded_rate: u32,
        decoded_data: *mut ::std::os::raw::c_void,
        decoded_data_len: *mut u32,
        decoded_rate: *mut u32,
        flag: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_encode_video(
        codec: *mut switch_codec_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_control(
        codec: *mut switch_codec_t,
        cmd: switch_codec_control_command_t,
        ctype: switch_codec_control_type_t,
        cmd_data: *mut ::std::os::raw::c_void,
        atype: switch_codec_control_type_t,
        cmd_arg: *mut ::std::os::raw::c_void,
        rtype: *mut switch_codec_control_type_t,
        ret_data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_decode_video(
        codec: *mut switch_codec_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_destroy(codec: *mut switch_codec_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_read_codec(
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_real_read_codec(
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_unset_read_codec(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_unset_write_codec(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_lock_codec_write(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_unlock_codec_write(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_lock_codec_read(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_unlock_codec_read(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_get_read_impl(
        session: *mut switch_core_session_t,
        impp: *mut switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_real_read_impl(
        session: *mut switch_core_session_t,
        impp: *mut switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_write_impl(
        session: *mut switch_core_session_t,
        impp: *mut switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_video_read_impl(
        session: *mut switch_core_session_t,
        impp: *mut switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_video_write_impl(
        session: *mut switch_core_session_t,
        impp: *mut switch_codec_implementation_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_read_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_session_get_effective_read_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_session_set_write_codec(
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_write_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_session_get_effective_write_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_session_set_video_read_codec(
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_video_read_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_session_set_video_write_codec(
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_get_video_write_codec(
        session: *mut switch_core_session_t,
    ) -> *mut switch_codec_t;
}
extern "C" {
    pub fn switch_core_db_open_file(
        filename: *const ::std::os::raw::c_char,
    ) -> *mut switch_core_db_t;
}
extern "C" {
    pub fn switch_core_db_open_in_memory(
        uri: *const ::std::os::raw::c_char,
    ) -> *mut switch_core_db_t;
}
extern "C" {
    pub fn switch_core_db_persistant_execute(
        db: *mut switch_core_db_t,
        sql: *mut ::std::os::raw::c_char,
        retries: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_db_persistant_execute_trans(
        db: *mut switch_core_db_t,
        sql: *mut ::std::os::raw::c_char,
        retries: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_db_test_reactive(
        db: *mut switch_core_db_t,
        test_sql: *mut ::std::os::raw::c_char,
        drop_sql: *mut ::std::os::raw::c_char,
        reactive_sql: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_perform_file_open(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fh: *mut switch_file_handle_t,
        file_path: *const ::std::os::raw::c_char,
        channels: u32,
        rate: u32,
        flags: ::std::os::raw::c_uint,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_read(
        fh: *mut switch_file_handle_t,
        data: *mut ::std::os::raw::c_void,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_write(
        fh: *mut switch_file_handle_t,
        data: *mut ::std::os::raw::c_void,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_write_video(
        fh: *mut switch_file_handle_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_read_video(
        fh: *mut switch_file_handle_t,
        frame: *mut switch_frame_t,
        flags: switch_video_read_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_seek(
        fh: *mut switch_file_handle_t,
        cur_pos: *mut ::std::os::raw::c_uint,
        samples: i64,
        whence: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_set_string(
        fh: *mut switch_file_handle_t,
        col: switch_audio_col_t,
        string: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_get_string(
        fh: *mut switch_file_handle_t,
        col: switch_audio_col_t,
        string: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_pre_close(fh: *mut switch_file_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_handle_dup(
        oldfh: *mut switch_file_handle_t,
        newfh: *mut *mut switch_file_handle_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_close(fh: *mut switch_file_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_command(
        fh: *mut switch_file_handle_t,
        command: switch_file_command_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_truncate(fh: *mut switch_file_handle_t, offset: i64)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_core_file_has_video(
        fh: *mut switch_file_handle_t,
        CHECK_OPEN: switch_bool_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_speech_open(
        sh: *mut switch_speech_handle_t,
        module_name: *const ::std::os::raw::c_char,
        voice_name: *const ::std::os::raw::c_char,
        rate: ::std::os::raw::c_uint,
        interval: ::std::os::raw::c_uint,
        channels: ::std::os::raw::c_uint,
        flags: *mut switch_speech_flag_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_speech_feed_tts(
        sh: *mut switch_speech_handle_t,
        text: *const ::std::os::raw::c_char,
        flags: *mut switch_speech_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_speech_flush_tts(sh: *mut switch_speech_handle_t);
}
extern "C" {
    pub fn switch_core_speech_text_param_tts(
        sh: *mut switch_speech_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_speech_numeric_param_tts(
        sh: *mut switch_speech_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_speech_float_param_tts(
        sh: *mut switch_speech_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: f64,
    );
}
extern "C" {
    pub fn switch_core_speech_read_tts(
        sh: *mut switch_speech_handle_t,
        data: *mut ::std::os::raw::c_void,
        datalen: *mut switch_size_t,
        flags: *mut switch_speech_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_speech_close(
        sh: *mut switch_speech_handle_t,
        flags: *mut switch_speech_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_open(
        ah: *mut switch_asr_handle_t,
        module_name: *const ::std::os::raw::c_char,
        codec: *const ::std::os::raw::c_char,
        rate: ::std::os::raw::c_int,
        dest: *const ::std::os::raw::c_char,
        flags: *mut switch_asr_flag_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_close(
        ah: *mut switch_asr_handle_t,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_feed(
        ah: *mut switch_asr_handle_t,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_feed_dtmf(
        ah: *mut switch_asr_handle_t,
        dtmf: *const switch_dtmf_t,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_check_results(
        ah: *mut switch_asr_handle_t,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_get_results(
        ah: *mut switch_asr_handle_t,
        xmlstr: *mut *mut ::std::os::raw::c_char,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_get_result_headers(
        ah: *mut switch_asr_handle_t,
        headers: *mut *mut switch_event_t,
        flags: *mut switch_asr_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_load_grammar(
        ah: *mut switch_asr_handle_t,
        grammar: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_unload_grammar(
        ah: *mut switch_asr_handle_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_enable_grammar(
        ah: *mut switch_asr_handle_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_disable_grammar(
        ah: *mut switch_asr_handle_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_disable_all_grammars(ah: *mut switch_asr_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_pause(ah: *mut switch_asr_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_resume(ah: *mut switch_asr_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_start_input_timers(ah: *mut switch_asr_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_asr_text_param(
        ah: *mut switch_asr_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_asr_numeric_param(
        ah: *mut switch_asr_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_asr_float_param(
        ah: *mut switch_asr_handle_t,
        param: *mut ::std::os::raw::c_char,
        val: f64,
    );
}
extern "C" {
    pub fn switch_core_directory_open(
        dh: *mut switch_directory_handle_t,
        module_name: *mut ::std::os::raw::c_char,
        source: *mut ::std::os::raw::c_char,
        dsn: *mut ::std::os::raw::c_char,
        passwd: *mut ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_directory_query(
        dh: *mut switch_directory_handle_t,
        base: *mut ::std::os::raw::c_char,
        query: *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_directory_next(dh: *mut switch_directory_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_directory_next_pair(
        dh: *mut switch_directory_handle_t,
        var: *mut *mut ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_directory_close(dh: *mut switch_directory_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_data_channel(channel: switch_text_channel_t) -> *mut FILE;
}
extern "C" {
    pub fn switch_core_ready() -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_running() -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_ready_inbound() -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_ready_outbound() -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_flags() -> switch_core_flag_t;
}
extern "C" {
    pub fn switch_core_management_exec(
        relative_oid: *mut ::std::os::raw::c_char,
        action: switch_management_action_t,
        data: *mut ::std::os::raw::c_char,
        datalen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_set_process_privileges() -> i32;
}
extern "C" {
    pub fn set_normal_priority() -> i32;
}
extern "C" {
    pub fn set_auto_priority() -> i32;
}
extern "C" {
    pub fn set_realtime_priority() -> i32;
}
extern "C" {
    pub fn set_low_priority() -> i32;
}
extern "C" {
    pub fn change_user_group(
        user: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn switch_core_runtime_loop(bg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_core_set_console(console: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_measure_time(
        total_ms: switch_time_t,
        duration: *mut switch_core_time_duration_t,
    );
}
extern "C" {
    pub fn switch_core_uptime() -> switch_time_t;
}
extern "C" {
    pub fn switch_core_session_ctl(
        cmd: switch_session_ctl_t,
        val: *mut ::std::os::raw::c_void,
    ) -> i32;
}
extern "C" {
    pub fn switch_core_get_console() -> *mut FILE;
}
extern "C" {
    pub fn switch_core_launch_thread(
        func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut switch_thread_t,
                arg2: *mut ::std::os::raw::c_void,
            ) -> *mut ::std::os::raw::c_void,
        >,
        obj: *mut ::std::os::raw::c_void,
        pool: *mut switch_memory_pool_t,
    ) -> *mut switch_thread_t;
}
extern "C" {
    pub fn switch_core_set_globals();
}
extern "C" {
    pub fn switch_core_session_compare(
        a: *mut switch_core_session_t,
        b: *mut switch_core_session_t,
    ) -> u8;
}
extern "C" {
    pub fn switch_core_session_check_interface(
        session: *mut switch_core_session_t,
        endpoint_interface: *const switch_endpoint_interface_t,
    ) -> u8;
}
extern "C" {
    pub fn switch_core_session_set_video_read_callback(
        session: *mut switch_core_session_t,
        func: switch_core_video_thread_callback_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_video_read_callback(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_mime_index() -> *mut switch_hash_index_t;
}
extern "C" {
    pub fn switch_core_mime_ext2type(
        ext: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_mime_type2ext(
        type_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_mime_add_type(
        type_: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_create_module_interface(
        pool: *mut switch_memory_pool_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_loadable_module_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_create_interface(
        mod_: *mut switch_loadable_module_interface_t,
        iname: switch_module_interface_name_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_micro_time_now() -> switch_time_t;
}
extern "C" {
    pub fn switch_mono_micro_time_now() -> switch_time_t;
}
extern "C" {
    pub fn switch_core_memory_reclaim();
}
extern "C" {
    pub fn switch_core_memory_reclaim_events();
}
extern "C" {
    pub fn switch_core_memory_reclaim_logger();
}
extern "C" {
    pub fn switch_core_memory_reclaim_all();
}
extern "C" {
    pub fn switch_core_setrlimits();
}
extern "C" {
    pub fn switch_time_ref() -> switch_time_t;
}
extern "C" {
    pub fn switch_time_sync();
}
extern "C" {
    pub fn switch_epoch_time_now(t: *mut time_t) -> time_t;
}
extern "C" {
    pub fn switch_lookup_timezone(
        tz_name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_strftime_tz(
        tz: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        date: *mut ::std::os::raw::c_char,
        len: usize,
        thetime: switch_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_time_exp_tz_name(
        tz: *const ::std::os::raw::c_char,
        tm: *mut switch_time_exp_t,
        thetime: switch_time_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_load_network_lists(reload: switch_bool_t);
}
extern "C" {
    pub fn switch_check_network_list_ip_port_token(
        ip_str: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        list_name: *const ::std::os::raw::c_char,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_check_network_list_ip_token(
        ip_str: *const ::std::os::raw::c_char,
        list_name: *const ::std::os::raw::c_char,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_time_set_monotonic(enable: switch_bool_t);
}
extern "C" {
    pub fn switch_time_set_timerfd(enable: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_time_set_nanosleep(enable: switch_bool_t);
}
extern "C" {
    pub fn switch_time_set_matrix(enable: switch_bool_t);
}
extern "C" {
    pub fn switch_time_set_cond_yield(enable: switch_bool_t);
}
extern "C" {
    pub fn switch_time_set_use_system_time(enable: switch_bool_t);
}
extern "C" {
    pub fn switch_core_min_dtmf_duration(duration: u32) -> u32;
}
extern "C" {
    pub fn switch_core_max_dtmf_duration(duration: u32) -> u32;
}
extern "C" {
    pub fn switch_core_min_idle_cpu(new_limit: f64) -> f64;
}
extern "C" {
    pub fn switch_core_idle_cpu() -> f64;
}
extern "C" {
    pub fn switch_core_default_dtmf_duration(duration: u32) -> u32;
}
extern "C" {
    pub fn switch_console_set_complete(string: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_set_alias(string: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_system(
        cmd: *const ::std::os::raw::c_char,
        wait: switch_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_stream_system(
        cmd: *const ::std::os::raw::c_char,
        stream: *mut switch_stream_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cond_yield(t: switch_interval_time_t);
}
extern "C" {
    pub fn switch_cond_next();
}
extern "C" {
    pub fn switch_core_chat_send_args(
        dest_proto: *const ::std::os::raw::c_char,
        proto: *const ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        to: *const ::std::os::raw::c_char,
        subject: *const ::std::os::raw::c_char,
        body: *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        blocking: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_chat_send(
        dest_proto: *const ::std::os::raw::c_char,
        message_event: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_chat_deliver(
        dest_proto: *const ::std::os::raw::c_char,
        message_event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_preprocess_session(
        session: *mut switch_core_session_t,
        cmds: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_sqldb_pause();
}
extern "C" {
    pub fn switch_core_sqldb_resume();
}
pub type switch_core_db_event_callback_func_t = ::std::option::Option<
    unsafe extern "C" fn(
        pArg: *mut ::std::os::raw::c_void,
        event: *mut switch_event_t,
    ) -> ::std::os::raw::c_int,
>;
impl cache_db_flag_t {
    pub const CDF_INUSE: cache_db_flag_t = cache_db_flag_t(1);
}
impl cache_db_flag_t {
    pub const CDF_PRUNE: cache_db_flag_t = cache_db_flag_t(2);
}
impl cache_db_flag_t {
    pub const CDF_NONEXPIRING: cache_db_flag_t = cache_db_flag_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct cache_db_flag_t(pub ::std::os::raw::c_uint);
impl switch_cache_db_handle_type_t {
    pub const SCDB_TYPE_CORE_DB: switch_cache_db_handle_type_t = switch_cache_db_handle_type_t(0);
}
impl switch_cache_db_handle_type_t {
    pub const SCDB_TYPE_ODBC: switch_cache_db_handle_type_t = switch_cache_db_handle_type_t(1);
}
impl switch_cache_db_handle_type_t {
    pub const SCDB_TYPE_DATABASE_INTERFACE: switch_cache_db_handle_type_t =
        switch_cache_db_handle_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_cache_db_handle_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub union switch_cache_db_native_handle_t {
    pub core_db_dbh: *mut switch_coredb_handle_t,
    pub odbc_dbh: *mut switch_odbc_handle_t,
    pub database_interface_dbh: *mut switch_database_interface_handle_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_cache_db_core_db_options_t {
    pub db_path: *mut ::std::os::raw::c_char,
    pub in_memory: switch_bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_cache_db_odbc_options_t {
    pub dsn: *mut ::std::os::raw::c_char,
    pub user: *mut ::std::os::raw::c_char,
    pub pass: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_cache_db_database_interface_options_t {
    pub original_dsn: *const ::std::os::raw::c_char,
    pub connection_string: *mut ::std::os::raw::c_char,
    pub prefix: [::std::os::raw::c_char; 16usize],
    pub database_interface: *mut switch_database_interface_t,
    pub make_module_no_unloadable: switch_bool_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union switch_cache_db_connection_options_t {
    pub core_db_options: switch_cache_db_core_db_options_t,
    pub odbc_options: switch_cache_db_odbc_options_t,
    pub database_interface_options: switch_cache_db_database_interface_options_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_cache_db_handle {
    _unused: [u8; 0],
}
pub type switch_cache_db_handle_t = switch_cache_db_handle;
extern "C" {
    pub fn switch_cache_db_get_type(
        dbh: *mut switch_cache_db_handle_t,
    ) -> switch_cache_db_handle_type_t;
}
extern "C" {
    pub fn switch_cache_db_dismiss_db_handle(dbh: *mut *mut switch_cache_db_handle_t);
}
extern "C" {
    pub fn switch_cache_db_release_db_handle(dbh: *mut *mut switch_cache_db_handle_t);
}
extern "C" {
    pub fn _switch_cache_db_get_db_handle(
        dbh: *mut *mut switch_cache_db_handle_t,
        type_: switch_cache_db_handle_type_t,
        connection_options: *mut switch_cache_db_connection_options_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn _switch_cache_db_get_db_handle_dsn_ex(
        dbh: *mut *mut switch_cache_db_handle_t,
        dsn: *const ::std::os::raw::c_char,
        make_module_no_unloadable: switch_bool_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn _switch_cache_db_get_db_handle_dsn(
        dbh: *mut *mut switch_cache_db_handle_t,
        dsn: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_create_schema(
        dbh: *mut switch_cache_db_handle_t,
        sql: *mut ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_execute_sql2str(
        dbh: *mut switch_cache_db_handle_t,
        sql: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
        len: usize,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_cache_db_execute_sql(
        dbh: *mut switch_cache_db_handle_t,
        sql: *mut ::std::os::raw::c_char,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_execute_sql_callback(
        dbh: *mut switch_cache_db_handle_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_execute_sql_callback_err(
        dbh: *mut switch_cache_db_handle_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        err_callback: switch_core_db_err_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_affected_rows(
        dbh: *mut switch_cache_db_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cache_db_load_extension(
        dbh: *mut switch_cache_db_handle_t,
        extension: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cache_db_status(stream: *mut switch_stream_handle_t);
}
extern "C" {
    pub fn _switch_core_db_handle(
        dbh: *mut *mut switch_cache_db_handle_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_test_reactive(
        db: *mut switch_cache_db_handle_t,
        test_sql: *const ::std::os::raw::c_char,
        drop_sql: *const ::std::os::raw::c_char,
        reactive_sql: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_cache_db_test_reactive_ex(
        db: *mut switch_cache_db_handle_t,
        test_sql: *const ::std::os::raw::c_char,
        drop_sql: *const ::std::os::raw::c_char,
        reactive_sql: *const ::std::os::raw::c_char,
        row_size_limited_reactive_sql: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_cache_db_persistant_execute(
        dbh: *mut switch_cache_db_handle_t,
        sql: *const ::std::os::raw::c_char,
        retries: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_persistant_execute_trans_full(
        dbh: *mut switch_cache_db_handle_t,
        sql: *mut ::std::os::raw::c_char,
        retries: u32,
        pre_trans_execute: *const ::std::os::raw::c_char,
        post_trans_execute: *const ::std::os::raw::c_char,
        inner_pre_trans_execute: *const ::std::os::raw::c_char,
        inner_post_trans_execute: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_database_interface_flush_handles(
        database_interface: *mut switch_database_interface_t,
    );
}
extern "C" {
    pub fn switch_core_check_core_db_dsn() -> switch_status_t;
}
extern "C" {
    pub fn switch_database_available(dsn: *mut ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_set_signal_handlers();
}
extern "C" {
    pub fn switch_core_debug_level() -> u32;
}
extern "C" {
    pub fn switch_core_sps() -> i32;
}
extern "C" {
    pub fn switch_core_sps_last() -> i32;
}
extern "C" {
    pub fn switch_core_sps_peak() -> i32;
}
extern "C" {
    pub fn switch_core_sps_peak_fivemin() -> i32;
}
extern "C" {
    pub fn switch_core_sessions_peak() -> i32;
}
extern "C" {
    pub fn switch_core_sessions_peak_fivemin() -> i32;
}
extern "C" {
    pub fn switch_cache_db_flush_handles();
}
extern "C" {
    pub fn switch_core_banner() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_in_thread(session: *mut switch_core_session_t) -> switch_bool_t;
}
extern "C" {
    pub fn switch_default_ptime(name: *const ::std::os::raw::c_char, number: u32) -> u32;
}
extern "C" {
    pub fn switch_default_rate(name: *const ::std::os::raw::c_char, number: u32) -> u32;
}
extern "C" {
    pub fn switch_core_max_audio_channels(limit: u32) -> u32;
}
extern "C" {
    pub fn switch_core_add_registration(
        user: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
        url: *const ::std::os::raw::c_char,
        expires: u32,
        network_ip: *const ::std::os::raw::c_char,
        network_port: *const ::std::os::raw::c_char,
        network_proto: *const ::std::os::raw::c_char,
        metadata: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_del_registration(
        user: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_expire_registration(force: ::std::os::raw::c_int) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_get_rtp_port_range_start_port() -> u16;
}
extern "C" {
    pub fn switch_core_get_rtp_port_range_end_port() -> u16;
}
extern "C" {
    pub fn switch_say_file_handle_get_variable(
        sh: *mut switch_say_file_handle_t,
        var: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_say_file_handle_get_path(
        sh: *mut switch_say_file_handle_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_say_file_handle_detach_path(
        sh: *mut switch_say_file_handle_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_say_file_handle_destroy(sh: *mut *mut switch_say_file_handle_t);
}
extern "C" {
    pub fn switch_say_file_handle_create(
        sh: *mut *mut switch_say_file_handle_t,
        ext: *const ::std::os::raw::c_char,
        var_event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_say_file(
        sh: *mut switch_say_file_handle_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_max_file_desc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_close_extra_files(
        keep: *mut ::std::os::raw::c_int,
        keep_ttl: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_thread_set_cpu_affinity(cpu: ::std::os::raw::c_int) -> switch_status_t;
}
extern "C" {
    pub fn switch_os_yield();
}
extern "C" {
    pub fn switch_core_get_stacksizes(
        cur: *mut switch_size_t,
        max: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_gen_encoded_silence(
        data: *mut ::std::os::raw::c_uchar,
        read_impl: *const switch_codec_implementation_t,
        len: switch_size_t,
    );
}
extern "C" {
    pub fn switch_core_dbtype() -> switch_cache_db_handle_type_t;
}
extern "C" {
    pub fn switch_core_sql_exec(sql: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn switch_core_recovery_recover(
        technology: *const ::std::os::raw::c_char,
        profile_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_recovery_untrack(session: *mut switch_core_session_t, force: switch_bool_t);
}
extern "C" {
    pub fn switch_core_recovery_track(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_recovery_flush(
        technology: *const ::std::os::raw::c_char,
        profile_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_sql_queue_manager_pause(
        qm: *mut switch_sql_queue_manager_t,
        flush: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_sql_queue_manager_resume(qm: *mut switch_sql_queue_manager_t);
}
extern "C" {
    pub fn switch_sql_queue_manager_size(
        qm: *mut switch_sql_queue_manager_t,
        index: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_sql_queue_manager_push_confirm(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        pos: u32,
        dup: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_push(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        pos: u32,
        dup: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_destroy(
        qmp: *mut *mut switch_sql_queue_manager_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_init_name(
        name: *const ::std::os::raw::c_char,
        qmp: *mut *mut switch_sql_queue_manager_t,
        numq: u32,
        dsn: *const ::std::os::raw::c_char,
        max_trans: u32,
        pre_trans_execute: *const ::std::os::raw::c_char,
        post_trans_execute: *const ::std::os::raw::c_char,
        inner_pre_trans_execute: *const ::std::os::raw::c_char,
        inner_post_trans_execute: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_start(qm: *mut switch_sql_queue_manager_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_stop(qm: *mut switch_sql_queue_manager_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_cache_db_execute_sql_event_callback(
        dbh: *mut switch_cache_db_handle_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_event_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_sql_queue_manager_execute_sql_callback(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_sql_queue_manager_execute_sql_callback_err(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        err_callback: switch_core_db_err_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_sql_queue_manager_execute_sql_event_callback(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_event_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_sql_queue_manager_execute_sql_event_callback_err(
        qm: *mut switch_sql_queue_manager_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_event_callback_func_t,
        err_callback: switch_core_db_err_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_fork() -> pid_t;
}
extern "C" {
    pub fn switch_core_gen_certs(prefix: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_check_dtls_pem(file: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_cert_gen_fingerprint(
        prefix: *const ::std::os::raw::c_char,
        fp: *mut dtls_fingerprint_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_cert_expand_fingerprint(
        fp: *mut dtls_fingerprint_t,
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_cert_verify(fp: *mut dtls_fingerprint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _switch_core_session_request_video_refresh(
        session: *mut switch_core_session_t,
        force: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_send_and_request_video_refresh(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_stream_system_fork(
        cmd: *const ::std::os::raw::c_char,
        stream: *mut switch_stream_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_spawn(
        cmd: *const ::std::os::raw::c_char,
        wait: switch_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_stream_spawn(
        cmd: *const ::std::os::raw::c_char,
        shell: switch_bool_t,
        wait: switch_bool_t,
        stream: *mut switch_stream_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_session_debug_pool(stream: *mut switch_stream_handle_t);
}
extern "C" {
    pub fn switch_core_session_override_io_routines(
        session: *mut switch_core_session_t,
        ior: *mut switch_io_routines_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_version_major() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_minor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_micro() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_revision() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_revision_human() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_full() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_version_full_human() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_autobind_cpu();
}
extern "C" {
    pub fn switch_core_session_start_text_thread(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_get_event_channel_key_separator() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_log_node_t {
    pub data: *mut ::std::os::raw::c_char,
    pub file: [::std::os::raw::c_char; 80usize],
    pub line: u32,
    pub func: [::std::os::raw::c_char; 80usize],
    pub level: switch_log_level_t,
    pub timestamp: switch_time_t,
    pub content: *mut ::std::os::raw::c_char,
    pub userdata: *mut ::std::os::raw::c_char,
    pub channel: switch_text_channel_t,
    pub slevel: switch_log_level_t,
    pub tags: *mut switch_event_t,
    pub sequence: i64,
    pub meta: *mut cJSON,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_log_json_format_item_t {
    pub name: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_log_json_format_t {
    pub version: switch_log_json_format_item_t,
    pub host: switch_log_json_format_item_t,
    pub timestamp: switch_log_json_format_item_t,
    pub level: switch_log_json_format_item_t,
    pub ident: switch_log_json_format_item_t,
    pub pid: switch_log_json_format_item_t,
    pub uuid: switch_log_json_format_item_t,
    pub file: switch_log_json_format_item_t,
    pub line: switch_log_json_format_item_t,
    pub function: switch_log_json_format_item_t,
    pub full_message: switch_log_json_format_item_t,
    pub short_message: switch_log_json_format_item_t,
    pub custom_field_prefix: *const ::std::os::raw::c_char,
    pub timestamp_divisor: f64,
    pub sequence: switch_log_json_format_item_t,
}
pub type switch_log_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        node: *const switch_log_node_t,
        level: switch_log_level_t,
    ) -> switch_status_t,
>;
extern "C" {
    pub fn switch_log_node_to_json(
        node: *const switch_log_node_t,
        log_level: ::std::os::raw::c_int,
        json_format: *mut switch_log_json_format_t,
        chan_vars: *mut switch_event_t,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn switch_log_init(
        pool: *mut switch_memory_pool_t,
        colorize: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_log_shutdown() -> switch_status_t;
}
extern "C" {
    pub fn switch_log_printf(
        channel: switch_text_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        userdata: *const ::std::os::raw::c_char,
        level: switch_log_level_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_log_vprintf(
        channel: switch_text_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        userdata: *const ::std::os::raw::c_char,
        level: switch_log_level_t,
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
extern "C" {
    pub fn switch_log_meta_printf(
        channel: switch_text_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        userdata: *const ::std::os::raw::c_char,
        level: switch_log_level_t,
        meta: *mut *mut cJSON,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_log_meta_vprintf(
        channel: switch_text_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        userdata: *const ::std::os::raw::c_char,
        level: switch_log_level_t,
        meta: *mut *mut cJSON,
        fmt: *const ::std::os::raw::c_char,
        ap: va_list,
    );
}
extern "C" {
    pub fn switch_log_bind_logger(
        function: switch_log_function_t,
        level: switch_log_level_t,
        is_console: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_log_unbind_logger(function: switch_log_function_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_log_level2str(level: switch_log_level_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_log_str2level(str_: *const ::std::os::raw::c_char) -> switch_log_level_t;
}
extern "C" {
    pub fn switch_log_str2mask(str_: *const ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn switch_log_node_dup(node: *const switch_log_node_t) -> *mut switch_log_node_t;
}
extern "C" {
    pub fn switch_log_node_free(pnode: *mut *mut switch_log_node_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_audio_resampler_t {
    pub resampler: *mut ::std::os::raw::c_void,
    pub from_rate: ::std::os::raw::c_int,
    pub to_rate: ::std::os::raw::c_int,
    pub factor: f64,
    pub rfactor: f64,
    pub to: *mut i16,
    pub to_len: u32,
    pub to_size: u32,
    pub channels: ::std::os::raw::c_int,
}
extern "C" {
    pub fn switch_resample_perform_create(
        new_resampler: *mut *mut switch_audio_resampler_t,
        from_rate: u32,
        to_rate: u32,
        to_size: u32,
        quality: ::std::os::raw::c_int,
        channels: u32,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_resample_destroy(resampler: *mut *mut switch_audio_resampler_t);
}
extern "C" {
    pub fn switch_resample_process(
        resampler: *mut switch_audio_resampler_t,
        src: *mut i16,
        srclen: u32,
    ) -> u32;
}
extern "C" {
    pub fn switch_float_to_short(
        f: *mut f32,
        s: *mut ::std::os::raw::c_short,
        len: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_char_to_float(
        c: *mut ::std::os::raw::c_char,
        f: *mut f32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_float_to_char(
        f: *mut f32,
        c: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_short_to_float(
        s: *mut ::std::os::raw::c_short,
        f: *mut f32,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_swap_linear(buf: *mut i16, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_generate_sln_silence(data: *mut i16, samples: u32, channels: u32, divisor: u32);
}
extern "C" {
    pub fn switch_change_sln_volume(data: *mut i16, samples: u32, vol: i32);
}
extern "C" {
    pub fn switch_change_sln_volume_granular(data: *mut i16, samples: u32, vol: i32);
}
extern "C" {
    pub fn switch_merge_sln(
        data: *mut i16,
        samples: u32,
        other_data: *mut i16,
        other_samples: u32,
        channels: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn switch_unmerge_sln(
        data: *mut i16,
        samples: u32,
        other_data: *mut i16,
        other_samples: u32,
        channels: ::std::os::raw::c_int,
    ) -> u32;
}
extern "C" {
    pub fn switch_mux_channels(
        data: *mut i16,
        samples: switch_size_t,
        orig_channels: u32,
        channels: u32,
    );
}
extern "C" {
    pub fn switch_agc_set(
        agc: *mut switch_agc_t,
        energy_avg: u32,
        low_energy_point: u32,
        margin: u32,
        change_factor: u32,
        period_len: u32,
    );
}
extern "C" {
    pub fn switch_agc_create(
        agcP: *mut *mut switch_agc_t,
        energy_avg: u32,
        low_energy_point: u32,
        margin: u32,
        change_factor: u32,
        period_len: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_agc_destroy(agcP: *mut *mut switch_agc_t);
}
extern "C" {
    pub fn switch_agc_feed(
        agc: *mut switch_agc_t,
        data: *mut i16,
        samples: u32,
        channels: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_agc_set_energy_avg(agc: *mut switch_agc_t, energy_avg: u32);
}
extern "C" {
    pub fn switch_agc_set_energy_low(agc: *mut switch_agc_t, low_energy_point: u32);
}
extern "C" {
    pub fn switch_agc_set_token(agc: *mut switch_agc_t, token: *const ::std::os::raw::c_char);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_INIT: switch_state_handler_name_t = switch_state_handler_name_t(0);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_ROUTING: switch_state_handler_name_t = switch_state_handler_name_t(1);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_EXECUTE: switch_state_handler_name_t = switch_state_handler_name_t(2);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_HANGUP: switch_state_handler_name_t = switch_state_handler_name_t(3);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_EXCHANGE_MEDIA: switch_state_handler_name_t =
        switch_state_handler_name_t(4);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_SOFT_EXECUTE: switch_state_handler_name_t =
        switch_state_handler_name_t(5);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_CONSUME_MEDIA: switch_state_handler_name_t =
        switch_state_handler_name_t(6);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_HIBERNATE: switch_state_handler_name_t = switch_state_handler_name_t(7);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_RESET: switch_state_handler_name_t = switch_state_handler_name_t(8);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_PARK: switch_state_handler_name_t = switch_state_handler_name_t(9);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_REPORTING: switch_state_handler_name_t =
        switch_state_handler_name_t(10);
}
impl switch_state_handler_name_t {
    pub const SWITCH_SHN_ON_DESTROY: switch_state_handler_name_t = switch_state_handler_name_t(11);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_state_handler_name_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_state_handler_table {
    pub on_init: switch_state_handler_t,
    pub on_routing: switch_state_handler_t,
    pub on_execute: switch_state_handler_t,
    pub on_hangup: switch_state_handler_t,
    pub on_exchange_media: switch_state_handler_t,
    pub on_soft_execute: switch_state_handler_t,
    pub on_consume_media: switch_state_handler_t,
    pub on_hibernate: switch_state_handler_t,
    pub on_reset: switch_state_handler_t,
    pub on_park: switch_state_handler_t,
    pub on_reporting: switch_state_handler_t,
    pub on_destroy: switch_state_handler_t,
    pub flags: ::std::os::raw::c_int,
    pub padding: [*mut ::std::os::raw::c_void; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_stream_handle {
    pub read_function: switch_stream_handle_read_function_t,
    pub write_function: switch_stream_handle_write_function_t,
    pub raw_write_function: switch_stream_handle_raw_write_function_t,
    pub data: *mut ::std::os::raw::c_void,
    pub end: *mut ::std::os::raw::c_void,
    pub data_size: switch_size_t,
    pub data_len: switch_size_t,
    pub alloc_len: switch_size_t,
    pub alloc_chunk: switch_size_t,
    pub param_event: *mut switch_event_t,
}
pub type switch_io_outgoing_channel_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_event_t,
        arg3: *mut switch_caller_profile_t,
        arg4: *mut *mut switch_core_session_t,
        arg5: *mut *mut switch_memory_pool_t,
        arg6: switch_originate_flag_t,
        arg7: *mut switch_call_cause_t,
    ) -> switch_call_cause_t,
>;
pub type switch_io_read_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_write_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_kill_channel_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_send_dtmf_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *const switch_dtmf_t,
    ) -> switch_status_t,
>;
pub type switch_io_receive_message_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_core_session_message_t,
    ) -> switch_status_t,
>;
pub type switch_io_receive_event_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_event_t,
    ) -> switch_status_t,
>;
pub type switch_io_state_change_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t) -> switch_status_t,
>;
pub type switch_io_state_run_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t) -> switch_status_t,
>;
pub type switch_io_read_video_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_write_video_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_read_text_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_write_text_frame_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_io_get_jb_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: switch_media_type_t,
    ) -> *mut switch_jb_t,
>;
impl switch_io_routine_name_t {
    pub const SWITCH_IO_OUTGOING_CHANNEL: switch_io_routine_name_t = switch_io_routine_name_t(0);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_READ_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(1);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_WRITE_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(2);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_KILL_CHANNEL: switch_io_routine_name_t = switch_io_routine_name_t(3);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_SEND_DTMF: switch_io_routine_name_t = switch_io_routine_name_t(4);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_RECEIVE_MESSAGE: switch_io_routine_name_t = switch_io_routine_name_t(5);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_RECEIVE_EVENT: switch_io_routine_name_t = switch_io_routine_name_t(6);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_STATE_CHANGE: switch_io_routine_name_t = switch_io_routine_name_t(7);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_READ_VIDEO_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(8);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_WRITE_VIDEO_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(9);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_READ_TEXT_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(10);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_WRITE_TEXT_FRAME: switch_io_routine_name_t = switch_io_routine_name_t(11);
}
impl switch_io_routine_name_t {
    pub const SWITCH_IO_GET_JB: switch_io_routine_name_t = switch_io_routine_name_t(12);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_io_routine_name_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_routines {
    pub outgoing_channel: switch_io_outgoing_channel_t,
    pub read_frame: switch_io_read_frame_t,
    pub write_frame: switch_io_write_frame_t,
    pub kill_channel: switch_io_kill_channel_t,
    pub send_dtmf: switch_io_send_dtmf_t,
    pub receive_message: switch_io_receive_message_t,
    pub receive_event: switch_io_receive_event_t,
    pub state_change: switch_io_state_change_t,
    pub read_video_frame: switch_io_read_video_frame_t,
    pub write_video_frame: switch_io_write_video_frame_t,
    pub read_text_frame: switch_io_read_text_frame_t,
    pub write_text_frame: switch_io_write_text_frame_t,
    pub state_run: switch_io_state_run_t,
    pub get_jb: switch_io_get_jb_t,
    pub padding: [*mut ::std::os::raw::c_void; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_endpoint_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub io_routines: *mut switch_io_routines_t,
    pub state_handler: *mut switch_state_handler_table_t,
    pub private_info: *mut ::std::os::raw::c_void,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_endpoint_interface,
    pub recover_callback: switch_core_recover_callback_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_timer {
    pub interval: ::std::os::raw::c_int,
    pub flags: u32,
    pub samples: ::std::os::raw::c_uint,
    pub samplecount: u32,
    pub last_samplecount: u32,
    pub timer_interface: *mut switch_timer_interface_t,
    pub memory_pool: *mut switch_memory_pool_t,
    pub private_info: *mut ::std::os::raw::c_void,
    pub diff: switch_size_t,
    pub start: switch_time_t,
    pub tick: u64,
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_INIT: switch_timer_func_name_t = switch_timer_func_name_t(0);
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_NEXT: switch_timer_func_name_t = switch_timer_func_name_t(1);
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_STEP: switch_timer_func_name_t = switch_timer_func_name_t(2);
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_SYNC: switch_timer_func_name_t = switch_timer_func_name_t(3);
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_CHECK: switch_timer_func_name_t = switch_timer_func_name_t(4);
}
impl switch_timer_func_name_t {
    pub const SWITCH_TIMER_FUNC_TIMER_DESTROY: switch_timer_func_name_t =
        switch_timer_func_name_t(5);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_timer_func_name_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_timer_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub timer_init:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_timer_t) -> switch_status_t>,
    pub timer_next:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_timer_t) -> switch_status_t>,
    pub timer_step:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_timer_t) -> switch_status_t>,
    pub timer_sync:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_timer_t) -> switch_status_t>,
    pub timer_check: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut switch_timer_t, arg2: switch_bool_t) -> switch_status_t,
    >,
    pub timer_destroy:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut switch_timer_t) -> switch_status_t>,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_timer_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_dialplan_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub hunt_function: switch_dialplan_hunt_function_t,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_dialplan_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_file_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub file_open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            file_path: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub file_close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut switch_file_handle_t) -> switch_status_t,
    >,
    pub file_truncate: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut switch_file_handle_t, offset: i64) -> switch_status_t,
    >,
    pub file_read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            data: *mut ::std::os::raw::c_void,
            len: *mut switch_size_t,
        ) -> switch_status_t,
    >,
    pub file_write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            data: *mut ::std::os::raw::c_void,
            len: *mut switch_size_t,
        ) -> switch_status_t,
    >,
    pub file_read_video: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            frame: *mut switch_frame_t,
            flags: switch_video_read_flag_t,
        ) -> switch_status_t,
    >,
    pub file_write_video: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            frame: *mut switch_frame_t,
        ) -> switch_status_t,
    >,
    pub file_seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_file_handle_t,
            cur_pos: *mut ::std::os::raw::c_uint,
            samples: i64,
            whence: ::std::os::raw::c_int,
        ) -> switch_status_t,
    >,
    pub file_set_string: ::std::option::Option<
        unsafe extern "C" fn(
            fh: *mut switch_file_handle_t,
            col: switch_audio_col_t,
            string: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub file_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            fh: *mut switch_file_handle_t,
            col: switch_audio_col_t,
            string: *mut *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub file_pre_close: ::std::option::Option<
        unsafe extern "C" fn(fh: *mut switch_file_handle_t) -> switch_status_t,
    >,
    pub file_command: ::std::option::Option<
        unsafe extern "C" fn(
            fh: *mut switch_file_handle_t,
            command: switch_file_command_t,
        ) -> switch_status_t,
    >,
    pub extens: *mut *mut ::std::os::raw::c_char,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_file_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_file_handle {
    pub file_interface: *mut switch_file_interface_t,
    pub flags: u32,
    pub fd: *mut switch_file_t,
    pub samples: ::std::os::raw::c_uint,
    pub samplerate: u32,
    pub native_rate: u32,
    pub channels: u32,
    pub real_channels: u32,
    pub format: ::std::os::raw::c_uint,
    pub sections: ::std::os::raw::c_uint,
    pub seekable: ::std::os::raw::c_int,
    pub sample_count: switch_size_t,
    pub speed: ::std::os::raw::c_int,
    pub memory_pool: *mut switch_memory_pool_t,
    pub prebuf: u32,
    pub interval: u32,
    pub private_info: *mut ::std::os::raw::c_void,
    pub handler: *mut ::std::os::raw::c_char,
    pub pos: i64,
    pub audio_buffer: *mut switch_buffer_t,
    pub sp_audio_buffer: *mut switch_buffer_t,
    pub thresh: u32,
    pub silence_hits: u32,
    pub offset_pos: u32,
    pub samples_in: switch_size_t,
    pub samples_out: switch_size_t,
    pub vol: i32,
    pub volgranular: i32,
    pub resampler: *mut switch_audio_resampler_t,
    pub buffer: *mut switch_buffer_t,
    pub dbuf: *mut switch_byte_t,
    pub dbuflen: switch_size_t,
    pub pre_buffer: *mut switch_buffer_t,
    pub pre_buffer_data: *mut ::std::os::raw::c_uchar,
    pub pre_buffer_datalen: switch_size_t,
    pub file: *const ::std::os::raw::c_char,
    pub func: *const ::std::os::raw::c_char,
    pub line: ::std::os::raw::c_int,
    pub file_path: *mut ::std::os::raw::c_char,
    pub spool_path: *mut ::std::os::raw::c_char,
    pub prefix: *const ::std::os::raw::c_char,
    pub max_samples: ::std::os::raw::c_int,
    pub params: *mut switch_event_t,
    pub cur_channels: u32,
    pub cur_samplerate: u32,
    pub stream_name: *mut ::std::os::raw::c_char,
    pub modname: *mut ::std::os::raw::c_char,
    pub mm: switch_mm_t,
    pub flag_mutex: *mut switch_mutex_t,
    pub duration: i64,
    pub vpos: i64,
    pub muxbuf: *mut ::std::os::raw::c_void,
    pub muxlen: switch_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_asr_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub asr_open: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            codec: *const ::std::os::raw::c_char,
            rate: ::std::os::raw::c_int,
            dest: *const ::std::os::raw::c_char,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_load_grammar: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            grammar: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub asr_unload_grammar: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            name: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub asr_close: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_feed: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            data: *mut ::std::os::raw::c_void,
            len: ::std::os::raw::c_uint,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_resume: ::std::option::Option<
        unsafe extern "C" fn(ah: *mut switch_asr_handle_t) -> switch_status_t,
    >,
    pub asr_pause: ::std::option::Option<
        unsafe extern "C" fn(ah: *mut switch_asr_handle_t) -> switch_status_t,
    >,
    pub asr_check_results: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_get_results: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            xmlstr: *mut *mut ::std::os::raw::c_char,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_get_result_headers: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            headers: *mut *mut switch_event_t,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
    pub asr_start_input_timers: ::std::option::Option<
        unsafe extern "C" fn(ah: *mut switch_asr_handle_t) -> switch_status_t,
    >,
    pub asr_text_param: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: *const ::std::os::raw::c_char,
        ),
    >,
    pub asr_numeric_param: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: ::std::os::raw::c_int,
        ),
    >,
    pub asr_float_param: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: f64,
        ),
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_asr_interface,
    pub asr_enable_grammar: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            name: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub asr_disable_grammar: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            name: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub asr_disable_all_grammars: ::std::option::Option<
        unsafe extern "C" fn(ah: *mut switch_asr_handle_t) -> switch_status_t,
    >,
    pub asr_feed_dtmf: ::std::option::Option<
        unsafe extern "C" fn(
            ah: *mut switch_asr_handle_t,
            dtmf: *const switch_dtmf_t,
            flags: *mut switch_asr_flag_t,
        ) -> switch_status_t,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_asr_handle {
    pub asr_interface: *mut switch_asr_interface_t,
    pub flags: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub codec: *mut ::std::os::raw::c_char,
    pub rate: u32,
    pub grammar: *mut ::std::os::raw::c_char,
    pub param: *mut ::std::os::raw::c_char,
    pub memory_pool: *mut switch_memory_pool_t,
    pub buffer: *mut switch_buffer_t,
    pub dbuf: *mut switch_byte_t,
    pub dbuflen: switch_size_t,
    pub resampler: *mut switch_audio_resampler_t,
    pub samplerate: u32,
    pub native_rate: u32,
    pub private_info: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_speech_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub speech_open: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            voice_name: *const ::std::os::raw::c_char,
            rate: ::std::os::raw::c_int,
            channels: ::std::os::raw::c_int,
            flags: *mut switch_speech_flag_t,
        ) -> switch_status_t,
    >,
    pub speech_close: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut switch_speech_handle_t,
            flags: *mut switch_speech_flag_t,
        ) -> switch_status_t,
    >,
    pub speech_feed_tts: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            text: *mut ::std::os::raw::c_char,
            flags: *mut switch_speech_flag_t,
        ) -> switch_status_t,
    >,
    pub speech_read_tts: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            data: *mut ::std::os::raw::c_void,
            datalen: *mut switch_size_t,
            flags: *mut switch_speech_flag_t,
        ) -> switch_status_t,
    >,
    pub speech_flush_tts:
        ::std::option::Option<unsafe extern "C" fn(sh: *mut switch_speech_handle_t)>,
    pub speech_text_param_tts: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: *const ::std::os::raw::c_char,
        ),
    >,
    pub speech_numeric_param_tts: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: ::std::os::raw::c_int,
        ),
    >,
    pub speech_float_param_tts: ::std::option::Option<
        unsafe extern "C" fn(
            sh: *mut switch_speech_handle_t,
            param: *mut ::std::os::raw::c_char,
            val: f64,
        ),
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_speech_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_speech_handle {
    pub speech_interface: *mut switch_speech_interface_t,
    pub flags: u32,
    pub name: *mut ::std::os::raw::c_char,
    pub rate: u32,
    pub speed: u32,
    pub samples: u32,
    pub channels: u32,
    pub real_channels: u32,
    pub voice: [::std::os::raw::c_char; 80usize],
    pub engine: *mut ::std::os::raw::c_char,
    pub param: *mut ::std::os::raw::c_char,
    pub memory_pool: *mut switch_memory_pool_t,
    pub resampler: *mut switch_audio_resampler_t,
    pub buffer: *mut switch_buffer_t,
    pub dbuf: *mut switch_byte_t,
    pub dbuflen: switch_size_t,
    pub samplerate: u32,
    pub native_rate: u32,
    pub private_info: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_say_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub say_function: switch_say_callback_t,
    pub say_string_function: switch_say_string_callback_t,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_say_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_chat_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub chat_send: ::std::option::Option<
        unsafe extern "C" fn(message_event: *mut switch_event_t) -> switch_status_t,
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_chat_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_management_interface {
    pub relative_oid: *const ::std::os::raw::c_char,
    pub management_function: ::std::option::Option<
        unsafe extern "C" fn(
            relative_oid: *mut ::std::os::raw::c_char,
            action: switch_management_action_t,
            data: *mut ::std::os::raw::c_char,
            datalen: switch_size_t,
        ) -> switch_status_t,
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_management_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_limit_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub incr: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut switch_core_session_t,
            realm: *const ::std::os::raw::c_char,
            resource: *const ::std::os::raw::c_char,
            max: ::std::os::raw::c_int,
            interval: ::std::os::raw::c_int,
        ) -> switch_status_t,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            session: *mut switch_core_session_t,
            realm: *const ::std::os::raw::c_char,
            resource: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub usage: ::std::option::Option<
        unsafe extern "C" fn(
            realm: *const ::std::os::raw::c_char,
            resource: *const ::std::os::raw::c_char,
            rcount: *mut u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub reset: ::std::option::Option<unsafe extern "C" fn() -> switch_status_t>,
    pub status: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub interval_reset: ::std::option::Option<
        unsafe extern "C" fn(
            realm: *const ::std::os::raw::c_char,
            resource: *const ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_limit_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_directory_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub directory_open: ::std::option::Option<
        unsafe extern "C" fn(
            dh: *mut switch_directory_handle_t,
            source: *mut ::std::os::raw::c_char,
            dsn: *mut ::std::os::raw::c_char,
            passwd: *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub directory_close: ::std::option::Option<
        unsafe extern "C" fn(dh: *mut switch_directory_handle_t) -> switch_status_t,
    >,
    pub directory_query: ::std::option::Option<
        unsafe extern "C" fn(
            dh: *mut switch_directory_handle_t,
            base: *mut ::std::os::raw::c_char,
            query: *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub directory_next: ::std::option::Option<
        unsafe extern "C" fn(dh: *mut switch_directory_handle_t) -> switch_status_t,
    >,
    pub directory_next_pair: ::std::option::Option<
        unsafe extern "C" fn(
            dh: *mut switch_directory_handle_t,
            var: *mut *mut ::std::os::raw::c_char,
            val: *mut *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_directory_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_directory_handle {
    pub directory_interface: *mut switch_directory_interface_t,
    pub flags: u32,
    pub memory_pool: *mut switch_memory_pool_t,
    pub private_info: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_database_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub flags: u32,
    pub handle_new: ::std::option::Option<
        unsafe extern "C" fn(
            database_interface_options: switch_cache_db_database_interface_options_t,
            dih: *mut *mut switch_database_interface_handle_t,
        ) -> switch_status_t,
    >,
    pub handle_destroy: ::std::option::Option<
        unsafe extern "C" fn(dih: *mut *mut switch_database_interface_handle_t) -> switch_status_t,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(dih: *mut switch_database_interface_handle_t) -> switch_status_t,
    >,
    pub exec_detailed: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            func: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            dih: *mut switch_database_interface_handle_t,
            sql: *const ::std::os::raw::c_char,
            err: *mut *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub exec_string: ::std::option::Option<
        unsafe extern "C" fn(
            dih: *mut switch_database_interface_handle_t,
            sql: *const ::std::os::raw::c_char,
            resbuf: *mut ::std::os::raw::c_char,
            len: usize,
            err: *mut *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub sql_set_auto_commit_attr: ::std::option::Option<
        unsafe extern "C" fn(
            dih: *mut switch_database_interface_handle_t,
            on: switch_bool_t,
        ) -> switch_status_t,
    >,
    pub commit: ::std::option::Option<
        unsafe extern "C" fn(dih: *mut switch_database_interface_handle_t) -> switch_status_t,
    >,
    pub rollback: ::std::option::Option<
        unsafe extern "C" fn(dih: *mut switch_database_interface_handle_t) -> switch_status_t,
    >,
    pub callback_exec_detailed: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            func: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
            dih: *mut switch_database_interface_handle_t,
            sql: *const ::std::os::raw::c_char,
            callback: switch_core_db_callback_func_t,
            pdata: *mut ::std::os::raw::c_void,
            err: *mut *mut ::std::os::raw::c_char,
        ) -> switch_status_t,
    >,
    pub affected_rows: ::std::option::Option<
        unsafe extern "C" fn(
            dih: *mut switch_database_interface_handle_t,
            affected_rows: *mut ::std::os::raw::c_int,
        ) -> switch_status_t,
    >,
    pub prefixes: *mut *mut ::std::os::raw::c_char,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_database_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_database_interface_handle {
    pub connection_options: switch_cache_db_database_interface_options_t,
    pub handle: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_audio_codec_settings {
    pub unused: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_video_codec_settings {
    pub bandwidth: u32,
    pub width: i32,
    pub height: i32,
    pub try_hardware_encoder: u8,
    pub fps: u8,
    pub config_profile_name: [::std::os::raw::c_char; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union switch_codec_settings {
    pub audio: switch_audio_codec_settings,
    pub video: switch_video_codec_settings,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_codec_fmtp {
    pub actual_samples_per_second: u32,
    pub bits_per_second: ::std::os::raw::c_int,
    pub microseconds_per_packet: ::std::os::raw::c_int,
    pub max_ptime: ::std::os::raw::c_int,
    pub min_ptime: ::std::os::raw::c_int,
    pub stereo: ::std::os::raw::c_int,
    pub sprop_stereo: ::std::os::raw::c_int,
    pub private_info: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_picture {
    pub width: u32,
    pub height: u32,
    pub planes: [*mut u8; 4usize],
    pub stride: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_codec {
    pub codec_interface: *mut switch_codec_interface_t,
    pub implementation: *const switch_codec_implementation_t,
    pub fmtp_in: *mut ::std::os::raw::c_char,
    pub fmtp_out: *mut ::std::os::raw::c_char,
    pub flags: u32,
    pub memory_pool: *mut switch_memory_pool_t,
    pub private_info: *mut ::std::os::raw::c_void,
    pub agreed_pt: switch_payload_t,
    pub mutex: *mut switch_mutex_t,
    pub next: *mut switch_codec,
    pub session: *mut switch_core_session_t,
    pub cur_frame: *mut switch_frame_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_codec_implementation {
    pub codec_type: switch_codec_type_t,
    pub ianacode: switch_payload_t,
    pub iananame: *mut ::std::os::raw::c_char,
    pub fmtp: *mut ::std::os::raw::c_char,
    pub samples_per_second: u32,
    pub actual_samples_per_second: u32,
    pub bits_per_second: ::std::os::raw::c_int,
    pub microseconds_per_packet: ::std::os::raw::c_int,
    pub samples_per_packet: u32,
    pub decoded_bytes_per_packet: u32,
    pub encoded_bytes_per_packet: u32,
    pub number_of_channels: u8,
    pub codec_frames_per_packet: ::std::os::raw::c_int,
    pub init: switch_core_codec_init_func_t,
    pub encode: switch_core_codec_encode_func_t,
    pub decode: switch_core_codec_decode_func_t,
    pub encode_video: switch_core_codec_video_encode_func_t,
    pub decode_video: switch_core_codec_video_decode_func_t,
    pub codec_control: switch_core_codec_control_func_t,
    pub destroy: switch_core_codec_destroy_func_t,
    pub codec_id: u32,
    pub impl_id: u32,
    pub modname: *mut ::std::os::raw::c_char,
    pub next: *mut switch_codec_implementation,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_codec_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub implementations: *mut switch_codec_implementation_t,
    pub parse_fmtp: switch_core_codec_fmtp_parse_func_t,
    pub codec_id: u32,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub modname: *mut ::std::os::raw::c_char,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_codec_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_application_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub application_function: switch_application_function_t,
    pub long_desc: *const ::std::os::raw::c_char,
    pub short_desc: *const ::std::os::raw::c_char,
    pub syntax: *const ::std::os::raw::c_char,
    pub flags: u32,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_application_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_chat_application_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub chat_application_function: switch_chat_application_function_t,
    pub long_desc: *const ::std::os::raw::c_char,
    pub short_desc: *const ::std::os::raw::c_char,
    pub syntax: *const ::std::os::raw::c_char,
    pub flags: u32,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_chat_application_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_api_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub function: switch_api_function_t,
    pub syntax: *const ::std::os::raw::c_char,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_api_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_json_api_interface {
    pub interface_name: *const ::std::os::raw::c_char,
    pub desc: *const ::std::os::raw::c_char,
    pub function: switch_json_api_function_t,
    pub syntax: *const ::std::os::raw::c_char,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub reflock: *mut switch_mutex_t,
    pub parent: *mut switch_loadable_module_interface_t,
    pub next: *mut switch_json_api_interface,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_frame_geometry {
    pub w: i32,
    pub h: i32,
    pub x: i32,
    pub y: i32,
    pub z: i32,
    pub M: i32,
    pub X: i32,
}
pub type switch_frame_geometry_t = switch_frame_geometry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_frame {
    pub codec: *mut switch_codec_t,
    pub source: *const ::std::os::raw::c_char,
    pub packet: *mut ::std::os::raw::c_void,
    pub packetlen: u32,
    pub extra_data: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub datalen: u32,
    pub buflen: u32,
    pub samples: u32,
    pub rate: u32,
    pub channels: u32,
    pub payload: switch_payload_t,
    pub timestamp: u32,
    pub seq: u16,
    pub ssrc: u32,
    pub m: switch_bool_t,
    pub flags: switch_frame_flag_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub pmap: *mut payload_map_t,
    pub img: *mut switch_image_t,
    pub geometry: switch_frame_geometry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_slin_data {
    pub session: *mut switch_core_session_t,
    pub write_frame: switch_frame_t,
    pub codec: switch_codec_t,
    pub frame_data: [::std::os::raw::c_char; 8192usize],
}
impl switch_loadable_module_type_t {
    pub const SWITCH_LOADABLE_MODULE_TYPE_PRELOAD: switch_loadable_module_type_t =
        switch_loadable_module_type_t(0);
}
impl switch_loadable_module_type_t {
    pub const SWITCH_LOADABLE_MODULE_TYPE_COMMON: switch_loadable_module_type_t =
        switch_loadable_module_type_t(1);
}
impl switch_loadable_module_type_t {
    pub const SWITCH_LOADABLE_MODULE_TYPE_POSTLOAD: switch_loadable_module_type_t =
        switch_loadable_module_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_loadable_module_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_loadable_module_interface {
    pub module_name: *const ::std::os::raw::c_char,
    pub endpoint_interface: *mut switch_endpoint_interface_t,
    pub timer_interface: *mut switch_timer_interface_t,
    pub dialplan_interface: *mut switch_dialplan_interface_t,
    pub codec_interface: *mut switch_codec_interface_t,
    pub application_interface: *mut switch_application_interface_t,
    pub chat_application_interface: *mut switch_chat_application_interface_t,
    pub api_interface: *mut switch_api_interface_t,
    pub json_api_interface: *mut switch_json_api_interface_t,
    pub file_interface: *mut switch_file_interface_t,
    pub speech_interface: *mut switch_speech_interface_t,
    pub directory_interface: *mut switch_directory_interface_t,
    pub chat_interface: *mut switch_chat_interface_t,
    pub say_interface: *mut switch_say_interface_t,
    pub asr_interface: *mut switch_asr_interface_t,
    pub management_interface: *mut switch_management_interface_t,
    pub limit_interface: *mut switch_limit_interface_t,
    pub database_interface: *mut switch_database_interface_t,
    pub rwlock: *mut switch_thread_rwlock_t,
    pub refs: ::std::os::raw::c_int,
    pub pool: *mut switch_memory_pool_t,
}
extern "C" {
    pub fn switch_loadable_module_init(autoload: switch_bool_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_shutdown();
}
extern "C" {
    pub fn switch_loadable_module_get_endpoint_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_endpoint_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_codec_interface(
        name: *const ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
    ) -> *mut switch_codec_interface_t;
}
extern "C" {
    pub fn switch_parse_codec_buf(
        buf: *mut ::std::os::raw::c_char,
        interval: *mut u32,
        rate: *mut u32,
        bit: *mut u32,
        channels: *mut u32,
        modname: *mut *mut ::std::os::raw::c_char,
        fmtp: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_loadable_module_get_dialplan_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_dialplan_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_enumerate_available(
        dir_path: *const ::std::os::raw::c_char,
        callback: switch_modulename_callback_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_enumerate_loaded(
        callback: switch_modulename_callback_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_build_dynamic(
        filename: *mut ::std::os::raw::c_char,
        switch_module_load: switch_module_load_t,
        switch_module_runtime: switch_module_runtime_t,
        switch_module_shutdown: switch_module_shutdown_t,
        runtime: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_get_timer_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_timer_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_application_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_application_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_chat_application_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_chat_application_interface_t;
}
extern "C" {
    pub fn switch_core_execute_chat_app(
        message: *mut switch_event_t,
        app: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_get_api_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_api_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_json_api_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_json_api_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_file_interface(
        name: *const ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
    ) -> *mut switch_file_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_database_interface(
        name: *const ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
    ) -> *mut switch_database_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_speech_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_speech_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_asr_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_asr_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_directory_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_directory_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_chat_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_chat_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_say_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_say_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_management_interface(
        relative_oid: *const ::std::os::raw::c_char,
    ) -> *mut switch_management_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_limit_interface(
        name: *const ::std::os::raw::c_char,
    ) -> *mut switch_limit_interface_t;
}
extern "C" {
    pub fn switch_loadable_module_get_codecs(
        array: *mut *const switch_codec_implementation_t,
        arraylen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_loadable_module_get_codecs_sorted(
        array: *mut *const switch_codec_implementation_t,
        fmtp_array: *mut [::std::os::raw::c_char; 256usize],
        arraylen: ::std::os::raw::c_int,
        prefs: *mut *mut ::std::os::raw::c_char,
        preflen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_api_execute(
        cmd: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
        session: *mut switch_core_session_t,
        stream: *mut switch_stream_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_json_api_execute(
        json: *mut cJSON,
        session: *mut switch_core_session_t,
        retval: *mut *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_load_module(
        dir: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
        runtime: switch_bool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_exists(mod_: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_protect(mod_: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_loadable_module_unload_module(
        dir: *const ::std::os::raw::c_char,
        fname: *const ::std::os::raw::c_char,
        force: switch_bool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_module_load(
        module_interface: *mut *mut switch_loadable_module_interface_t,
        filename: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_module_runtime() -> switch_status_t;
}
extern "C" {
    pub fn switch_module_shutdown() -> switch_status_t;
}
extern "C" {
    pub fn switch_core_codec_next_id() -> u32;
}
extern "C" {
    pub fn switch_core_get_secondary_recover_callback(
        key: *const ::std::os::raw::c_char,
    ) -> switch_core_recover_callback_t;
}
extern "C" {
    pub fn switch_core_register_secondary_recover_callback(
        key: *const ::std::os::raw::c_char,
        cb: switch_core_recover_callback_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_unregister_secondary_recover_callback(key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn switch_console_loop();
}
extern "C" {
    pub fn switch_console_printf(
        channel: switch_text_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_console_stream_raw_write(
        handle: *mut switch_stream_handle_t,
        data: *mut u8,
        datalen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_stream_write(
        handle: *mut switch_stream_handle_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_stream_write_file_contents(
        stream: *mut switch_stream_handle_t,
        path: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_init(pool: *mut switch_memory_pool_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_shutdown() -> switch_status_t;
}
extern "C" {
    pub fn switch_console_add_complete_func(
        name: *const ::std::os::raw::c_char,
        cb: switch_console_complete_callback_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_del_complete_func(name: *const ::std::os::raw::c_char)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_console_run_complete_func(
        func: *const ::std::os::raw::c_char,
        line: *const ::std::os::raw::c_char,
        last_word: *const ::std::os::raw::c_char,
        matches: *mut *mut switch_console_callback_match_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_console_push_match_unique(
        matches: *mut *mut switch_console_callback_match_t,
        new_val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_console_push_match(
        matches: *mut *mut switch_console_callback_match_t,
        new_val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_console_free_matches(matches: *mut *mut switch_console_callback_match_t);
}
extern "C" {
    pub fn switch_console_complete(
        line: *const ::std::os::raw::c_char,
        last_word: *const ::std::os::raw::c_char,
        console_out: *mut FILE,
        stream: *mut switch_stream_handle_t,
        xml: switch_xml_t,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn switch_console_sort_matches(matches: *mut switch_console_callback_match_t);
}
extern "C" {
    pub fn switch_console_save_history();
}
extern "C" {
    pub fn switch_console_expand_alias(
        cmd: *mut ::std::os::raw::c_char,
        arg: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_console_execute(
        xcmd: *mut ::std::os::raw::c_char,
        rec: ::std::os::raw::c_int,
        istream: *mut switch_stream_handle_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_network_port_range {
    pub port: ::std::os::raw::c_int,
    pub ports: [::std::os::raw::c_int; 10usize],
    pub min_port: ::std::os::raw::c_int,
    pub max_port: ::std::os::raw::c_int,
}
pub type switch_network_port_range_t = switch_network_port_range;
pub type switch_network_port_range_p = *mut switch_network_port_range_t;
extern "C" {
    pub fn old_switch_toupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn old_switch_tolower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isalnum(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isalpha(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_iscntrl(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isgraph(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_islower(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isprint(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_ispunct(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isspace(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isupper(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_isxdigit(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ip_t {
    pub v4: u32,
    pub v6: in6_addr,
}
extern "C" {
    pub fn switch_testv6_subnet(_ip: ip_t, _net: ip_t, _mask: ip_t) -> switch_bool_t;
}
extern "C" {
    pub fn switch_print_host(
        addr: *mut switch_sockaddr_t,
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_b64_encode(
        in_: *mut ::std::os::raw::c_uchar,
        ilen: switch_size_t,
        out: *mut ::std::os::raw::c_uchar,
        olen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_b64_decode(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        olen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_amp_encode(
        s: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_fd_read_line(
        fd: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_fd_read_dline(
        fd: ::std::os::raw::c_int,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_fp_read_dline(
        fd: *mut FILE,
        buf: *mut *mut ::std::os::raw::c_char,
        len: *mut switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_frame_alloc(
        frame: *mut *mut switch_frame_t,
        size: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_dup(
        orig: *mut switch_frame_t,
        clone: *mut *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_free(frame: *mut *mut switch_frame_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_is_uint_in_range(
        str_: *const ::std::os::raw::c_char,
        from: ::std::os::raw::c_uint,
        to: ::std::os::raw::c_uint,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_is_number(str_: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_is_leading_number(str_: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_find_parameter(
        str_: *const ::std::os::raw::c_char,
        param: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_resolve_host(
        host: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_find_local_ip(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        mask: *mut ::std::os::raw::c_int,
        family: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_find_interface_ip(
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        mask: *mut ::std::os::raw::c_int,
        ifname: *const ::std::os::raw::c_char,
        family: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn get_addr(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        sa: *mut sockaddr,
        salen: socklen_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_addr6(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
        sa: *mut sockaddr_in6,
        salen: socklen_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_addr_int(sa: *mut switch_sockaddr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cmp_addr(
        sa1: *mut switch_sockaddr_t,
        sa2: *mut switch_sockaddr_t,
        ip_only: switch_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cp_addr(
        sa1: *mut switch_sockaddr_t,
        sa2: *mut switch_sockaddr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_port(sa: *mut sockaddr) -> ::std::os::raw::c_ushort;
}
impl switch_uri_flags {
    pub const SWITCH_URI_NUMERIC_HOST: switch_uri_flags = switch_uri_flags(1);
}
impl switch_uri_flags {
    pub const SWITCH_URI_NUMERIC_PORT: switch_uri_flags = switch_uri_flags(2);
}
impl switch_uri_flags {
    pub const SWITCH_URI_NO_SCOPE: switch_uri_flags = switch_uri_flags(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_uri_flags(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_build_uri(
        uri: *mut ::std::os::raw::c_char,
        size: switch_size_t,
        scheme: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        sa: *const switch_sockaddr_t,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_priority_name(priority: switch_priority_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_rfc2833_to_char(event: ::std::os::raw::c_int) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_char_to_rfc2833(key: ::std::os::raw::c_char) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn switch_str_time(in_: *const ::std::os::raw::c_char) -> switch_time_t;
}
extern "C" {
    pub fn switch_separate_string(
        buf: *mut ::std::os::raw::c_char,
        delim: ::std::os::raw::c_char,
        array: *mut *mut ::std::os::raw::c_char,
        arraylen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_separate_string_string(
        buf: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
        array: *mut *mut ::std::os::raw::c_char,
        arraylen: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_strip_spaces(
        str_: *mut ::std::os::raw::c_char,
        dup: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_strip_whitespace(
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_strip_commas(
        in_: *mut ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_strip_nonnumerics(
        in_: *mut ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_separate_paren_args(
        str_: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_stristr(
        instr: *const ::std::os::raw::c_char,
        str_: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_is_lan_addr(ip: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_replace_char(
        str_: *mut ::std::os::raw::c_char,
        from: ::std::os::raw::c_char,
        to: ::std::os::raw::c_char,
        dup: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_ast2regex(
        pat: *const ::std::os::raw::c_char,
        rbuf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_pool_strip_whitespace(
        pool: *mut switch_memory_pool_t,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_escape_char(
        pool: *mut switch_memory_pool_t,
        in_: *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
        esc: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_escape_string(
        in_: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_char,
        outlen: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_escape_string_pool(
        in_: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_socket_waitfor(
        poll: *mut switch_pollfd_t,
        ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_cut_path(in_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_string_replace(
        string: *const ::std::os::raw::c_char,
        search: *const ::std::os::raw::c_char,
        replace: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_string_match(
        string: *const ::std::os::raw::c_char,
        string_len: usize,
        search: *const ::std::os::raw::c_char,
        search_len: usize,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_strcasecmp_any(str_: *const ::std::os::raw::c_char, ...)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_util_quote_shell_arg(
        string: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_util_quote_shell_arg_pool(
        string: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_url_encode_opt(
        url: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        double_encode: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_url_encode(
        url: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_url_decode(s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_url_encode_opt(
        pool: *mut switch_memory_pool_t,
        url: *const ::std::os::raw::c_char,
        double_encode: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_url_encode(
        pool: *mut switch_memory_pool_t,
        url: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_url_encode_opt(
        session: *mut switch_core_session_t,
        url: *const ::std::os::raw::c_char,
        double_encode: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_url_encode(
        session: *mut switch_core_session_t,
        url: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_simple_email(
        to: *const ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        headers: *const ::std::os::raw::c_char,
        body: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        convert_cmd: *const ::std::os::raw::c_char,
        convert_ext: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_find_end_paren(
        s: *const ::std::os::raw::c_char,
        open: ::std::os::raw::c_char,
        close: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_parse_cidr(
        string: *const ::std::os::raw::c_char,
        ip: *mut ip_t,
        mask: *mut ip_t,
        bitp: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_network_list_create(
        list: *mut *mut switch_network_list_t,
        name: *const ::std::os::raw::c_char,
        default_type: switch_bool_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_network_list_add_cidr_token(
        list: *mut switch_network_list_t,
        cidr_str: *const ::std::os::raw::c_char,
        ok: switch_bool_t,
        token: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_network_ipv4_mapped_ipv6_addr(
        ip_str: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_network_list_add_host_mask(
        list: *mut switch_network_list_t,
        host: *const ::std::os::raw::c_char,
        mask_str: *const ::std::os::raw::c_char,
        ok: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_network_list_add_cidr_port_token(
        list: *mut switch_network_list_t,
        cidr_str: *const ::std::os::raw::c_char,
        ok: switch_bool_t,
        token: *const ::std::os::raw::c_char,
        port: switch_network_port_range_p,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_network_list_add_host_port_mask(
        list: *mut switch_network_list_t,
        host: *const ::std::os::raw::c_char,
        mask_str: *const ::std::os::raw::c_char,
        ok: switch_bool_t,
        port: switch_network_port_range_p,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_network_list_validate_ip_port_token(
        list: *mut switch_network_list_t,
        ip: u32,
        port: ::std::os::raw::c_int,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_network_list_validate_ip6_port_token(
        list: *mut switch_network_list_t,
        ip: ip_t,
        port: ::std::os::raw::c_int,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_network_list_validate_ip_token(
        list: *mut switch_network_list_t,
        ip: u32,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_network_list_validate_ip6_token(
        list: *mut switch_network_list_t,
        ip: ip_t,
        token: *mut *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_inet_pton(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_dow_int2str(val: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_dow_str2int(exp: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_dow_cmp(
        exp: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_number_cmp(
        exp: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_tod_cmp(
        exp: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_fulldate_cmp(
        exp: *const ::std::os::raw::c_char,
        ts: *mut switch_time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_split_date(
        exp: *const ::std::os::raw::c_char,
        year: *mut ::std::os::raw::c_int,
        month: *mut ::std::os::raw::c_int,
        day: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_split_time(
        exp: *const ::std::os::raw::c_char,
        hour: *mut ::std::os::raw::c_int,
        min: *mut ::std::os::raw::c_int,
        sec: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_split_user_domain(
        in_: *mut ::std::os::raw::c_char,
        user: *mut *mut ::std::os::raw::c_char,
        domain: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_calloc(nmemb: usize, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_uuid_str(
        buf: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_format_number(num: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_atoui(nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn switch_atoul(nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn switch_strerror_r(
        errnum: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: switch_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_wait_sock(
        sock: switch_os_socket_t,
        ms: u32,
        flags: switch_poll_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_wait_socklist(
        waitlist: *mut switch_waitlist_t,
        len: u32,
        ms: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_http_request_s {
    pub method: *const ::std::os::raw::c_char,
    pub uri: *const ::std::os::raw::c_char,
    pub qs: *const ::std::os::raw::c_char,
    pub host: *const ::std::os::raw::c_char,
    pub port: switch_port_t,
    pub from: *const ::std::os::raw::c_char,
    pub user_agent: *const ::std::os::raw::c_char,
    pub referer: *const ::std::os::raw::c_char,
    pub user: *const ::std::os::raw::c_char,
    pub keepalive: switch_bool_t,
    pub content_type: *const ::std::os::raw::c_char,
    pub content_length: switch_size_t,
    pub bytes_header: switch_size_t,
    pub bytes_read: switch_size_t,
    pub bytes_buffered: switch_size_t,
    pub headers: *mut switch_event_t,
    pub user_data: *mut ::std::os::raw::c_void,
    pub _buffer: *mut ::std::os::raw::c_char,
    pub _destroy_headers: switch_bool_t,
}
pub type switch_http_request_t = switch_http_request_s;
extern "C" {
    pub fn switch_http_parse_header(
        buffer: *mut ::std::os::raw::c_char,
        datalen: u32,
        request: *mut switch_http_request_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_http_free_request(request: *mut switch_http_request_t);
}
extern "C" {
    pub fn switch_http_dump_request(request: *mut switch_http_request_t);
}
extern "C" {
    pub fn switch_http_parse_qs(
        request: *mut switch_http_request_t,
        qs: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_frame_buffer_free(
        fb: *mut switch_frame_buffer_t,
        frameP: *mut *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_dup(
        fb: *mut switch_frame_buffer_t,
        orig: *mut switch_frame_t,
        clone: *mut *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_destroy(fbP: *mut *mut switch_frame_buffer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_create(
        fbP: *mut *mut switch_frame_buffer_t,
        qlen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_push(
        fb: *mut switch_frame_buffer_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_trypush(
        fb: *mut switch_frame_buffer_t,
        ptr: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_pop(
        fb: *mut switch_frame_buffer_t,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_trypop(
        fb: *mut switch_frame_buffer_t,
        ptr: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_frame_buffer_size(fb: *mut switch_frame_buffer_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_cputime {
    pub userms: i64,
    pub kernelms: i64,
}
extern "C" {
    pub fn switch_getcputime(t: *mut switch_cputime);
}
extern "C" {
    pub fn switch_html_strip(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_getpid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn switch_digest(
        digest_name: *const ::std::os::raw::c_char,
        digest: *mut *mut ::std::os::raw::c_uchar,
        input: *const ::std::os::raw::c_void,
        inputLen: switch_size_t,
        outputlen: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_digest_string(
        digest_name: *const ::std::os::raw::c_char,
        digest_str: *mut *mut ::std::os::raw::c_char,
        input: *const ::std::os::raw::c_void,
        inputLen: switch_size_t,
        outputlen: *mut ::std::os::raw::c_uint,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_must_strdup(_s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_memory_usage_stream(
        stream: *mut switch_stream_handle_t,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct profile_node_s {
    pub var: *mut ::std::os::raw::c_char,
    pub val: *mut ::std::os::raw::c_char,
    pub next: *mut profile_node_s,
}
pub type profile_node_t = profile_node_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_caller_profile {
    pub username: *const ::std::os::raw::c_char,
    pub dialplan: *const ::std::os::raw::c_char,
    pub caller_id_name: *const ::std::os::raw::c_char,
    pub caller_id_number: *const ::std::os::raw::c_char,
    pub orig_caller_id_name: *const ::std::os::raw::c_char,
    pub orig_caller_id_number: *const ::std::os::raw::c_char,
    pub callee_id_name: *const ::std::os::raw::c_char,
    pub callee_id_number: *const ::std::os::raw::c_char,
    pub caller_ton: u8,
    pub caller_numplan: u8,
    pub network_addr: *const ::std::os::raw::c_char,
    pub ani: *const ::std::os::raw::c_char,
    pub ani_ton: u8,
    pub ani_numplan: u8,
    pub aniii: *const ::std::os::raw::c_char,
    pub rdnis: *const ::std::os::raw::c_char,
    pub rdnis_ton: u8,
    pub rdnis_numplan: u8,
    pub destination_number: *mut ::std::os::raw::c_char,
    pub destination_number_ton: u8,
    pub destination_number_numplan: u8,
    pub source: *const ::std::os::raw::c_char,
    pub chan_name: *mut ::std::os::raw::c_char,
    pub uuid: *mut ::std::os::raw::c_char,
    pub context: *const ::std::os::raw::c_char,
    pub profile_index: *const ::std::os::raw::c_char,
    pub flags: switch_caller_profile_flag_t,
    pub originator_caller_profile: *mut switch_caller_profile,
    pub originatee_caller_profile: *mut switch_caller_profile,
    pub origination_caller_profile: *mut switch_caller_profile,
    pub hunt_caller_profile: *mut switch_caller_profile,
    pub times: *mut switch_channel_timetable,
    pub old_times: *mut switch_channel_timetable,
    pub caller_extension: *mut switch_caller_extension,
    pub pool: *mut switch_memory_pool_t,
    pub next: *mut switch_caller_profile,
    pub direction: switch_call_direction_t,
    pub logical_direction: switch_call_direction_t,
    pub soft: *mut profile_node_t,
    pub uuid_str: *mut ::std::os::raw::c_char,
    pub clone_of: *mut ::std::os::raw::c_char,
    pub transfer_source: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_caller_application {
    pub application_name: *mut ::std::os::raw::c_char,
    pub application_data: *mut ::std::os::raw::c_char,
    pub application_function: switch_application_function_t,
    pub next: *mut switch_caller_application,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_caller_extension {
    pub extension_name: *mut ::std::os::raw::c_char,
    pub extension_number: *mut ::std::os::raw::c_char,
    pub current_application: *mut switch_caller_application_t,
    pub last_application: *mut switch_caller_application_t,
    pub applications: *mut switch_caller_application_t,
    pub children: *mut switch_caller_profile,
    pub next: *mut switch_caller_extension,
}
extern "C" {
    pub fn switch_caller_extension_new(
        session: *mut switch_core_session_t,
        extension_name: *const ::std::os::raw::c_char,
        extension_number: *const ::std::os::raw::c_char,
    ) -> *mut switch_caller_extension_t;
}
extern "C" {
    pub fn switch_caller_extension_clone(
        new_ext: *mut *mut switch_caller_extension_t,
        orig: *mut switch_caller_extension_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_caller_extension_add_application(
        session: *mut switch_core_session_t,
        caller_extension: *mut switch_caller_extension_t,
        application_name: *const ::std::os::raw::c_char,
        extra_data: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_caller_extension_add_application_printf(
        session: *mut switch_core_session_t,
        caller_extension: *mut switch_caller_extension_t,
        application_name: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_caller_get_field_by_name(
        caller_profile: *mut switch_caller_profile_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_caller_profile_new(
        pool: *mut switch_memory_pool_t,
        username: *const ::std::os::raw::c_char,
        dialplan: *const ::std::os::raw::c_char,
        caller_id_name: *const ::std::os::raw::c_char,
        caller_id_number: *const ::std::os::raw::c_char,
        network_addr: *const ::std::os::raw::c_char,
        ani: *const ::std::os::raw::c_char,
        aniii: *const ::std::os::raw::c_char,
        rdnis: *const ::std::os::raw::c_char,
        source: *const ::std::os::raw::c_char,
        context: *const ::std::os::raw::c_char,
        destination_number: *const ::std::os::raw::c_char,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_caller_profile_clone(
        session: *mut switch_core_session_t,
        tocopy: *mut switch_caller_profile_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_caller_profile_dup(
        pool: *mut switch_memory_pool_t,
        tocopy: *mut switch_caller_profile_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_caller_profile_event_set_data(
        caller_profile: *mut switch_caller_profile_t,
        prefix: *const ::std::os::raw::c_char,
        event: *mut switch_event_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_report_block_frame {
    pub ssrc: u32,
    pub fraction: u8,
    pub lost: i32,
    pub highest_sequence_number_received: u32,
    pub jitter: u32,
    pub lsr: u32,
    pub dlsr: u32,
    pub loss_avg: u32,
    pub rtt_avg: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtcp_frame {
    pub report_count: u16,
    pub packet_type: u16,
    pub ssrc: u32,
    pub ntp_msw: u32,
    pub ntp_lsw: u32,
    pub timestamp: u32,
    pub packet_count: u32,
    pub octect_count: u32,
    pub nb_reports: u32,
    pub reports: [switch_rtcp_report_block_frame; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_channel_timetable {
    pub profile_created: switch_time_t,
    pub created: switch_time_t,
    pub answered: switch_time_t,
    pub progress: switch_time_t,
    pub progress_media: switch_time_t,
    pub hungup: switch_time_t,
    pub transferred: switch_time_t,
    pub resurrected: switch_time_t,
    pub bridged: switch_time_t,
    pub last_hold: switch_time_t,
    pub hold_accum: switch_time_t,
    pub next: *mut switch_channel_timetable,
}
pub type switch_channel_timetable_t = switch_channel_timetable;
extern "C" {
    pub fn switch_channel_get_state(channel: *mut switch_channel_t) -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_get_running_state(
        channel: *mut switch_channel_t,
    ) -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_check_signal(
        channel: *mut switch_channel_t,
        in_thread_only: switch_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_test_ready(
        channel: *mut switch_channel_t,
        check_ready: switch_bool_t,
        check_media: switch_bool_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_wait_for_state(
        channel: *mut switch_channel_t,
        other_channel: *mut switch_channel_t,
        want_state: switch_channel_state_t,
    );
}
extern "C" {
    pub fn switch_channel_wait_for_state_timeout(
        other_channel: *mut switch_channel_t,
        want_state: switch_channel_state_t,
        timeout: u32,
    );
}
extern "C" {
    pub fn switch_channel_wait_for_flag(
        channel: *mut switch_channel_t,
        want_flag: switch_channel_flag_t,
        pres: switch_bool_t,
        to: u32,
        super_channel: *mut switch_channel_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_wait_for_app_flag(
        channel: *mut switch_channel_t,
        app_flag: u32,
        key: *const ::std::os::raw::c_char,
        pres: switch_bool_t,
        to: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_set_state(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        state: switch_channel_state_t,
    ) -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_perform_set_running_state(
        channel: *mut switch_channel_t,
        state: switch_channel_state_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_str2cause(str_: *const ::std::os::raw::c_char) -> switch_call_cause_t;
}
extern "C" {
    pub fn switch_channel_get_cause(channel: *mut switch_channel_t) -> switch_call_cause_t;
}
extern "C" {
    pub fn switch_channel_cause_q850(cause: switch_call_cause_t) -> switch_call_cause_t;
}
extern "C" {
    pub fn switch_channel_get_cause_q850(channel: *mut switch_channel_t) -> switch_call_cause_t;
}
extern "C" {
    pub fn switch_channel_get_cause_ptr(channel: *mut switch_channel_t)
        -> *mut switch_call_cause_t;
}
extern "C" {
    pub fn switch_channel_cause2str(cause: switch_call_cause_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_timetable(
        channel: *mut switch_channel_t,
    ) -> *mut switch_channel_timetable_t;
}
extern "C" {
    pub fn switch_channel_alloc(
        channel: *mut *mut switch_channel_t,
        direction: switch_call_direction_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_init(
        channel: *mut switch_channel_t,
        session: *mut switch_core_session_t,
        state: switch_channel_state_t,
        flag: switch_channel_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_presence_data_vals(
        channel: *mut switch_channel_t,
        presence_data_cols: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_channel_perform_presence(
        channel: *mut switch_channel_t,
        rpid: *const ::std::os::raw::c_char,
        status: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_channel_uninit(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_set_caller_profile(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
    );
}
extern "C" {
    pub fn switch_channel_step_caller_profile(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_get_caller_profile(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_channel_set_originator_caller_profile(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
    );
}
extern "C" {
    pub fn switch_channel_set_hunt_caller_profile(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
    );
}
extern "C" {
    pub fn switch_channel_get_originator_caller_profile(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_channel_set_originatee_caller_profile(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
    );
}
extern "C" {
    pub fn switch_channel_get_originatee_caller_profile(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_channel_set_origination_caller_profile(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
    );
}
extern "C" {
    pub fn switch_channel_get_origination_caller_profile(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_profile_t;
}
extern "C" {
    pub fn switch_channel_get_uuid(channel: *mut switch_channel_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_set_profile_var(
        channel: *mut switch_channel_t,
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_log_tag(
        channel: *mut switch_channel_t,
        tagname: *const ::std::os::raw::c_char,
        tagvalue: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_log_tags(
        channel: *mut switch_channel_t,
        log_tags: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_variable_var_check(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        var_check: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_variable_strip_quotes_var_check(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        var_check: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_add_variable_var_check(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        var_check: switch_bool_t,
        stack: switch_stack_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_variable_printf(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_variable_name_printf(
        channel: *mut switch_channel_t,
        val: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_variable_partner_var_check(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        var_check: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_variable_partner(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_hold_music(
        channel: *mut switch_channel_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_hold_music_partner(
        channel: *mut switch_channel_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_del_variable_prefix(
        channel: *mut switch_channel_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn switch_channel_transfer_variable_prefix(
        orig_channel: *mut switch_channel_t,
        new_channel: *mut switch_channel_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_export_variable_var_check(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
        export_varname: *const ::std::os::raw::c_char,
        var_check: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_process_export(
        channel: *mut switch_channel_t,
        peer_channel: *mut switch_channel_t,
        var_event: *mut switch_event_t,
        export_varname: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_channel_export_variable_printf(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        export_varname: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_scope_variables(
        channel: *mut switch_channel_t,
        event: *mut *mut switch_event_t,
    );
}
extern "C" {
    pub fn switch_channel_get_scope_variables(
        channel: *mut switch_channel_t,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_variable_dup(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        dup: switch_bool_t,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_variable_strdup(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_variable_buf(
        channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_variables(
        channel: *mut switch_channel_t,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_variables_prefix(
        channel: *mut switch_channel_t,
        prefix: *const ::std::os::raw::c_char,
        event: *mut *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_pass_callee_id(
        channel: *mut switch_channel_t,
        other_channel: *mut switch_channel_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_variable_first(
        channel: *mut switch_channel_t,
    ) -> *mut switch_event_header_t;
}
extern "C" {
    pub fn switch_channel_variable_last(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_restart(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_caller_extension_masquerade(
        orig_channel: *mut switch_channel_t,
        new_channel: *mut switch_channel_t,
        offset: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_set_caller_extension(
        channel: *mut switch_channel_t,
        caller_extension: *mut switch_caller_extension_t,
    );
}
extern "C" {
    pub fn switch_channel_invert_cid(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_flip_cid(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_sort_cid(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_get_caller_extension(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_extension_t;
}
extern "C" {
    pub fn switch_channel_test_flag(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_channel_set_flag_value(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
        value: u32,
    );
}
extern "C" {
    pub fn switch_channel_set_flag_recursive(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    );
}
extern "C" {
    pub fn switch_channel_set_cap_value(
        channel: *mut switch_channel_t,
        cap: switch_channel_cap_t,
        value: u32,
    );
}
extern "C" {
    pub fn switch_channel_clear_cap(channel: *mut switch_channel_t, cap: switch_channel_cap_t);
}
extern "C" {
    pub fn switch_channel_test_cap(
        channel: *mut switch_channel_t,
        cap: switch_channel_cap_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_channel_test_cap_partner(
        channel: *mut switch_channel_t,
        cap: switch_channel_cap_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_channel_set_flag_partner(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_channel_clear_flag_partner(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_channel_test_flag_partner(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_channel_set_state_flag(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    );
}
extern "C" {
    pub fn switch_channel_clear_state_flag(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    );
}
extern "C" {
    pub fn switch_channel_clear_flag(channel: *mut switch_channel_t, flag: switch_channel_flag_t);
}
extern "C" {
    pub fn switch_channel_clear_flag_recursive(
        channel: *mut switch_channel_t,
        flag: switch_channel_flag_t,
    );
}
extern "C" {
    pub fn switch_channel_perform_answer(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_mark_answered(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_acknowledge_call(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_ring_ready_value(
        channel: *mut switch_channel_t,
        rv: switch_ring_ready_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_pre_answer(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_mark_pre_answered(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_mark_ring_ready_value(
        channel: *mut switch_channel_t,
        rv: switch_ring_ready_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_add_state_handler(
        channel: *mut switch_channel_t,
        state_handler: *const switch_state_handler_table_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_clear_state_handler(
        channel: *mut switch_channel_t,
        state_handler: *const switch_state_handler_table_t,
    );
}
extern "C" {
    pub fn switch_channel_get_state_handler(
        channel: *mut switch_channel_t,
        index: ::std::os::raw::c_int,
    ) -> *const switch_state_handler_table_t;
}
extern "C" {
    pub fn switch_channel_set_private(
        channel: *mut switch_channel_t,
        key: *const ::std::os::raw::c_char,
        private_info: *const ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_private(
        channel: *mut switch_channel_t,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_channel_get_private_partner(
        channel: *mut switch_channel_t,
        key: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_channel_set_name(
        channel: *mut switch_channel_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_get_name(channel: *mut switch_channel_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_perform_hangup(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        hangup_cause: switch_call_cause_t,
    ) -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_has_dtmf(channel: *mut switch_channel_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_channel_dtmf_lock(channel: *mut switch_channel_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_try_dtmf_lock(channel: *mut switch_channel_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_dtmf_unlock(channel: *mut switch_channel_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_queue_dtmf(
        channel: *mut switch_channel_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_queue_dtmf_string(
        channel: *mut switch_channel_t,
        dtmf_string: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_dequeue_dtmf(
        channel: *mut switch_channel_t,
        dtmf: *mut switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_flush_dtmf(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_dequeue_dtmf_string(
        channel: *mut switch_channel_t,
        dtmf_str: *mut ::std::os::raw::c_char,
        len: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_channel_state_name(
        state: switch_channel_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_name_state(name: *const ::std::os::raw::c_char)
        -> switch_channel_state_t;
}
extern "C" {
    pub fn switch_channel_event_set_data(
        channel: *mut switch_channel_t,
        event: *mut switch_event_t,
    );
}
extern "C" {
    pub fn switch_channel_event_set_basic_data(
        channel: *mut switch_channel_t,
        event: *mut switch_event_t,
    );
}
extern "C" {
    pub fn switch_channel_event_set_extended_data(
        channel: *mut switch_channel_t,
        event: *mut switch_event_t,
    );
}
extern "C" {
    pub fn switch_channel_expand_variables_check(
        channel: *mut switch_channel_t,
        in_: *const ::std::os::raw::c_char,
        var_list: *mut switch_event_t,
        api_list: *mut switch_event_t,
        recur: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_build_param_string(
        channel: *mut switch_channel_t,
        caller_profile: *mut switch_caller_profile_t,
        prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_set_timestamps(channel: *mut switch_channel_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_perform_audio_sync(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_channel_perform_video_sync(
        channel: *mut switch_channel_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_channel_set_private_flag(channel: *mut switch_channel_t, flags: u32);
}
extern "C" {
    pub fn switch_channel_clear_private_flag(channel: *mut switch_channel_t, flags: u32);
}
extern "C" {
    pub fn switch_channel_test_private_flag(
        channel: *mut switch_channel_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_set_app_flag_key(
        app: *const ::std::os::raw::c_char,
        channel: *mut switch_channel_t,
        flags: u32,
    );
}
extern "C" {
    pub fn switch_channel_clear_app_flag_key(
        app: *const ::std::os::raw::c_char,
        channel: *mut switch_channel_t,
        flags: u32,
    );
}
extern "C" {
    pub fn switch_channel_test_app_flag_key(
        app: *const ::std::os::raw::c_char,
        channel: *mut switch_channel_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_set_bridge_time(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_set_hangup_time(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_direction(channel: *mut switch_channel_t) -> switch_call_direction_t;
}
extern "C" {
    pub fn switch_channel_logical_direction(
        channel: *mut switch_channel_t,
    ) -> switch_call_direction_t;
}
extern "C" {
    pub fn switch_channel_set_direction(
        channel: *mut switch_channel_t,
        direction: switch_call_direction_t,
    );
}
extern "C" {
    pub fn switch_channel_get_session(channel: *mut switch_channel_t)
        -> *mut switch_core_session_t;
}
extern "C" {
    pub fn switch_channel_get_flag_string(
        channel: *mut switch_channel_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_cap_string(
        channel: *mut switch_channel_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_state_change_pending(
        channel: *mut switch_channel_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_channel_perform_set_callstate(
        channel: *mut switch_channel_t,
        callstate: switch_channel_callstate_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_channel_get_callstate(
        channel: *mut switch_channel_t,
    ) -> switch_channel_callstate_t;
}
extern "C" {
    pub fn switch_channel_callstate2str(
        callstate: switch_channel_callstate_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_str2callstate(
        str_: *const ::std::os::raw::c_char,
    ) -> switch_channel_callstate_t;
}
extern "C" {
    pub fn switch_channel_mark_hold(channel: *mut switch_channel_t, on: switch_bool_t);
}
extern "C" {
    pub fn switch_channel_execute_on(
        channel: *mut switch_channel_t,
        variable_prefix: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_execute_on_value(
        channel: *mut switch_channel_t,
        variable_value: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_api_on(
        channel: *mut switch_channel_t,
        variable_prefix: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_process_device_hangup(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_get_queued_extension(
        channel: *mut switch_channel_t,
    ) -> *mut switch_caller_extension_t;
}
extern "C" {
    pub fn switch_channel_transfer_to_extension(
        channel: *mut switch_channel_t,
        caller_extension: *mut switch_caller_extension_t,
    );
}
extern "C" {
    pub fn switch_channel_get_partner_uuid(
        channel: *mut switch_channel_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_partner_uuid_copy(
        channel: *mut switch_channel_t,
        buf: *mut ::std::os::raw::c_char,
        blen: switch_size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_get_hold_record(
        channel: *mut switch_channel_t,
    ) -> *mut switch_hold_record_t;
}
extern "C" {
    pub fn switch_channel_state_thread_lock(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_state_thread_unlock(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_state_thread_trylock(channel: *mut switch_channel_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_handle_cause(channel: *mut switch_channel_t, cause: switch_call_cause_t);
}
extern "C" {
    pub fn switch_channel_global_init(pool: *mut switch_memory_pool_t);
}
extern "C" {
    pub fn switch_channel_global_uninit();
}
extern "C" {
    pub fn switch_channel_set_device_id(
        channel: *mut switch_channel_t,
        device_id: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_clear_device_record(channel: *mut switch_channel_t);
}
extern "C" {
    pub fn switch_channel_get_device_record(
        channel: *mut switch_channel_t,
    ) -> *mut switch_device_record_t;
}
extern "C" {
    pub fn switch_channel_release_device_record(dcdrp: *mut *mut switch_device_record_t);
}
extern "C" {
    pub fn switch_channel_bind_device_state_handler(
        function: switch_device_state_function_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_unbind_device_state_handler(
        function: switch_device_state_function_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_channel_device_state2str(
        device_state: switch_device_state_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_channel_pass_sdp(
        from_channel: *mut switch_channel_t,
        to_channel: *mut switch_channel_t,
        sdp: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_create_partition(
        pool: *mut switch_memory_pool_t,
        buffer: *mut *mut switch_buffer_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_set_partition_data(
        buffer: *mut switch_buffer_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_reset_partition_data(buffer: *mut switch_buffer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_create(
        pool: *mut switch_memory_pool_t,
        buffer: *mut *mut switch_buffer_t,
        max_len: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_create_dynamic(
        buffer: *mut *mut switch_buffer_t,
        blocksize: switch_size_t,
        start_len: switch_size_t,
        max_len: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_add_mutex(buffer: *mut switch_buffer_t, mutex: *mut switch_mutex_t);
}
extern "C" {
    pub fn switch_buffer_lock(buffer: *mut switch_buffer_t);
}
extern "C" {
    pub fn switch_buffer_trylock(buffer: *mut switch_buffer_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_buffer_unlock(buffer: *mut switch_buffer_t);
}
extern "C" {
    pub fn switch_buffer_len(buffer: *mut switch_buffer_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_freespace(buffer: *mut switch_buffer_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_inuse(buffer: *mut switch_buffer_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_read(
        buffer: *mut switch_buffer_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_peek(
        buffer: *mut switch_buffer_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_peek_zerocopy(
        buffer: *mut switch_buffer_t,
        ptr: *mut *const ::std::os::raw::c_void,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_read_loop(
        buffer: *mut switch_buffer_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_set_loops(buffer: *mut switch_buffer_t, loops: i32);
}
extern "C" {
    pub fn switch_buffer_write(
        buffer: *mut switch_buffer_t,
        data: *const ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_toss(
        buffer: *mut switch_buffer_t,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_zero(buffer: *mut switch_buffer_t);
}
extern "C" {
    pub fn switch_buffer_slide_write(
        buffer: *mut switch_buffer_t,
        data: *const ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_destroy(buffer: *mut *mut switch_buffer_t);
}
extern "C" {
    pub fn switch_buffer_zwrite(
        buffer: *mut switch_buffer_t,
        data: *const ::std::os::raw::c_void,
        datalen: switch_size_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_buffer_get_head_pointer(
        buffer: *mut switch_buffer_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_event_header {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub array: *mut *mut ::std::os::raw::c_char,
    pub idx: ::std::os::raw::c_int,
    pub hash: ::std::os::raw::c_ulong,
    pub next: *mut switch_event_header,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_event {
    pub event_id: switch_event_types_t,
    pub priority: switch_priority_t,
    pub owner: *mut ::std::os::raw::c_char,
    pub subclass_name: *mut ::std::os::raw::c_char,
    pub headers: *mut switch_event_header_t,
    pub last_header: *mut switch_event_header_t,
    pub body: *mut ::std::os::raw::c_char,
    pub bind_user_data: *mut ::std::os::raw::c_void,
    pub event_user_data: *mut ::std::os::raw::c_void,
    pub key: ::std::os::raw::c_ulong,
    pub next: *mut switch_event,
    pub flags: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_serial_event_s {
    pub event_id: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub owner: *mut ::std::os::raw::c_char,
    pub subclass_name: *mut ::std::os::raw::c_char,
    pub body: *mut ::std::os::raw::c_char,
}
pub type switch_serial_event_t = switch_serial_event_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_serial_event_header_s {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
pub type switch_serial_event_header_t = switch_serial_event_header_s;
impl switch_event_flag_t {
    pub const EF_UNIQ_HEADERS: switch_event_flag_t = switch_event_flag_t(1);
}
impl switch_event_flag_t {
    pub const EF_NO_CHAT_EXEC: switch_event_flag_t = switch_event_flag_t(2);
}
impl switch_event_flag_t {
    pub const EF_DEFAULT_ALLOW: switch_event_flag_t = switch_event_flag_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_event_flag_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_event_init(pool: *mut switch_memory_pool_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_shutdown() -> switch_status_t;
}
extern "C" {
    pub fn switch_event_create_subclass_detailed(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        event: *mut *mut switch_event_t,
        event_id: switch_event_types_t,
        subclass_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_set_priority(
        event: *mut switch_event_t,
        priority: switch_priority_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_get_header_ptr(
        event: *mut switch_event_t,
        header_name: *const ::std::os::raw::c_char,
    ) -> *mut switch_event_header_t;
}
extern "C" {
    pub fn switch_event_get_header_idx(
        event: *mut switch_event_t,
        header_name: *const ::std::os::raw::c_char,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_event_rename_header(
        event: *mut switch_event_t,
        header_name: *const ::std::os::raw::c_char,
        new_header_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_get_body(event: *mut switch_event_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_event_add_header(
        event: *mut switch_event_t,
        stack: switch_stack_t,
        header_name: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_set_subclass_name(
        event: *mut switch_event_t,
        subclass_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_add_header_string(
        event: *mut switch_event_t,
        stack: switch_stack_t,
        header_name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_add_header_string_nodup(
        event: *mut switch_event_t,
        stack: switch_stack_t,
        header_name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_del_header_val(
        event: *mut switch_event_t,
        header_name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_add_array(
        event: *mut switch_event_t,
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_event_destroy(event: *mut *mut switch_event_t);
}
extern "C" {
    pub fn switch_event_dup(
        event: *mut *mut switch_event_t,
        todup: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_merge(event: *mut switch_event_t, tomerge: *mut switch_event_t);
}
extern "C" {
    pub fn switch_event_dup_reply(
        event: *mut *mut switch_event_t,
        todup: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_fire_detailed(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        event: *mut *mut switch_event_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_prep_for_delivery_detailed(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        event: *mut switch_event_t,
    );
}
extern "C" {
    pub fn switch_event_bind(
        id: *const ::std::os::raw::c_char,
        event: switch_event_types_t,
        subclass_name: *const ::std::os::raw::c_char,
        callback: switch_event_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_get_custom_events(
        matches: *mut *mut switch_console_callback_match_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_bind_removable(
        id: *const ::std::os::raw::c_char,
        event: switch_event_types_t,
        subclass_name: *const ::std::os::raw::c_char,
        callback: switch_event_callback_t,
        user_data: *mut ::std::os::raw::c_void,
        node: *mut *mut switch_event_node_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_unbind(node: *mut *mut switch_event_node_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_unbind_callback(callback: switch_event_callback_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_name(event: switch_event_types_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_name_event(
        name: *const ::std::os::raw::c_char,
        type_: *mut switch_event_types_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_reserve_subclass_detailed(
        owner: *const ::std::os::raw::c_char,
        subclass_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_free_subclass_detailed(
        owner: *const ::std::os::raw::c_char,
        subclass_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_binary_deserialize(
        eventp: *mut *mut switch_event_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: switch_size_t,
        duplicate: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_binary_serialize(
        event: *mut switch_event_t,
        data: *mut *mut ::std::os::raw::c_void,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_serialize(
        event: *mut switch_event_t,
        str_: *mut *mut ::std::os::raw::c_char,
        encode: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_serialize_json(
        event: *mut switch_event_t,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_serialize_json_obj(
        event: *mut switch_event_t,
        json: *mut *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_create_json(
        event: *mut *mut switch_event_t,
        json: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_create_brackets(
        data: *mut ::std::os::raw::c_char,
        a: ::std::os::raw::c_char,
        b: ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
        event: *mut *mut switch_event_t,
        new_data: *mut *mut ::std::os::raw::c_char,
        dup: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_create_array_pair(
        event: *mut *mut switch_event_t,
        names: *mut *mut ::std::os::raw::c_char,
        vals: *mut *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_xmlize(
        event: *mut switch_event_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_event_running() -> switch_status_t;
}
extern "C" {
    pub fn switch_event_add_body(
        event: *mut switch_event_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_set_body(
        event: *mut switch_event_t,
        body: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_expand_headers_check(
        event: *mut switch_event_t,
        in_: *const ::std::os::raw::c_char,
        var_list: *mut switch_event_t,
        api_list: *mut switch_event_t,
        recur: u32,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_event_create_pres_in_detailed(
        file: *mut ::std::os::raw::c_char,
        func: *mut ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        proto: *const ::std::os::raw::c_char,
        login: *const ::std::os::raw::c_char,
        from: *const ::std::os::raw::c_char,
        from_domain: *const ::std::os::raw::c_char,
        status: *const ::std::os::raw::c_char,
        event_type: *const ::std::os::raw::c_char,
        alt_event_type: *const ::std::os::raw::c_char,
        event_count: ::std::os::raw::c_int,
        unique_id: *const ::std::os::raw::c_char,
        channel_state: *const ::std::os::raw::c_char,
        answer_state: *const ::std::os::raw::c_char,
        call_direction: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_deliver(event: *mut *mut switch_event_t);
}
extern "C" {
    pub fn switch_event_build_param_string(
        event: *mut switch_event_t,
        prefix: *const ::std::os::raw::c_char,
        vars_map: *mut switch_hash_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_event_check_permission_list(
        list: *mut switch_event_t,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_event_add_presence_data_cols(
        channel: *mut switch_channel_t,
        event: *mut switch_event_t,
        prefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_json_add_presence_data_cols(
        event: *mut switch_event_t,
        json: *mut cJSON,
        prefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_event_launch_dispatch_threads(max: u32);
}
extern "C" {
    pub fn switch_event_channel_broadcast(
        event_channel: *const ::std::os::raw::c_char,
        json: *mut *mut cJSON,
        key: *const ::std::os::raw::c_char,
        id: switch_event_channel_id_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_channel_deliver(
        event_channel: *const ::std::os::raw::c_char,
        json: *mut *mut cJSON,
        key: *const ::std::os::raw::c_char,
        id: switch_event_channel_id_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_channel_unbind(
        event_channel: *const ::std::os::raw::c_char,
        func: switch_event_channel_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> u32;
}
extern "C" {
    pub fn switch_event_channel_bind(
        event_channel: *const ::std::os::raw::c_char,
        func: switch_event_channel_func_t,
        id: *mut switch_event_channel_id_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
pub type switch_live_array_command_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        la: *mut switch_live_array_t,
        cmd: *const ::std::os::raw::c_char,
        sessid: *const ::std::os::raw::c_char,
        jla: *mut cJSON,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn switch_live_array_clear(la: *mut switch_live_array_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_bootstrap(
        la: *mut switch_live_array_t,
        sessid: *const ::std::os::raw::c_char,
        channel_id: switch_event_channel_id_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_destroy(live_arrayP: *mut *mut switch_live_array_t)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_create(
        event_channel: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        channel_id: switch_event_channel_id_t,
        live_arrayP: *mut *mut switch_live_array_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_get(
        la: *mut switch_live_array_t,
        name: *const ::std::os::raw::c_char,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn switch_live_array_get_idx(
        la: *mut switch_live_array_t,
        idx: ::std::os::raw::c_int,
    ) -> *mut cJSON;
}
extern "C" {
    pub fn switch_live_array_del(
        la: *mut switch_live_array_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_add(
        la: *mut switch_live_array_t,
        name: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
        obj: *mut *mut cJSON,
        destroy: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_visible(
        la: *mut switch_live_array_t,
        visible: switch_bool_t,
        force: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_live_array_isnew(la: *mut switch_live_array_t) -> switch_bool_t;
}
extern "C" {
    pub fn switch_live_array_lock(la: *mut switch_live_array_t);
}
extern "C" {
    pub fn switch_live_array_unlock(la: *mut switch_live_array_t);
}
extern "C" {
    pub fn switch_live_array_set_user_data(
        la: *mut switch_live_array_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_live_array_set_command_handler(
        la: *mut switch_live_array_t,
        command_handler: switch_live_array_command_handler_t,
    );
}
extern "C" {
    pub fn switch_live_array_parse_json(json: *mut cJSON, channel_id: switch_event_channel_id_t);
}
extern "C" {
    pub fn switch_live_array_add_alias(
        la: *mut switch_live_array_t,
        event_channel: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_live_array_clear_alias(
        la: *mut switch_live_array_t,
        event_channel: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_event_channel_permission_verify(
        cookie: *const ::std::os::raw::c_char,
        event_channel: *const ::std::os::raw::c_char,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_event_channel_permission_modify(
        cookie: *const ::std::os::raw::c_char,
        event_channel: *const ::std::os::raw::c_char,
        set: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_event_channel_permission_clear(cookie: *const ::std::os::raw::c_char);
}
impl switch_core_video_filter_t {
    pub const SCV_FILTER_GRAY_FG: switch_core_video_filter_t = switch_core_video_filter_t(1);
}
impl switch_core_video_filter_t {
    pub const SCV_FILTER_GRAY_BG: switch_core_video_filter_t = switch_core_video_filter_t(2);
}
impl switch_core_video_filter_t {
    pub const SCV_FILTER_SEPIA_FG: switch_core_video_filter_t = switch_core_video_filter_t(4);
}
impl switch_core_video_filter_t {
    pub const SCV_FILTER_SEPIA_BG: switch_core_video_filter_t = switch_core_video_filter_t(8);
}
impl switch_core_video_filter_t {
    pub const SCV_FILTER_8BIT_FG: switch_core_video_filter_t = switch_core_video_filter_t(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_video_filter_t(pub ::std::os::raw::c_uint);
impl switch_shade_t {
    pub const SWITCH_SHADE_NONE: switch_shade_t = switch_shade_t(0);
}
impl switch_shade_t {
    pub const SWITCH_SHADE_RED: switch_shade_t = switch_shade_t(1);
}
impl switch_shade_t {
    pub const SWITCH_SHADE_GREEN: switch_shade_t = switch_shade_t(2);
}
impl switch_shade_t {
    pub const SWITCH_SHADE_BLUE: switch_shade_t = switch_shade_t(3);
}
impl switch_shade_t {
    pub const SWITCH_SHADE_AUTO: switch_shade_t = switch_shade_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_shade_t(pub ::std::os::raw::c_uint);
impl switch_img_position_t {
    pub const POS_LEFT_TOP: switch_img_position_t = switch_img_position_t(0);
}
impl switch_img_position_t {
    pub const POS_LEFT_MID: switch_img_position_t = switch_img_position_t(1);
}
impl switch_img_position_t {
    pub const POS_LEFT_BOT: switch_img_position_t = switch_img_position_t(2);
}
impl switch_img_position_t {
    pub const POS_CENTER_TOP: switch_img_position_t = switch_img_position_t(3);
}
impl switch_img_position_t {
    pub const POS_CENTER_MID: switch_img_position_t = switch_img_position_t(4);
}
impl switch_img_position_t {
    pub const POS_CENTER_BOT: switch_img_position_t = switch_img_position_t(5);
}
impl switch_img_position_t {
    pub const POS_RIGHT_TOP: switch_img_position_t = switch_img_position_t(6);
}
impl switch_img_position_t {
    pub const POS_RIGHT_MID: switch_img_position_t = switch_img_position_t(7);
}
impl switch_img_position_t {
    pub const POS_RIGHT_BOT: switch_img_position_t = switch_img_position_t(8);
}
impl switch_img_position_t {
    pub const POS_NONE: switch_img_position_t = switch_img_position_t(9);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_img_position_t(pub ::std::os::raw::c_uint);
impl switch_img_fit_t {
    pub const SWITCH_FIT_SIZE: switch_img_fit_t = switch_img_fit_t(0);
}
impl switch_img_fit_t {
    pub const SWITCH_FIT_SCALE: switch_img_fit_t = switch_img_fit_t(1);
}
impl switch_img_fit_t {
    pub const SWITCH_FIT_SIZE_AND_SCALE: switch_img_fit_t = switch_img_fit_t(2);
}
impl switch_img_fit_t {
    pub const SWITCH_FIT_NECESSARY: switch_img_fit_t = switch_img_fit_t(3);
}
impl switch_img_fit_t {
    pub const SWITCH_FIT_NONE: switch_img_fit_t = switch_img_fit_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_img_fit_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_yuv_color_s {
    pub y: u8,
    pub u: u8,
    pub v: u8,
}
pub type switch_yuv_color_t = switch_yuv_color_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rgb_color_s {
    pub b: u8,
    pub g: u8,
    pub r: u8,
    pub a: u8,
}
pub type switch_rgb_color_t = switch_rgb_color_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_hsl_color_s {
    pub h: f64,
    pub s: f64,
    pub l: f64,
}
pub type switch_hsl_color_t = switch_hsl_color_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_lab_color_t {
    pub l: f64,
    pub a: f64,
    pub b: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xyz_color_t {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_image_rect {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
pub type switch_image_rect_t = switch_image_rect;
impl switch_convert_fmt_t {
    pub const SWITCH_CONVERT_FMT_YUYV: switch_convert_fmt_t = switch_convert_fmt_t(0);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_convert_fmt_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_png_opaque_s {
    _unused: [u8; 0],
}
pub type switch_png_opaque_t = switch_png_opaque_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_png_s {
    pub pvt: *mut switch_png_opaque_t,
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
}
pub type switch_png_t = switch_png_s;
impl switch_image_rotation_mode_t {
    pub const SRM_NONE: switch_image_rotation_mode_t = switch_image_rotation_mode_t(0);
}
impl switch_image_rotation_mode_t {
    pub const SRM_90: switch_image_rotation_mode_t = switch_image_rotation_mode_t(90);
}
impl switch_image_rotation_mode_t {
    pub const SRM_180: switch_image_rotation_mode_t = switch_image_rotation_mode_t(180);
}
impl switch_image_rotation_mode_t {
    pub const SRM_270: switch_image_rotation_mode_t = switch_image_rotation_mode_t(270);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_image_rotation_mode_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_img_alloc(
        img: *mut switch_image_t,
        fmt: switch_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_wrap(
        img: *mut switch_image_t,
        fmt: switch_img_fmt_t,
        d_w: ::std::os::raw::c_uint,
        d_h: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        img_data: *mut ::std::os::raw::c_uchar,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_set_rect(
        img: *mut switch_image_t,
        x: ::std::os::raw::c_uint,
        y: ::std::os::raw::c_uint,
        w: ::std::os::raw::c_uint,
        h: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_img_patch(
        IMG: *mut switch_image_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_img_attenuate(img: *mut switch_image_t);
}
extern "C" {
    pub fn switch_img_patch_rgb(
        IMG: *mut switch_image_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        noalpha: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_img_patch_rect(
        IMG: *mut switch_image_t,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        img: *mut switch_image_t,
        x: u32,
        y: u32,
        w: u32,
        h: u32,
    );
}
extern "C" {
    pub fn switch_img_copy(img: *mut switch_image_t, new_img: *mut *mut switch_image_t);
}
extern "C" {
    pub fn switch_img_rotate_copy(
        img: *mut switch_image_t,
        new_img: *mut *mut switch_image_t,
        mode: switch_image_rotation_mode_t,
    );
}
extern "C" {
    pub fn switch_img_rotate(img: *mut *mut switch_image_t, mode: switch_image_rotation_mode_t);
}
extern "C" {
    pub fn switch_img_free(img: *mut *mut switch_image_t);
}
extern "C" {
    pub fn switch_img_draw_text(
        IMG: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: switch_rgb_color_t,
        font_size: u16,
        text: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_img_add_text(
        buffer: *mut ::std::os::raw::c_void,
        w: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        s: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_img_copy_rect(
        img: *mut switch_image_t,
        x: u32,
        y: u32,
        w: u32,
        h: u32,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_fill(
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: *mut switch_rgb_color_t,
    );
}
extern "C" {
    pub fn switch_img_8bit(img: *mut switch_image_t);
}
extern "C" {
    pub fn switch_img_gray(
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_img_sepia(
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_img_fill_noalpha(
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        color: *mut switch_rgb_color_t,
    );
}
extern "C" {
    pub fn switch_color_set_rgb(
        color: *mut switch_rgb_color_t,
        color_str: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_color_set_yuv(
        color: *mut switch_yuv_color_t,
        color_str: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_img_txt_handle_create(
        handleP: *mut *mut switch_img_txt_handle_t,
        font_family: *const ::std::os::raw::c_char,
        font_color: *const ::std::os::raw::c_char,
        bgcolor: *const ::std::os::raw::c_char,
        font_size: u16,
        angle: f64,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_txt_handle_destroy(handleP: *mut *mut switch_img_txt_handle_t);
}
extern "C" {
    pub fn switch_img_txt_handle_render(
        handle: *mut switch_img_txt_handle_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        font_family: *const ::std::os::raw::c_char,
        font_color: *const ::std::os::raw::c_char,
        bgcolor: *const ::std::os::raw::c_char,
        font_size: u16,
        angle: f64,
    ) -> u32;
}
extern "C" {
    pub fn switch_img_patch_hole(
        IMG: *mut switch_image_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        rect: *mut switch_image_rect_t,
    );
}
extern "C" {
    pub fn switch_png_patch_img(
        use_png: *mut switch_png_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_read_png(
        file_name: *const ::std::os::raw::c_char,
        img_fmt: switch_img_fmt_t,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_read_png_from_memory(
        mem: *mut ::std::os::raw::c_void,
        size: usize,
        img_fmt: switch_img_fmt_t,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_write_png(
        img: *mut switch_image_t,
        file_name: *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_png_open(
        pngP: *mut *mut switch_png_t,
        file_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_png_free(pngP: *mut *mut switch_png_t);
}
extern "C" {
    pub fn switch_img_data_url_png(
        img: *mut switch_image_t,
        urlP: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_data_url(
        img: *mut switch_image_t,
        urlP: *mut *mut ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_read_from_file(
        file_name: *const ::std::os::raw::c_char,
        img_fmt: switch_img_fmt_t,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_write_to_file(
        img: *mut switch_image_t,
        file_name: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_overlay(
        IMG: *mut switch_image_t,
        img: *mut switch_image_t,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        percent: u8,
    );
}
extern "C" {
    pub fn switch_img_mirror(
        src: *mut switch_image_t,
        destP: *mut *mut switch_image_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_scale(
        src: *mut switch_image_t,
        destP: *mut *mut switch_image_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_fit(
        srcP: *mut *mut switch_image_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        fit: switch_img_fit_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_calc_fit(
        src: *mut switch_image_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        new_wP: *mut ::std::os::raw::c_int,
        new_hP: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn parse_img_position(name: *const ::std::os::raw::c_char) -> switch_img_position_t;
}
extern "C" {
    pub fn parse_img_fit(name: *const ::std::os::raw::c_char) -> switch_img_fit_t;
}
extern "C" {
    pub fn switch_img_find_position(
        pos: switch_img_position_t,
        sw: ::std::os::raw::c_int,
        sh: ::std::os::raw::c_int,
        iw: ::std::os::raw::c_int,
        ih: ::std::os::raw::c_int,
        xP: *mut ::std::os::raw::c_int,
        yP: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_img_to_raw(
        src: *mut switch_image_t,
        dest: *mut ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
        fmt: switch_img_fmt_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_from_raw(
        destP: *mut *mut switch_image_t,
        src: *mut ::std::os::raw::c_void,
        fmt: switch_img_fmt_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_write_text_img(
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        full: switch_bool_t,
        text: *const ::std::os::raw::c_char,
    ) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_read_file(file_name: *const ::std::os::raw::c_char) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_img_letterbox(
        img: *mut switch_image_t,
        imgP: *mut *mut switch_image_t,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        color: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_has_video() -> switch_bool_t;
}
extern "C" {
    pub fn switch_I420_copy(
        src_y: *const u8,
        src_stride_y: ::std::os::raw::c_int,
        src_u: *const u8,
        src_stride_u: ::std::os::raw::c_int,
        src_v: *const u8,
        src_stride_v: ::std::os::raw::c_int,
        dst_y: *mut u8,
        dst_stride_y: ::std::os::raw::c_int,
        dst_u: *mut u8,
        dst_stride_u: ::std::os::raw::c_int,
        dst_v: *mut u8,
        dst_stride_v: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_I420_copy2(
        src_planes: *mut *mut u8,
        src_stride: *mut ::std::os::raw::c_int,
        dst_planes: *mut *mut u8,
        dst_stride: *mut ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_I420ToARGB(
        src_y: *const u8,
        src_stride_y: ::std::os::raw::c_int,
        src_u: *const u8,
        src_stride_u: ::std::os::raw::c_int,
        src_v: *const u8,
        src_stride_v: ::std::os::raw::c_int,
        dst_argb: *mut u8,
        dst_stride_argb: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_RGBAToARGB(
        src_frame: *const u8,
        src_stride_frame: ::std::os::raw::c_int,
        dst_argb: *mut u8,
        dst_stride_argb: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ABGRToARGB(
        src_frame: *const u8,
        src_stride_frame: ::std::os::raw::c_int,
        dst_argb: *mut u8,
        dst_stride_argb: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ARGBToARGB(
        src_frame: *const u8,
        src_stride_frame: ::std::os::raw::c_int,
        dst_argb: *mut u8,
        dst_stride_argb: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_img_chromakey(
        img: *mut switch_image_t,
        mask: *mut switch_rgb_color_t,
        threshold: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_chromakey_clear_colors(ck: *mut switch_chromakey_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_chromakey_autocolor(
        ck: *mut switch_chromakey_t,
        autocolor: switch_shade_t,
        threshold: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_chromakey_add_color(
        ck: *mut switch_chromakey_t,
        color: *mut switch_rgb_color_t,
        threshold: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_chromakey_destroy(ckP: *mut *mut switch_chromakey_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_chromakey_create(ckP: *mut *mut switch_chromakey_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_chromakey_set_default_threshold(ck: *mut switch_chromakey_t, threshold: u32);
}
extern "C" {
    pub fn switch_chromakey_process(ck: *mut switch_chromakey_t, img: *mut switch_image_t);
}
extern "C" {
    pub fn switch_chromakey_cache_image(ck: *mut switch_chromakey_t) -> *mut switch_image_t;
}
extern "C" {
    pub fn switch_chromakey_str2shade(
        ck: *mut switch_chromakey_t,
        shade_name: *const ::std::os::raw::c_char,
    ) -> switch_shade_t;
}
extern "C" {
    pub fn switch_core_video_parse_filter_string(
        filters: *mut switch_core_video_filter_t,
        filter_str: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_unicast_conninfo {
    pub session: *mut switch_core_session_t,
    pub read_codec: switch_codec_t,
    pub write_frame: switch_frame_t,
    pub write_frame_data: [switch_byte_t; 8192usize],
    pub socket: *mut switch_socket_t,
    pub local_ip: *mut ::std::os::raw::c_char,
    pub local_port: switch_port_t,
    pub remote_ip: *mut ::std::os::raw::c_char,
    pub remote_port: switch_port_t,
    pub local_addr: *mut switch_sockaddr_t,
    pub remote_addr: *mut switch_sockaddr_t,
    pub flag_mutex: *mut switch_mutex_t,
    pub flags: i32,
    pub type_: ::std::os::raw::c_int,
    pub transport: ::std::os::raw::c_int,
    pub stream_id: ::std::os::raw::c_int,
    pub thread: *mut switch_thread_t,
}
pub type switch_unicast_conninfo_t = switch_unicast_conninfo;
extern "C" {
    pub fn switch_ivr_deactivate_unicast(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_activate_unicast(
        session: *mut switch_core_session_t,
        local_ip: *mut ::std::os::raw::c_char,
        local_port: switch_port_t,
        remote_ip: *mut ::std::os::raw::c_char,
        remote_port: switch_port_t,
        transport: *mut ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_generate_json_cdr(
        session: *mut switch_core_session_t,
        json_cdr: *mut *mut cJSON,
        urlencode: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_generate_xml_cdr(
        session: *mut switch_core_session_t,
        xml_cdr: *mut switch_xml_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_set_xml_profile_data(
        xml: switch_xml_t,
        caller_profile: *mut switch_caller_profile_t,
        off: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_ivr_set_xml_chan_vars(
        xml: switch_xml_t,
        channel: *mut switch_channel_t,
        off: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_ivr_parse_event(
        session: *mut switch_core_session_t,
        event: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_all_events(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_next_event(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_all_messages(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_all_signal_data(session: *mut switch_core_session_t)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_signal_data(
        session: *mut switch_core_session_t,
        all: switch_bool_t,
        only_session_thread: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_parse_next_signal_data(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_process_indications(
        session: *mut switch_core_session_t,
        message: *mut switch_core_session_message_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_sleep(
        session: *mut switch_core_session_t,
        ms: u32,
        sync: switch_bool_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_park(
        session: *mut switch_core_session_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_collect_digits_callback(
        session: *mut switch_core_session_t,
        args: *mut switch_input_args_t,
        digit_timeout: u32,
        abs_timeout: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_collect_digits_count(
        session: *mut switch_core_session_t,
        buf: *mut ::std::os::raw::c_char,
        buflen: switch_size_t,
        maxdigits: switch_size_t,
        terminators: *const ::std::os::raw::c_char,
        terminator: *mut ::std::os::raw::c_char,
        first_timeout: u32,
        digit_timeout: u32,
        abs_timeout: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_play_and_detect_speech(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        mod_name: *const ::std::os::raw::c_char,
        grammar: *const ::std::os::raw::c_char,
        result: *mut *mut ::std::os::raw::c_char,
        input_timeout: u32,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_init(
        session: *mut switch_core_session_t,
        mod_name: *const ::std::os::raw::c_char,
        dest: *const ::std::os::raw::c_char,
        ah: *mut switch_asr_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech(
        session: *mut switch_core_session_t,
        mod_name: *const ::std::os::raw::c_char,
        grammar: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        dest: *const ::std::os::raw::c_char,
        ah: *mut switch_asr_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_detect_speech(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_pause_detect_speech(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_resume_detect_speech(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_load_grammar(
        session: *mut switch_core_session_t,
        grammar: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_unload_grammar(
        session: *mut switch_core_session_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_enable_grammar(
        session: *mut switch_core_session_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_disable_grammar(
        session: *mut switch_core_session_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_disable_all_grammars(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_set_param_detect_speech(
        session: *mut switch_core_session_t,
        name: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_speech_start_input_timers(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_session(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        limit: u32,
        fh: *mut switch_file_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_session_event(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        limit: u32,
        fh: *mut switch_file_handle_t,
        variables: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_transfer_recordings(
        orig_session: *mut switch_core_session_t,
        new_session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_eavesdrop_pop_eavesdropper(
        session: *mut switch_core_session_t,
        sessionp: *mut *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_eavesdrop_exec_all(
        session: *mut switch_core_session_t,
        app: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_eavesdrop_update_display(
        session: *mut switch_core_session_t,
        name: *const ::std::os::raw::c_char,
        number: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_eavesdrop_session(
        session: *mut switch_core_session_t,
        uuid: *const ::std::os::raw::c_char,
        require_group: *const ::std::os::raw::c_char,
        flags: switch_eavesdrop_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_displace_session(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        limit: u32,
        flags: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_displace_session(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_record_session(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_session_audio(
        session: *mut switch_core_session_t,
        cmd: *const ::std::os::raw::c_char,
        direction: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_session_audio(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_inband_dtmf_session(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_inband_dtmf_session(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_inband_dtmf_generate_session(
        session: *mut switch_core_session_t,
        read_stream: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_inband_dtmf_generate_session(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_session_echo(
        session: *mut switch_core_session_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_tone_detect_session(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_tone_detect_session(
        session: *mut switch_core_session_t,
        key: *const ::std::os::raw::c_char,
        tone_spec: *const ::std::os::raw::c_char,
        flags: *const ::std::os::raw::c_char,
        timeout: time_t,
        hits: ::std::os::raw::c_int,
        app: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        callback: switch_tone_detect_callback_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_play_file(
        session: *mut switch_core_session_t,
        fh: *mut switch_file_handle_t,
        file: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_audio(
        session: *mut switch_core_session_t,
        thresh: u32,
        audio_hits: u32,
        timeout_ms: u32,
        file: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_detect_silence(
        session: *mut switch_core_session_t,
        thresh: u32,
        silence_hits: u32,
        timeout_ms: u32,
        file: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_wait_for_silence(
        session: *mut switch_core_session_t,
        thresh: u32,
        silence_hits: u32,
        listen_hits: u32,
        timeout_ms: u32,
        file: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_gentones(
        session: *mut switch_core_session_t,
        script: *const ::std::os::raw::c_char,
        loops: i32,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_file(
        session: *mut switch_core_session_t,
        fh: *mut switch_file_handle_t,
        file: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
        limit: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_file_event(
        session: *mut switch_core_session_t,
        fh: *mut switch_file_handle_t,
        file: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
        limit: u32,
        vars: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_play_and_get_digits(
        session: *mut switch_core_session_t,
        min_digits: u32,
        max_digits: u32,
        max_tries: u32,
        timeout: u32,
        valid_terminators: *const ::std::os::raw::c_char,
        audio_file: *const ::std::os::raw::c_char,
        bad_input_audio_file: *const ::std::os::raw::c_char,
        var_name: *const ::std::os::raw::c_char,
        digit_buffer: *mut ::std::os::raw::c_char,
        digit_buffer_length: u32,
        digits_regex: *const ::std::os::raw::c_char,
        digit_timeout: u32,
        transfer_on_failure: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_speak_text_handle(
        session: *mut switch_core_session_t,
        sh: *mut switch_speech_handle_t,
        codec: *mut switch_codec_t,
        timer: *mut switch_timer_t,
        text: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_clear_speech_cache(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_ivr_speak_text(
        session: *mut switch_core_session_t,
        tts_name: *const ::std::os::raw::c_char,
        voice_name: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_originate(
        session: *mut switch_core_session_t,
        bleg: *mut *mut switch_core_session_t,
        cause: *mut switch_call_cause_t,
        bridgeto: *const ::std::os::raw::c_char,
        timelimit_sec: u32,
        table: *const switch_state_handler_table_t,
        cid_name_override: *const ::std::os::raw::c_char,
        cid_num_override: *const ::std::os::raw::c_char,
        caller_profile_override: *mut switch_caller_profile_t,
        ovars: *mut switch_event_t,
        flags: switch_originate_flag_t,
        cancel_cause: *mut switch_call_cause_t,
        dh: *mut switch_dial_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_enterprise_originate(
        session: *mut switch_core_session_t,
        bleg: *mut *mut switch_core_session_t,
        cause: *mut switch_call_cause_t,
        bridgeto: *const ::std::os::raw::c_char,
        timelimit_sec: u32,
        table: *const switch_state_handler_table_t,
        cid_name_override: *const ::std::os::raw::c_char,
        cid_num_override: *const ::std::os::raw::c_char,
        caller_profile_override: *mut switch_caller_profile_t,
        ovars: *mut switch_event_t,
        flags: switch_originate_flag_t,
        cancel_cause: *mut switch_call_cause_t,
        hl: *mut switch_dial_handle_list_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_bridge_display(
        session: *mut switch_core_session_t,
        peer_session: *mut switch_core_session_t,
    );
}
extern "C" {
    pub fn switch_ivr_multi_threaded_bridge(
        session: *mut switch_core_session_t,
        peer_session: *mut switch_core_session_t,
        dtmf_callback: switch_input_callback_function_t,
        session_data: *mut ::std::os::raw::c_void,
        peer_session_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_bridge_bleg(
        session: *mut switch_core_session_t,
        peer_session: *mut switch_core_session_t,
        max_wait_ms: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_signal_bridge(
        session: *mut switch_core_session_t,
        peer_session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_check_hold(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_ivr_session_transfer(
        session: *mut switch_core_session_t,
        extension: *const ::std::os::raw::c_char,
        dialplan: *const ::std::os::raw::c_char,
        context: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_schedule_transfer(
        runtime: time_t,
        uuid: *const ::std::os::raw::c_char,
        extension: *mut ::std::os::raw::c_char,
        dialplan: *mut ::std::os::raw::c_char,
        context: *mut ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn switch_ivr_schedule_hangup(
        runtime: time_t,
        uuid: *const ::std::os::raw::c_char,
        cause: switch_call_cause_t,
        bleg: switch_bool_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_ivr_uuid_bridge(
        originator_uuid: *const ::std::os::raw::c_char,
        originatee_uuid: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_media(
        uuid: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_3p_media(
        uuid: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_nomedia(
        uuid: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_3p_nomedia(
        uuid: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_bg_media(
        uuid: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
        on: switch_bool_t,
        is3p: switch_bool_t,
        delay: u32,
    );
}
extern "C" {
    pub fn switch_ivr_hold_uuid(
        uuid: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        moh: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_hold_toggle_uuid(
        uuid: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
        moh: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_unhold_uuid(uuid: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_hold(
        session: *mut switch_core_session_t,
        message: *const ::std::os::raw::c_char,
        moh: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_unhold(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_schedule_broadcast(
        runtime: time_t,
        uuid: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_ivr_broadcast(
        uuid: *const ::std::os::raw::c_char,
        path: *const ::std::os::raw::c_char,
        flags: switch_media_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_broadcast_in_thread(
        session: *mut switch_core_session_t,
        app: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_ivr_transfer_variable(
        sessa: *mut switch_core_session_t,
        sessb: *mut switch_core_session_t,
        var: *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
pub type switch_ivr_digit_stream_parser_t = switch_ivr_digit_stream_parser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_digit_stream {
    _unused: [u8; 0],
}
pub type switch_ivr_digit_stream_t = switch_ivr_digit_stream;
extern "C" {
    pub fn switch_ivr_digit_stream_parser_new(
        pool: *mut switch_memory_pool_t,
        parser: *mut *mut switch_ivr_digit_stream_parser_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_parser_destroy(
        parser: *mut switch_ivr_digit_stream_parser_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_new(
        parser: *mut switch_ivr_digit_stream_parser_t,
        stream: *mut *mut switch_ivr_digit_stream_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_destroy(
        stream: *mut *mut switch_ivr_digit_stream_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_parser_set_event(
        parser: *mut switch_ivr_digit_stream_parser_t,
        digits: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_parser_del_event(
        parser: *mut switch_ivr_digit_stream_parser_t,
        digits: *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_parser_feed(
        parser: *mut switch_ivr_digit_stream_parser_t,
        stream: *mut switch_ivr_digit_stream_t,
        digit: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_ivr_digit_stream_reset(stream: *mut switch_ivr_digit_stream_t)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_digit_stream_parser_set_terminator(
        parser: *mut switch_ivr_digit_stream_parser_t,
        digit: ::std::os::raw::c_char,
    ) -> switch_status_t;
}
impl switch_ivr_menu_flags {
    pub const SWITCH_IVR_MENU_FLAG_FALLTOMAIN: switch_ivr_menu_flags = switch_ivr_menu_flags(1);
}
impl switch_ivr_menu_flags {
    pub const SWITCH_IVR_MENU_FLAG_FREEPOOL: switch_ivr_menu_flags = switch_ivr_menu_flags(2);
}
impl switch_ivr_menu_flags {
    pub const SWITCH_IVR_MENU_FLAG_STACK: switch_ivr_menu_flags = switch_ivr_menu_flags(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_ivr_menu_flags(pub ::std::os::raw::c_uint);
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_DIE: switch_ivr_action_t = switch_ivr_action_t(0);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_EXECMENU: switch_ivr_action_t = switch_ivr_action_t(1);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_EXECAPP: switch_ivr_action_t = switch_ivr_action_t(2);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_PLAYSOUND: switch_ivr_action_t = switch_ivr_action_t(3);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_BACK: switch_ivr_action_t = switch_ivr_action_t(4);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_TOMAIN: switch_ivr_action_t = switch_ivr_action_t(5);
}
impl switch_ivr_action_t {
    pub const SWITCH_IVR_ACTION_NOOP: switch_ivr_action_t = switch_ivr_action_t(6);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_ivr_action_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_menu {
    _unused: [u8; 0],
}
pub type switch_ivr_menu_action_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_ivr_menu,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_void,
    ) -> switch_ivr_action_t,
>;
pub type switch_ivr_menu_t = switch_ivr_menu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_menu_action {
    _unused: [u8; 0],
}
pub type switch_ivr_menu_action_t = switch_ivr_menu_action;
extern "C" {
    pub fn switch_ivr_menu_init(
        new_menu: *mut *mut switch_ivr_menu_t,
        main: *mut switch_ivr_menu_t,
        name: *const ::std::os::raw::c_char,
        greeting_sound: *const ::std::os::raw::c_char,
        short_greeting_sound: *const ::std::os::raw::c_char,
        invalid_sound: *const ::std::os::raw::c_char,
        exit_sound: *const ::std::os::raw::c_char,
        transfer_sound: *const ::std::os::raw::c_char,
        confirm_macro: *const ::std::os::raw::c_char,
        confirm_key: *const ::std::os::raw::c_char,
        tts_engine: *const ::std::os::raw::c_char,
        tts_voice: *const ::std::os::raw::c_char,
        confirm_attempts: ::std::os::raw::c_int,
        inter_timeout: ::std::os::raw::c_int,
        digit_len: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_int,
        max_failures: ::std::os::raw::c_int,
        max_timeouts: ::std::os::raw::c_int,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_bind_action(
        menu: *mut switch_ivr_menu_t,
        ivr_action: switch_ivr_action_t,
        arg: *const ::std::os::raw::c_char,
        bind: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_bind_function(
        menu: *mut switch_ivr_menu_t,
        function: switch_ivr_menu_action_function_t,
        arg: *const ::std::os::raw::c_char,
        bind: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_execute(
        session: *mut switch_core_session_t,
        stack: *mut switch_ivr_menu_t,
        name: *mut ::std::os::raw::c_char,
        obj: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_stack_free(stack: *mut switch_ivr_menu_t) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_ivr_menu_xml_ctx {
    _unused: [u8; 0],
}
pub type switch_ivr_menu_xml_ctx_t = switch_ivr_menu_xml_ctx;
extern "C" {
    pub fn switch_ivr_menu_stack_xml_build(
        xml_menu_ctx: *mut switch_ivr_menu_xml_ctx_t,
        menu_stack: *mut *mut switch_ivr_menu_t,
        xml_menus: switch_xml_t,
        xml_menu: switch_xml_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_str2action(
        action_name: *const ::std::os::raw::c_char,
        action: *mut switch_ivr_action_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_stack_xml_add_custom(
        xml_menu_ctx: *mut switch_ivr_menu_xml_ctx_t,
        name: *const ::std::os::raw::c_char,
        function: switch_ivr_menu_action_function_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_menu_stack_xml_init(
        xml_menu_ctx: *mut *mut switch_ivr_menu_xml_ctx_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_phrase_macro_event(
        session: *mut switch_core_session_t,
        macro_name: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_char,
        event: *mut switch_event_t,
        lang: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_delay_echo(session: *mut switch_core_session_t, delay_ms: u32);
}
extern "C" {
    pub fn switch_ivr_find_bridged_uuid(
        uuid: *const ::std::os::raw::c_char,
        b_uuid: *mut ::std::os::raw::c_char,
        blen: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_intercept_session(
        session: *mut switch_core_session_t,
        uuid: *const ::std::os::raw::c_char,
        bleg: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_park_session(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_ivr_wait_for_answer(
        session: *mut switch_core_session_t,
        peer_session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_read(
        session: *mut switch_core_session_t,
        min_digits: u32,
        max_digits: u32,
        prompt_audio_file: *const ::std::os::raw::c_char,
        var_name: *const ::std::os::raw::c_char,
        digit_buffer: *mut ::std::os::raw::c_char,
        digit_buffer_length: switch_size_t,
        timeout: u32,
        valid_terminators: *const ::std::os::raw::c_char,
        digit_timeout: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_block_dtmf_session(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_unblock_dtmf_session(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_bind_dtmf_meta_session(
        session: *mut switch_core_session_t,
        key: u32,
        bind_flags: switch_bind_flag_t,
        app: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_unbind_dtmf_meta_session(
        session: *mut switch_core_session_t,
        key: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_soft_hold(
        session: *mut switch_core_session_t,
        unhold_key: *const ::std::os::raw::c_char,
        moh_a: *const ::std::os::raw::c_char,
        moh_b: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_say(
        session: *mut switch_core_session_t,
        tosay: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
        say_type: *const ::std::os::raw::c_char,
        say_method: *const ::std::os::raw::c_char,
        say_gender: *const ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_say_string(
        session: *mut switch_core_session_t,
        lang: *const ::std::os::raw::c_char,
        ext: *const ::std::os::raw::c_char,
        tosay: *const ::std::os::raw::c_char,
        module_name: *const ::std::os::raw::c_char,
        say_type: *const ::std::os::raw::c_char,
        say_method: *const ::std::os::raw::c_char,
        say_gender: *const ::std::os::raw::c_char,
        rstr: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_get_say_method_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> switch_say_method_t;
}
extern "C" {
    pub fn switch_ivr_get_say_gender_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> switch_say_gender_t;
}
extern "C" {
    pub fn switch_ivr_get_say_type_by_name(
        name: *const ::std::os::raw::c_char,
    ) -> switch_say_type_t;
}
extern "C" {
    pub fn switch_ivr_say_spell(
        session: *mut switch_core_session_t,
        tosay: *mut ::std::os::raw::c_char,
        say_args: *mut switch_say_args_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_say_ip(
        session: *mut switch_core_session_t,
        tosay: *mut ::std::os::raw::c_char,
        number_func: switch_say_callback_t,
        say_args: *mut switch_say_args_t,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_set_user(
        session: *mut switch_core_session_t,
        data: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_set_user_extended(
        session: *mut switch_core_session_t,
        data: *const ::std::os::raw::c_char,
        params: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_set_user_xml(
        session: *mut switch_core_session_t,
        prefix: *const ::std::os::raw::c_char,
        user: *const ::std::os::raw::c_char,
        domain: *const ::std::os::raw::c_char,
        x_user: switch_xml_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_sound_test(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_process_import(
        session: *mut switch_core_session_t,
        peer_channel: *mut switch_channel_t,
        varname: *const ::std::os::raw::c_char,
        prefix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_ivr_uuid_exists(uuid: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_ivr_uuid_force_exists(uuid: *const ::std::os::raw::c_char) -> switch_bool_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_is_parsing(dmachine: *mut switch_ivr_dmachine_t) -> switch_bool_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_last_ping(dmachine: *mut switch_ivr_dmachine_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_get_name(
        dmachine: *mut switch_ivr_dmachine_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_ivr_dmachine_set_match_callback(
        dmachine: *mut switch_ivr_dmachine_t,
        match_callback: switch_ivr_dmachine_callback_t,
    );
}
extern "C" {
    pub fn switch_ivr_dmachine_set_nonmatch_callback(
        dmachine: *mut switch_ivr_dmachine_t,
        nonmatch_callback: switch_ivr_dmachine_callback_t,
    );
}
extern "C" {
    pub fn switch_ivr_dmachine_create(
        dmachine_p: *mut *mut switch_ivr_dmachine_t,
        name: *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
        digit_timeout: u32,
        input_timeout: u32,
        match_callback: switch_ivr_dmachine_callback_t,
        nonmatch_callback: switch_ivr_dmachine_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_destroy(dmachine: *mut *mut switch_ivr_dmachine_t);
}
extern "C" {
    pub fn switch_ivr_dmachine_bind(
        dmachine: *mut switch_ivr_dmachine_t,
        realm: *const ::std::os::raw::c_char,
        digits: *const ::std::os::raw::c_char,
        is_priority: switch_byte_t,
        key: i32,
        callback: switch_ivr_dmachine_callback_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_feed(
        dmachine: *mut switch_ivr_dmachine_t,
        digits: *const ::std::os::raw::c_char,
        match_: *mut *mut switch_ivr_dmachine_match_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_clear(dmachine: *mut switch_ivr_dmachine_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_ping(
        dmachine: *mut switch_ivr_dmachine_t,
        match_p: *mut *mut switch_ivr_dmachine_match_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_get_match(
        dmachine: *mut switch_ivr_dmachine_t,
    ) -> *mut switch_ivr_dmachine_match_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_get_failed_digits(
        dmachine: *mut switch_ivr_dmachine_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_ivr_dmachine_set_digit_timeout_ms(
        dmachine: *mut switch_ivr_dmachine_t,
        digit_timeout_ms: u32,
    );
}
extern "C" {
    pub fn switch_ivr_dmachine_set_input_timeout_ms(
        dmachine: *mut switch_ivr_dmachine_t,
        input_timeout_ms: u32,
    );
}
extern "C" {
    pub fn switch_ivr_dmachine_clear_realm(
        dmachine: *mut switch_ivr_dmachine_t,
        realm: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_dmachine_set_realm(
        dmachine: *mut switch_ivr_dmachine_t,
        realm: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_get_file_handle(
        session: *mut switch_core_session_t,
        fh: *mut *mut switch_file_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_release_file_handle(
        session: *mut switch_core_session_t,
        fh: *mut *mut switch_file_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_process_fh(
        session: *mut switch_core_session_t,
        cmd: *const ::std::os::raw::c_char,
        fhp: *mut switch_file_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_insert_file(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        insert_file: *const ::std::os::raw::c_char,
        sample_point: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_create_message_reply(
        reply: *mut *mut switch_event_t,
        message: *mut switch_event_t,
        new_proto: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_check_presence_mapping(
        exten_name: *const ::std::os::raw::c_char,
        domain_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_ivr_kill_uuid(
        uuid: *const ::std::os::raw::c_char,
        cause: switch_call_cause_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_blind_transfer_ack(
        session: *mut switch_core_session_t,
        success: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_session_mask(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        on: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_record_session_pause(
        session: *mut switch_core_session_t,
        file: *const ::std::os::raw::c_char,
        on: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_stop_video_write_overlay_session(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_video_write_overlay_session(
        session: *mut switch_core_session_t,
        img_path: *const ::std::os::raw::c_char,
        pos: switch_img_position_t,
        alpha: u8,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_capture_text(
        session: *mut switch_core_session_t,
        on: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_create(handle: *mut *mut switch_dial_handle_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_create_json_obj(
        handle: *mut *mut switch_dial_handle_t,
        json: *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_create_json(
        handle: *mut *mut switch_dial_handle_t,
        handle_string: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_destroy(handle: *mut *mut switch_dial_handle_t);
}
extern "C" {
    pub fn switch_dial_handle_serialize_json_obj(
        handle: *mut switch_dial_handle_t,
        json: *mut *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_serialize_json(
        handle: *mut switch_dial_handle_t,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_add_leg_list(
        handle: *mut switch_dial_handle_t,
        leg_listP: *mut *mut switch_dial_leg_list_t,
    );
}
extern "C" {
    pub fn switch_dial_leg_list_add_leg(
        parent: *mut switch_dial_leg_list_t,
        legP: *mut *mut switch_dial_leg_t,
        dial_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_dial_leg_list_add_leg_printf(
        parent: *mut switch_dial_leg_list_t,
        legP: *mut *mut switch_dial_leg_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_dial_handle_add_global_var(
        handle: *mut switch_dial_handle_t,
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_dial_handle_add_global_var_printf(
        handle: *mut switch_dial_handle_t,
        var: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_dial_handle_add_leg_var(
        leg: *mut switch_dial_leg_t,
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_add_leg_var_printf(
        leg: *mut switch_dial_leg_t,
        var: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_get_peers(
        handle: *mut switch_dial_handle_t,
        idx: ::std::os::raw::c_int,
        array: *mut *mut ::std::os::raw::c_char,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_dial_handle_get_vars(
        handle: *mut switch_dial_handle_t,
        idx: ::std::os::raw::c_int,
        array: *mut *mut switch_event_t,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_dial_handle_get_global_vars(
        handle: *mut switch_dial_handle_t,
    ) -> *mut switch_event_t;
}
extern "C" {
    pub fn switch_dial_leg_get_vars(leg: *mut switch_dial_leg_t) -> *mut switch_event_t;
}
extern "C" {
    pub fn switch_dial_leg_get_var(
        leg: *mut switch_dial_leg_t,
        key: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_dial_handle_get_total(handle: *mut switch_dial_handle_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_dial_handle_list_serialize_json_obj(
        hl: *mut switch_dial_handle_list_t,
        json: *mut *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_serialize_json(
        hl: *mut switch_dial_handle_list_t,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_create_json_obj(
        handle: *mut *mut switch_dial_handle_list_t,
        json: *mut cJSON,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_create_json(
        handle: *mut *mut switch_dial_handle_list_t,
        handle_string: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_create(
        hl: *mut *mut switch_dial_handle_list_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_create_handle(
        hl: *mut switch_dial_handle_list_t,
        handle: *mut *mut switch_dial_handle_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_dial_handle_list_destroy(hl: *mut *mut switch_dial_handle_list_t);
}
extern "C" {
    pub fn switch_dial_handle_list_add_global_var(
        hl: *mut switch_dial_handle_list_t,
        var: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_dial_handle_list_add_global_var_printf(
        hl: *mut switch_dial_handle_list_t,
        var: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn switch_ivr_enterprise_orig_and_bridge(
        session: *mut switch_core_session_t,
        data: *const ::std::os::raw::c_char,
        hl: *mut switch_dial_handle_list_t,
        cause: *mut switch_call_cause_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_orig_and_bridge(
        session: *mut switch_core_session_t,
        data: *const ::std::os::raw::c_char,
        dh: *mut switch_dial_handle_t,
        cause: *mut switch_call_cause_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_send_prompt(
        session: *mut switch_core_session_t,
        type_: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
        regex: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_ivr_play_and_collect_input(
        session: *mut switch_core_session_t,
        prompt: *const ::std::os::raw::c_char,
        recognizer_mod_name: *const ::std::os::raw::c_char,
        recognizer_grammar: *const ::std::os::raw::c_char,
        min_digits: ::std::os::raw::c_int,
        max_digits: ::std::os::raw::c_int,
        terminators: *const ::std::os::raw::c_char,
        digit_timeout: u32,
        recognition_result: *mut *mut cJSON,
        digits_collected: *mut *mut ::std::os::raw::c_char,
        terminator_collected: *mut ::std::os::raw::c_char,
        args: *mut switch_input_args_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_packet_t {
    pub header: switch_rtp_hdr_t,
    pub body: [::std::os::raw::c_char; 16396usize],
    pub ext: *mut switch_rtp_hdr_ext_t,
    pub ebody: *mut ::std::os::raw::c_char,
}
impl switch_rtp_crypto_direction_t {
    pub const SWITCH_RTP_CRYPTO_SEND: switch_rtp_crypto_direction_t =
        switch_rtp_crypto_direction_t(0);
}
impl switch_rtp_crypto_direction_t {
    pub const SWITCH_RTP_CRYPTO_RECV: switch_rtp_crypto_direction_t =
        switch_rtp_crypto_direction_t(1);
}
impl switch_rtp_crypto_direction_t {
    pub const SWITCH_RTP_CRYPTO_SEND_RTCP: switch_rtp_crypto_direction_t =
        switch_rtp_crypto_direction_t(2);
}
impl switch_rtp_crypto_direction_t {
    pub const SWITCH_RTP_CRYPTO_RECV_RTCP: switch_rtp_crypto_direction_t =
        switch_rtp_crypto_direction_t(3);
}
impl switch_rtp_crypto_direction_t {
    pub const SWITCH_RTP_CRYPTO_MAX: switch_rtp_crypto_direction_t =
        switch_rtp_crypto_direction_t(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_rtp_crypto_direction_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_srtp_crypto_suite_s {
    pub name: *mut ::std::os::raw::c_char,
    pub alias: *const ::std::os::raw::c_char,
    pub type_: switch_rtp_crypto_key_type_t,
    pub keysalt_len: ::std::os::raw::c_int,
    pub salt_len: ::std::os::raw::c_int,
}
pub type switch_srtp_crypto_suite_t = switch_srtp_crypto_suite_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_crypto_key {
    pub index: u32,
    pub type_: switch_rtp_crypto_key_type_t,
    pub keysalt: [::std::os::raw::c_uchar; 64usize],
    pub keylen: switch_size_t,
    pub next: *mut switch_rtp_crypto_key,
}
pub type switch_rtp_crypto_key_t = switch_rtp_crypto_key;
impl ice_proto_t {
    pub const IPR_RTP: ice_proto_t = ice_proto_t(0);
}
impl ice_proto_t {
    pub const IPR_RTCP: ice_proto_t = ice_proto_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ice_proto_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct icand_s {
    pub foundation: *mut ::std::os::raw::c_char,
    pub component_id: ::std::os::raw::c_int,
    pub transport: *mut ::std::os::raw::c_char,
    pub priority: u32,
    pub con_addr: *mut ::std::os::raw::c_char,
    pub con_port: switch_port_t,
    pub cand_type: *mut ::std::os::raw::c_char,
    pub raddr: *mut ::std::os::raw::c_char,
    pub rport: switch_port_t,
    pub generation: *mut ::std::os::raw::c_char,
    pub ready: u8,
}
pub type icand_t = icand_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ice_s {
    pub cands: [[icand_t; 2usize]; 50usize],
    pub cand_idx: [::std::os::raw::c_int; 2usize],
    pub chosen: [::std::os::raw::c_int; 2usize],
    pub is_chosen: [::std::os::raw::c_int; 2usize],
    pub ufrag: *mut ::std::os::raw::c_char,
    pub pwd: *mut ::std::os::raw::c_char,
    pub options: *mut ::std::os::raw::c_char,
}
pub type ice_t = ice_s;
impl rtcp_pt_t {
    pub const _RTCP_PT_FIR: rtcp_pt_t = rtcp_pt_t(192);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_IJ: rtcp_pt_t = rtcp_pt_t(195);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_SR: rtcp_pt_t = rtcp_pt_t(200);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_RR: rtcp_pt_t = rtcp_pt_t(201);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_SDES: rtcp_pt_t = rtcp_pt_t(202);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_BYE: rtcp_pt_t = rtcp_pt_t(203);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_APP: rtcp_pt_t = rtcp_pt_t(204);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_RTPFB: rtcp_pt_t = rtcp_pt_t(205);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_PSFB: rtcp_pt_t = rtcp_pt_t(206);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_XR: rtcp_pt_t = rtcp_pt_t(207);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_AVB: rtcp_pt_t = rtcp_pt_t(208);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_RSI: rtcp_pt_t = rtcp_pt_t(209);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_TOKEN: rtcp_pt_t = rtcp_pt_t(210);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_IDMS: rtcp_pt_t = rtcp_pt_t(211);
}
impl rtcp_pt_t {
    pub const _RTCP_PT_LAST: rtcp_pt_t = rtcp_pt_t(255);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct rtcp_pt_t(pub ::std::os::raw::c_uint);
impl rtcp_sdes_t {
    pub const _RTCP_SDES_END: rtcp_sdes_t = rtcp_sdes_t(0);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_CNAME: rtcp_sdes_t = rtcp_sdes_t(1);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_NAME: rtcp_sdes_t = rtcp_sdes_t(2);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_EMAIL: rtcp_sdes_t = rtcp_sdes_t(3);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_PHONE: rtcp_sdes_t = rtcp_sdes_t(4);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_LOC: rtcp_sdes_t = rtcp_sdes_t(5);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_TOOL: rtcp_sdes_t = rtcp_sdes_t(6);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_NOTE: rtcp_sdes_t = rtcp_sdes_t(7);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_PRIV: rtcp_sdes_t = rtcp_sdes_t(8);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_H323: rtcp_sdes_t = rtcp_sdes_t(9);
}
impl rtcp_sdes_t {
    pub const _RTCP_SDES_APSI: rtcp_sdes_t = rtcp_sdes_t(10);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct rtcp_sdes_t(pub ::std::os::raw::c_uint);
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_NACK: rtcp_rtpfb_t = rtcp_rtpfb_t(1);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_TMMBR: rtcp_rtpfb_t = rtcp_rtpfb_t(3);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_TMMBN: rtcp_rtpfb_t = rtcp_rtpfb_t(4);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_SR_REQ: rtcp_rtpfb_t = rtcp_rtpfb_t(5);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_RAMS: rtcp_rtpfb_t = rtcp_rtpfb_t(6);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_TLLEI: rtcp_rtpfb_t = rtcp_rtpfb_t(7);
}
impl rtcp_rtpfb_t {
    pub const _RTCP_RTPFB_ECN_FB: rtcp_rtpfb_t = rtcp_rtpfb_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct rtcp_rtpfb_t(pub ::std::os::raw::c_uint);
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_PLI: rtcp_psfb_t = rtcp_psfb_t(1);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_SLI: rtcp_psfb_t = rtcp_psfb_t(2);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_RPSI: rtcp_psfb_t = rtcp_psfb_t(3);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_FIR: rtcp_psfb_t = rtcp_psfb_t(4);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_TSTR: rtcp_psfb_t = rtcp_psfb_t(5);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_TSTN: rtcp_psfb_t = rtcp_psfb_t(6);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_VBCM: rtcp_psfb_t = rtcp_psfb_t(7);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_PSLEI: rtcp_psfb_t = rtcp_psfb_t(8);
}
impl rtcp_psfb_t {
    pub const _RTCP_PSFB_AFB: rtcp_psfb_t = rtcp_psfb_t(15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct rtcp_psfb_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_rtp_add_crypto_key(
        rtp_session: *mut switch_rtp_t,
        direction: switch_rtp_crypto_direction_t,
        index: u32,
        ssec: *mut switch_secure_settings_t,
    ) -> switch_status_t;
}
pub type switch_rtp_invalid_handler_t = ::std::option::Option<
    unsafe extern "C" fn(
        rtp_session: *mut switch_rtp_t,
        sock: *mut switch_socket_t,
        data: *mut ::std::os::raw::c_void,
        datalen: switch_size_t,
        from_addr: *mut switch_sockaddr_t,
    ),
>;
extern "C" {
    pub fn switch_rtp_get_random(buf: *mut ::std::os::raw::c_void, len: u32);
}
extern "C" {
    pub fn switch_rtp_init(pool: *mut switch_memory_pool_t);
}
extern "C" {
    pub fn switch_rtp_shutdown();
}
extern "C" {
    pub fn switch_rtp_set_start_port(port: switch_port_t) -> switch_port_t;
}
extern "C" {
    pub fn switch_rtp_set_ssrc(rtp_session: *mut switch_rtp_t, ssrc: u32) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_set_remote_ssrc(rtp_session: *mut switch_rtp_t, ssrc: u32)
        -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_set_end_port(port: switch_port_t) -> switch_port_t;
}
extern "C" {
    pub fn switch_rtp_request_port(ip: *const ::std::os::raw::c_char) -> switch_port_t;
}
extern "C" {
    pub fn switch_rtp_release_port(ip: *const ::std::os::raw::c_char, port: switch_port_t);
}
extern "C" {
    pub fn switch_rtp_set_interval(
        rtp_session: *mut switch_rtp_t,
        ms_per_packet: u32,
        samples_per_interval: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_change_interval(
        rtp_session: *mut switch_rtp_t,
        ms_per_packet: u32,
        samples_per_interval: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_create(
        new_rtp_session: *mut *mut switch_rtp_t,
        payload: switch_payload_t,
        samples_per_interval: u32,
        ms_per_packet: u32,
        flags: *mut switch_rtp_flag_t,
        timer_name: *mut ::std::os::raw::c_char,
        err: *mut *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_new(
        rx_host: *const ::std::os::raw::c_char,
        rx_port: switch_port_t,
        tx_host: *const ::std::os::raw::c_char,
        tx_port: switch_port_t,
        payload: switch_payload_t,
        samples_per_interval: u32,
        ms_per_packet: u32,
        flags: *mut switch_rtp_flag_t,
        timer_name: *mut ::std::os::raw::c_char,
        err: *mut *const ::std::os::raw::c_char,
        pool: *mut switch_memory_pool_t,
        bundle_internal_ports: switch_port_t,
        bundle_external_port: switch_port_t,
    ) -> *mut switch_rtp_t;
}
extern "C" {
    pub fn switch_rtp_set_remote_address(
        rtp_session: *mut switch_rtp_t,
        host: *const ::std::os::raw::c_char,
        port: switch_port_t,
        remote_rtcp_port: switch_port_t,
        change_adv_addr: switch_bool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_reset_jb(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_get_remote_host(
        rtp_session: *mut switch_rtp_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_rtp_get_remote_port(rtp_session: *mut switch_rtp_t) -> switch_port_t;
}
extern "C" {
    pub fn switch_rtp_reset_media_timer(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_set_max_missed_packets(rtp_session: *mut switch_rtp_t, max: u32);
}
extern "C" {
    pub fn switch_rtp_set_media_timeout(rtp_session: *mut switch_rtp_t, ms: u32);
}
extern "C" {
    pub fn switch_rtp_udptl_mode(rtp_session: *mut switch_rtp_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_reset(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_set_local_address(
        rtp_session: *mut switch_rtp_t,
        host: *const ::std::os::raw::c_char,
        port: switch_port_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_kill_socket(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_break(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_flush(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_ready(rtp_session: *mut switch_rtp_t) -> u8;
}
extern "C" {
    pub fn switch_rtp_destroy(rtp_session: *mut *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_sync_stats(rtp_session: *mut switch_rtp_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_activate_ice(
        rtp_session: *mut switch_rtp_t,
        login: *mut ::std::os::raw::c_char,
        rlogin: *mut ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        rpassword: *const ::std::os::raw::c_char,
        proto: ice_proto_t,
        type_: switch_core_media_ice_type_t,
        ice_params: *mut ice_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_activate_rtcp(
        rtp_session: *mut switch_rtp_t,
        send_rate: ::std::os::raw::c_int,
        remote_port: switch_port_t,
        mux: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_get_media_timer(rtp_session: *mut switch_rtp_t) -> *mut switch_timer_t;
}
extern "C" {
    pub fn switch_rtp_set_video_buffer_size(
        rtp_session: *mut switch_rtp_t,
        frames: u32,
        max_frames: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_get_video_buffer_size(
        rtp_session: *mut switch_rtp_t,
        min_frame_len: *mut u32,
        max_frame_len: *mut u32,
        cur_frame_len: *mut u32,
        highest_frame_len: *mut u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_activate_jitter_buffer(
        rtp_session: *mut switch_rtp_t,
        queue_frames: u32,
        max_queue_frames: u32,
        samples_per_packet: u32,
        samples_per_second: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_debug_jitter_buffer(
        rtp_session: *mut switch_rtp_t,
        name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_deactivate_jitter_buffer(rtp_session: *mut switch_rtp_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_pause_jitter_buffer(
        rtp_session: *mut switch_rtp_t,
        pause: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_get_jitter_buffer(rtp_session: *mut switch_rtp_t) -> *mut switch_jb_t;
}
extern "C" {
    pub fn switch_rtp_set_flag(rtp_session: *mut switch_rtp_t, flag: switch_rtp_flag_t);
}
extern "C" {
    pub fn switch_rtp_set_flags(rtp_session: *mut switch_rtp_t, flags: *mut switch_rtp_flag_t);
}
extern "C" {
    pub fn switch_rtp_clear_flags(rtp_session: *mut switch_rtp_t, flags: *mut switch_rtp_flag_t);
}
extern "C" {
    pub fn switch_rtp_test_flag(rtp_session: *mut switch_rtp_t, flags: switch_rtp_flag_t) -> u32;
}
extern "C" {
    pub fn switch_rtp_clear_flag(rtp_session: *mut switch_rtp_t, flag: switch_rtp_flag_t);
}
extern "C" {
    pub fn switch_rtp_get_rtp_socket(rtp_session: *mut switch_rtp_t) -> *mut switch_socket_t;
}
extern "C" {
    pub fn switch_rtp_ping(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_get_default_samples_per_interval(rtp_session: *mut switch_rtp_t) -> u32;
}
extern "C" {
    pub fn switch_rtp_set_default_payload(
        rtp_session: *mut switch_rtp_t,
        payload: switch_payload_t,
    );
}
extern "C" {
    pub fn switch_rtp_get_default_payload(rtp_session: *mut switch_rtp_t) -> u32;
}
extern "C" {
    pub fn switch_rtp_set_invalid_handler(
        rtp_session: *mut switch_rtp_t,
        on_invalid: switch_rtp_invalid_handler_t,
    );
}
extern "C" {
    pub fn switch_rtp_read(
        rtp_session: *mut switch_rtp_t,
        data: *mut ::std::os::raw::c_void,
        datalen: *mut u32,
        payload_type: *mut switch_payload_t,
        flags: *mut switch_frame_flag_t,
        io_flags: switch_io_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_queue_rfc2833(
        rtp_session: *mut switch_rtp_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_queue_rfc2833_in(
        rtp_session: *mut switch_rtp_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_has_dtmf(rtp_session: *mut switch_rtp_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_rtp_dequeue_dtmf(
        rtp_session: *mut switch_rtp_t,
        dtmf: *mut switch_dtmf_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_rtp_zerocopy_read(
        rtp_session: *mut switch_rtp_t,
        data: *mut *mut ::std::os::raw::c_void,
        datalen: *mut u32,
        payload_type: *mut switch_payload_t,
        flags: *mut switch_frame_flag_t,
        io_flags: switch_io_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_zerocopy_read_frame(
        rtp_session: *mut switch_rtp_t,
        frame: *mut switch_frame_t,
        io_flags: switch_io_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtcp_zerocopy_read_frame(
        rtp_session: *mut switch_rtp_t,
        frame: *mut switch_rtcp_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn rtp_flush_read_buffer(rtp_session: *mut switch_rtp_t, flush: switch_rtp_flush_t);
}
extern "C" {
    pub fn switch_rtp_enable_vad(
        rtp_session: *mut switch_rtp_t,
        session: *mut switch_core_session_t,
        codec: *mut switch_codec_t,
        flags: switch_vad_flag_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_disable_vad(rtp_session: *mut switch_rtp_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_write_frame(
        rtp_session: *mut switch_rtp_t,
        frame: *mut switch_frame_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_rtp_write_manual(
        rtp_session: *mut switch_rtp_t,
        data: *mut ::std::os::raw::c_void,
        datalen: u32,
        m: u8,
        payload: switch_payload_t,
        ts: u32,
        flags: *mut switch_frame_flag_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_rtp_write_raw(
        rtp_session: *mut switch_rtp_t,
        data: *mut ::std::os::raw::c_void,
        bytes: *mut switch_size_t,
        process_encryption: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_get_ssrc(rtp_session: *mut switch_rtp_t) -> u32;
}
extern "C" {
    pub fn switch_rtp_set_private(
        rtp_session: *mut switch_rtp_t,
        private_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_rtp_set_telephony_event(rtp_session: *mut switch_rtp_t, te: switch_payload_t);
}
extern "C" {
    pub fn switch_rtp_set_telephony_recv_event(
        rtp_session: *mut switch_rtp_t,
        te: switch_payload_t,
    );
}
extern "C" {
    pub fn switch_rtp_set_cng_pt(rtp_session: *mut switch_rtp_t, pt: switch_payload_t);
}
extern "C" {
    pub fn switch_rtp_get_private(rtp_session: *mut switch_rtp_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_rtp_set_payload_map(
        rtp_session: *mut switch_rtp_t,
        pmap: *mut *mut payload_map_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_intentional_bugs(rtp_session: *mut switch_rtp_t, bugs: switch_rtp_bug_flag_t);
}
extern "C" {
    pub fn switch_rtp_get_stats(
        rtp_session: *mut switch_rtp_t,
        pool: *mut switch_memory_pool_t,
    ) -> *mut switch_rtp_stats_t;
}
extern "C" {
    pub fn switch_rtp_check_auto_adj(rtp_session: *mut switch_rtp_t) -> switch_byte_t;
}
extern "C" {
    pub fn switch_rtp_set_interdigit_delay(rtp_session: *mut switch_rtp_t, delay: u32);
}
extern "C" {
    pub fn switch_rtp_add_dtls(
        rtp_session: *mut switch_rtp_t,
        local_fp: *mut dtls_fingerprint_t,
        remote_fp: *mut dtls_fingerprint_t,
        type_: dtls_type_t,
        want_DTLSv1_2: u8,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_del_dtls(
        rtp_session: *mut switch_rtp_t,
        type_: dtls_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_dtls_state(
        rtp_session: *mut switch_rtp_t,
        type_: dtls_type_t,
    ) -> dtls_state_t;
}
extern "C" {
    pub fn switch_rtp_has_dtls() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_rtp_req_bitrate(rtp_session: *mut switch_rtp_t, bps: u32) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_ack_bitrate(rtp_session: *mut switch_rtp_t, bps: u32) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_video_refresh(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_video_loss(rtp_session: *mut switch_rtp_t);
}
extern "C" {
    pub fn switch_rtp_get_core_session(
        rtp_session: *mut switch_rtp_t,
    ) -> *mut switch_core_session_t;
}
impl switch_xml_flag_t {
    pub const SWITCH_XML_ROOT: switch_xml_flag_t = switch_xml_flag_t(1);
}
impl switch_xml_flag_t {
    pub const SWITCH_XML_NAMEM: switch_xml_flag_t = switch_xml_flag_t(2);
}
impl switch_xml_flag_t {
    pub const SWITCH_XML_TXTM: switch_xml_flag_t = switch_xml_flag_t(4);
}
impl switch_xml_flag_t {
    pub const SWITCH_XML_DUP: switch_xml_flag_t = switch_xml_flag_t(8);
}
impl switch_xml_flag_t {
    pub const SWITCH_XML_CDATA: switch_xml_flag_t = switch_xml_flag_t(16);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_xml_flag_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml {
    pub name: *mut ::std::os::raw::c_char,
    pub attr: *mut *mut ::std::os::raw::c_char,
    pub txt: *mut ::std::os::raw::c_char,
    pub free_path: *mut ::std::os::raw::c_char,
    pub off: switch_size_t,
    pub next: switch_xml_t,
    pub sibling: switch_xml_t,
    pub ordered: switch_xml_t,
    pub child: switch_xml_t,
    pub parent: switch_xml_t,
    pub flags: u32,
    pub is_switch_xml_root_t: switch_bool_t,
    pub refs: u32,
    pub open: *const ::std::os::raw::c_char,
    pub close: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn switch_xml_parse_str_dynamic(
        s: *mut ::std::os::raw::c_char,
        dup: switch_bool_t,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_parse_str(s: *mut ::std::os::raw::c_char, len: switch_size_t)
        -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_parse_fd(fd: ::std::os::raw::c_int) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_parse_file(file: *const ::std::os::raw::c_char) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_parse_file_simple(file: *const ::std::os::raw::c_char) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_parse_fp(fp: *mut FILE) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_child(xml: switch_xml_t, name: *const ::std::os::raw::c_char)
        -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_find_child(
        node: switch_xml_t,
        childname: *const ::std::os::raw::c_char,
        attrname: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_find_child_multi(
        node: switch_xml_t,
        childname: *const ::std::os::raw::c_char,
        ...
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_idx(xml: switch_xml_t, idx: ::std::os::raw::c_int) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_attr(
        xml: switch_xml_t,
        attr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_attr_soft(
        xml: switch_xml_t,
        attr: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_get(xml: switch_xml_t, ...) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_toxml_ex(
        xml: switch_xml_t,
        prn_header: switch_bool_t,
        use_utf8_encoding: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_toxml_nolock_ex(
        xml: switch_xml_t,
        prn_header: switch_bool_t,
        use_utf8_encoding: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_tohtml_ex(
        xml: switch_xml_t,
        prn_header: switch_bool_t,
        use_utf8_encoding: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_toxml_buf_ex(
        xml: switch_xml_t,
        buf: *mut ::std::os::raw::c_char,
        buflen: switch_size_t,
        offset: switch_size_t,
        prn_header: switch_bool_t,
        use_utf8_encoding: switch_bool_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_pi(
        xml: switch_xml_t,
        target: *const ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_free(xml: switch_xml_t);
}
extern "C" {
    pub fn switch_xml_free_in_thread(xml: switch_xml_t, stacksize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn switch_xml_error(xml: switch_xml_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_new(name: *const ::std::os::raw::c_char) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_add_child(
        xml: switch_xml_t,
        name: *const ::std::os::raw::c_char,
        off: switch_size_t,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_add_child_d(
        xml: switch_xml_t,
        name: *const ::std::os::raw::c_char,
        off: switch_size_t,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_txt(
        xml: switch_xml_t,
        txt: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_txt_d(
        xml: switch_xml_t,
        txt: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_attr(
        xml: switch_xml_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_attr_d(
        xml: switch_xml_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_attr_d_buf(
        xml: switch_xml_t,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_flag(xml: switch_xml_t, flag: switch_xml_flag_t) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_cut(xml: switch_xml_t) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_insert(
        xml: switch_xml_t,
        dest: switch_xml_t,
        off: switch_size_t,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_root(new_main: switch_xml_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_set_open_root_function(
        func: switch_xml_open_root_function_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_open_root(
        reload: u8,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_init(
        pool: *mut switch_memory_pool_t,
        err: *mut *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_reload(err: *mut *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_destroy() -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_root() -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_locate(
        section: *const ::std::os::raw::c_char,
        tag_name: *const ::std::os::raw::c_char,
        key_name: *const ::std::os::raw::c_char,
        key_value: *const ::std::os::raw::c_char,
        root: *mut switch_xml_t,
        node: *mut switch_xml_t,
        params: *mut switch_event_t,
        clone: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_locate_domain(
        domain_name: *const ::std::os::raw::c_char,
        params: *mut switch_event_t,
        root: *mut switch_xml_t,
        domain: *mut switch_xml_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_locate_group(
        group_name: *const ::std::os::raw::c_char,
        domain_name: *const ::std::os::raw::c_char,
        root: *mut switch_xml_t,
        domain: *mut switch_xml_t,
        group: *mut switch_xml_t,
        params: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_locate_user(
        key: *const ::std::os::raw::c_char,
        user_name: *const ::std::os::raw::c_char,
        domain_name: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        root: *mut switch_xml_t,
        domain: *mut switch_xml_t,
        user: *mut switch_xml_t,
        ingroup: *mut switch_xml_t,
        params: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_locate_user_in_domain(
        user_name: *const ::std::os::raw::c_char,
        domain: switch_xml_t,
        user: *mut switch_xml_t,
        ingroup: *mut switch_xml_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_locate_user_merged(
        key: *const ::std::os::raw::c_char,
        user_name: *const ::std::os::raw::c_char,
        domain_name: *const ::std::os::raw::c_char,
        ip: *const ::std::os::raw::c_char,
        user: *mut switch_xml_t,
        params: *mut switch_event_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_clear_user_cache(
        key: *const ::std::os::raw::c_char,
        user_name: *const ::std::os::raw::c_char,
        domain_name: *const ::std::os::raw::c_char,
    ) -> u32;
}
extern "C" {
    pub fn switch_xml_merge_user(user: switch_xml_t, domain: switch_xml_t, group: switch_xml_t);
}
extern "C" {
    pub fn switch_xml_dup(xml: switch_xml_t) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_open_cfg(
        file_path: *const ::std::os::raw::c_char,
        node: *mut switch_xml_t,
        params: *mut switch_event_t,
    ) -> switch_xml_t;
}
extern "C" {
    pub fn switch_xml_set_binding_sections(
        binding: *mut switch_xml_binding_t,
        sections: switch_xml_section_t,
    );
}
extern "C" {
    pub fn switch_xml_set_binding_user_data(
        binding: *mut switch_xml_binding_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_xml_get_binding_sections(
        binding: *mut switch_xml_binding_t,
    ) -> switch_xml_section_t;
}
extern "C" {
    pub fn switch_xml_get_binding_user_data(
        binding: *mut switch_xml_binding_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn switch_xml_bind_search_function_ret(
        function: switch_xml_search_function_t,
        sections: switch_xml_section_t,
        user_data: *mut ::std::os::raw::c_void,
        ret_binding: *mut *mut switch_xml_binding_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_unbind_search_function(
        binding: *mut *mut switch_xml_binding_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_unbind_search_function_ptr(
        function: switch_xml_search_function_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_parse_section_string(
        str_: *const ::std::os::raw::c_char,
    ) -> switch_xml_section_t;
}
extern "C" {
    pub fn switch_xml_std_datetime_check(
        xcond: switch_xml_t,
        offset: *mut ::std::os::raw::c_int,
        tzname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_xml_locate_language(
        root: *mut switch_xml_t,
        node: *mut switch_xml_t,
        params: *mut switch_event_t,
        language: *mut switch_xml_t,
        phrases: *mut switch_xml_t,
        macros: *mut switch_xml_t,
        str_language: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_INT: switch_xml_config_type_t = switch_xml_config_type_t(0);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_ATOMIC: switch_xml_config_type_t = switch_xml_config_type_t(1);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_STRING: switch_xml_config_type_t = switch_xml_config_type_t(2);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_BOOL: switch_xml_config_type_t = switch_xml_config_type_t(3);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_CUSTOM: switch_xml_config_type_t = switch_xml_config_type_t(4);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_ENUM: switch_xml_config_type_t = switch_xml_config_type_t(5);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_FLAG: switch_xml_config_type_t = switch_xml_config_type_t(6);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_FLAGARRAY: switch_xml_config_type_t = switch_xml_config_type_t(7);
}
impl switch_xml_config_type_t {
    pub const SWITCH_CONFIG_LAST: switch_xml_config_type_t = switch_xml_config_type_t(8);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_xml_config_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_config_enum_item_t {
    pub key: *mut ::std::os::raw::c_char,
    pub value: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_config_string_options_t {
    pub pool: *mut switch_memory_pool_t,
    pub length: switch_size_t,
    pub validation_regex: *mut ::std::os::raw::c_char,
}
extern "C" {
    pub static mut switch_config_string_strdup: switch_xml_config_string_options_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_config_int_options_t {
    pub enforce_min: switch_bool_t,
    pub min: ::std::os::raw::c_int,
    pub enforce_max: switch_bool_t,
    pub max: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_config_atomic_options_t {
    pub enforce_min: switch_bool_t,
    pub min: u32,
    pub enforce_max: switch_bool_t,
    pub max: u32,
}
pub type switch_xml_config_item_t = switch_xml_config_item;
impl switch_config_callback_type_t {
    pub const CONFIG_LOAD: switch_config_callback_type_t = switch_config_callback_type_t(0);
}
impl switch_config_callback_type_t {
    pub const CONFIG_RELOAD: switch_config_callback_type_t = switch_config_callback_type_t(1);
}
impl switch_config_callback_type_t {
    pub const CONFIG_SHUTDOWN: switch_config_callback_type_t = switch_config_callback_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_config_callback_type_t(pub ::std::os::raw::c_uint);
impl switch_config_flags_t {
    pub const CONFIG_RELOADABLE: switch_config_flags_t = switch_config_flags_t(1);
}
impl switch_config_flags_t {
    pub const CONFIG_REQUIRED: switch_config_flags_t = switch_config_flags_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_config_flags_t(pub ::std::os::raw::c_uint);
pub type switch_xml_config_callback_t = ::std::option::Option<
    unsafe extern "C" fn(
        item: *mut switch_xml_config_item_t,
        newvalue: *const ::std::os::raw::c_char,
        callback_type: switch_config_callback_type_t,
        changed: switch_bool_t,
    ) -> switch_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_xml_config_item {
    pub key: *const ::std::os::raw::c_char,
    pub type_: switch_xml_config_type_t,
    pub flags: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub defaultvalue: *const ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub function: switch_xml_config_callback_t,
    pub syntax: *const ::std::os::raw::c_char,
    pub helptext: *const ::std::os::raw::c_char,
}
extern "C" {
    pub fn switch_config_perform_set_item(
        item: *mut switch_xml_config_item_t,
        key: *const ::std::os::raw::c_char,
        type_: switch_xml_config_type_t,
        flags: ::std::os::raw::c_int,
        ptr: *mut ::std::os::raw::c_void,
        defaultvalue: *const ::std::os::raw::c_void,
        data: *mut ::std::os::raw::c_void,
        function: switch_xml_config_callback_t,
        syntax: *const ::std::os::raw::c_char,
        helptext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_xml_config_enum_str2int(
        enum_options: *mut switch_xml_config_enum_item_t,
        value: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_config_enum_int2str(
        enum_options: *mut switch_xml_config_enum_item_t,
        value: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_xml_config_item_print_doc(
        level: ::std::os::raw::c_int,
        item: *mut switch_xml_config_item_t,
    );
}
extern "C" {
    pub fn switch_xml_config_parse(
        xml: switch_xml_t,
        reload: switch_bool_t,
        instructions: *mut switch_xml_config_item_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_config_parse_module_settings(
        file: *const ::std::os::raw::c_char,
        reload: switch_bool_t,
        instructions: *mut switch_xml_config_item_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_xml_config_parse_event(
        event: *mut switch_event_t,
        count: ::std::os::raw::c_int,
        reload: switch_bool_t,
        instructions: *mut switch_xml_config_item_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_event_import_xml(
        xml: switch_xml_t,
        keyname: *const ::std::os::raw::c_char,
        valuename: *const ::std::os::raw::c_char,
        event: *mut *mut switch_event_t,
    ) -> switch_size_t;
}
extern "C" {
    pub fn switch_xml_config_cleanup(instructions: *mut switch_xml_config_item_t);
}
pub type switch_io_event_hooks_t = switch_io_event_hooks;
pub type switch_io_event_hook_outgoing_channel_t = switch_io_event_hook_outgoing_channel;
pub type switch_io_event_hook_receive_message_t = switch_io_event_hook_receive_message;
pub type switch_io_event_hook_receive_event_t = switch_io_event_hook_receive_event;
pub type switch_io_event_hook_read_frame_t = switch_io_event_hook_read_frame;
pub type switch_io_event_hook_video_read_frame_t = switch_io_event_hook_video_read_frame;
pub type switch_io_event_hook_write_frame_t = switch_io_event_hook_write_frame;
pub type switch_io_event_hook_video_write_frame_t = switch_io_event_hook_video_write_frame;
pub type switch_io_event_hook_text_read_frame_t = switch_io_event_hook_text_read_frame;
pub type switch_io_event_hook_text_write_frame_t = switch_io_event_hook_text_write_frame;
pub type switch_io_event_hook_kill_channel_t = switch_io_event_hook_kill_channel;
pub type switch_io_event_hook_send_dtmf_t = switch_io_event_hook_send_dtmf;
pub type switch_io_event_hook_recv_dtmf_t = switch_io_event_hook_recv_dtmf;
pub type switch_io_event_hook_state_change_t = switch_io_event_hook_state_change;
pub type switch_io_event_hook_state_run_t = switch_io_event_hook_state_run;
pub type switch_outgoing_channel_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_event_t,
        arg3: *mut switch_caller_profile_t,
        arg4: *mut switch_core_session_t,
        arg5: switch_originate_flag_t,
    ) -> switch_status_t,
>;
pub type switch_receive_message_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_core_session_message_t,
    ) -> switch_status_t,
>;
pub type switch_receive_event_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_event_t,
    ) -> switch_status_t,
>;
pub type switch_read_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_video_read_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_write_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_video_write_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_text_read_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_text_write_frame_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *mut switch_frame_t,
        arg3: switch_io_flag_t,
        arg4: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_kill_channel_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: ::std::os::raw::c_int,
    ) -> switch_status_t,
>;
pub type switch_send_dtmf_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *const switch_dtmf_t,
        direction: switch_dtmf_direction_t,
    ) -> switch_status_t,
>;
pub type switch_recv_dtmf_hook_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut switch_core_session_t,
        arg2: *const switch_dtmf_t,
        direction: switch_dtmf_direction_t,
    ) -> switch_status_t,
>;
pub type switch_state_change_hook_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t) -> switch_status_t,
>;
pub type switch_state_run_hook_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut switch_core_session_t) -> switch_status_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_outgoing_channel {
    pub outgoing_channel: switch_outgoing_channel_hook_t,
    pub next: *mut switch_io_event_hook_outgoing_channel,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_receive_message {
    pub receive_message: switch_receive_message_hook_t,
    pub next: *mut switch_io_event_hook_receive_message,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_receive_event {
    pub receive_event: switch_receive_event_hook_t,
    pub next: *mut switch_io_event_hook_receive_event,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_read_frame {
    pub read_frame: switch_read_frame_hook_t,
    pub next: *mut switch_io_event_hook_read_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_video_read_frame {
    pub video_read_frame: switch_read_frame_hook_t,
    pub next: *mut switch_io_event_hook_video_read_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_write_frame {
    pub write_frame: switch_write_frame_hook_t,
    pub next: *mut switch_io_event_hook_write_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_video_write_frame {
    pub video_write_frame: switch_video_write_frame_hook_t,
    pub next: *mut switch_io_event_hook_video_write_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_text_read_frame {
    pub text_read_frame: switch_read_frame_hook_t,
    pub next: *mut switch_io_event_hook_text_read_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_text_write_frame {
    pub text_write_frame: switch_video_write_frame_hook_t,
    pub next: *mut switch_io_event_hook_text_write_frame,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_kill_channel {
    pub kill_channel: switch_kill_channel_hook_t,
    pub next: *mut switch_io_event_hook_kill_channel,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_send_dtmf {
    pub send_dtmf: switch_send_dtmf_hook_t,
    pub next: *mut switch_io_event_hook_send_dtmf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_recv_dtmf {
    pub recv_dtmf: switch_recv_dtmf_hook_t,
    pub next: *mut switch_io_event_hook_recv_dtmf,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_state_change {
    pub state_change: switch_state_change_hook_t,
    pub next: *mut switch_io_event_hook_state_change,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hook_state_run {
    pub state_run: switch_state_run_hook_t,
    pub next: *mut switch_io_event_hook_state_run,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_io_event_hooks {
    pub outgoing_channel: *mut switch_io_event_hook_outgoing_channel_t,
    pub receive_message: *mut switch_io_event_hook_receive_message_t,
    pub receive_event: *mut switch_io_event_hook_receive_event_t,
    pub read_frame: *mut switch_io_event_hook_read_frame_t,
    pub video_read_frame: *mut switch_io_event_hook_video_read_frame_t,
    pub write_frame: *mut switch_io_event_hook_write_frame_t,
    pub video_write_frame: *mut switch_io_event_hook_video_write_frame_t,
    pub text_write_frame: *mut switch_io_event_hook_text_write_frame_t,
    pub text_read_frame: *mut switch_io_event_hook_text_read_frame_t,
    pub kill_channel: *mut switch_io_event_hook_kill_channel_t,
    pub send_dtmf: *mut switch_io_event_hook_send_dtmf_t,
    pub recv_dtmf: *mut switch_io_event_hook_recv_dtmf_t,
    pub state_change: *mut switch_io_event_hook_state_change_t,
    pub state_run: *mut switch_io_event_hook_state_run_t,
}
extern "C" {
    pub fn switch_core_session_get_event_hooks(
        session: *mut switch_core_session_t,
    ) -> switch_io_event_hooks_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_outgoing_channel(
        session: *mut switch_core_session_t,
        outgoing_channel: switch_outgoing_channel_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_receive_message(
        session: *mut switch_core_session_t,
        receive_message: switch_receive_message_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_receive_event(
        session: *mut switch_core_session_t,
        receive_event: switch_receive_event_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_state_change(
        session: *mut switch_core_session_t,
        state_change: switch_state_change_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_state_run(
        session: *mut switch_core_session_t,
        state_run: switch_state_run_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_read_frame(
        session: *mut switch_core_session_t,
        read_frame: switch_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_write_frame(
        session: *mut switch_core_session_t,
        write_frame: switch_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_video_read_frame(
        session: *mut switch_core_session_t,
        video_read_frame: switch_video_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_video_write_frame(
        session: *mut switch_core_session_t,
        video_write_frame: switch_video_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_text_read_frame(
        session: *mut switch_core_session_t,
        text_read_frame: switch_text_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_text_write_frame(
        session: *mut switch_core_session_t,
        text_write_frame: switch_text_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_kill_channel(
        session: *mut switch_core_session_t,
        kill_channel: switch_kill_channel_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_send_dtmf(
        session: *mut switch_core_session_t,
        send_dtmf: switch_send_dtmf_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_add_recv_dtmf(
        session: *mut switch_core_session_t,
        recv_dtmf: switch_recv_dtmf_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_outgoing_channel(
        session: *mut switch_core_session_t,
        outgoing_channel: switch_outgoing_channel_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_receive_message(
        session: *mut switch_core_session_t,
        receive_message: switch_receive_message_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_receive_event(
        session: *mut switch_core_session_t,
        receive_event: switch_receive_event_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_state_change(
        session: *mut switch_core_session_t,
        state_change: switch_state_change_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_state_run(
        session: *mut switch_core_session_t,
        state_run: switch_state_run_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_read_frame(
        session: *mut switch_core_session_t,
        read_frame: switch_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_write_frame(
        session: *mut switch_core_session_t,
        write_frame: switch_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_video_read_frame(
        session: *mut switch_core_session_t,
        video_read_frame: switch_video_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_video_write_frame(
        session: *mut switch_core_session_t,
        video_write_frame: switch_video_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_text_read_frame(
        session: *mut switch_core_session_t,
        text_read_frame: switch_text_read_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_text_write_frame(
        session: *mut switch_core_session_t,
        text_write_frame: switch_text_write_frame_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_kill_channel(
        session: *mut switch_core_session_t,
        kill_channel: switch_kill_channel_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_send_dtmf(
        session: *mut switch_core_session_t,
        send_dtmf: switch_send_dtmf_hook_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_event_hook_remove_recv_dtmf(
        session: *mut switch_core_session_t,
        recv_dtmf: switch_recv_dtmf_hook_t,
    ) -> switch_status_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_scheduler_task {
    pub created: i64,
    pub runtime: i64,
    pub cmd_id: u32,
    pub repeat: u32,
    pub group: *mut ::std::os::raw::c_char,
    pub cmd_arg: *mut ::std::os::raw::c_void,
    pub task_id: u32,
    pub hash: ::std::os::raw::c_ulong,
}
extern "C" {
    pub fn switch_scheduler_add_task(
        task_runtime: time_t,
        func: switch_scheduler_func_t,
        desc: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        cmd_id: u32,
        cmd_arg: *mut ::std::os::raw::c_void,
        flags: switch_scheduler_flag_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_scheduler_add_task_ex(
        task_runtime: time_t,
        func: switch_scheduler_func_t,
        desc: *const ::std::os::raw::c_char,
        group: *const ::std::os::raw::c_char,
        cmd_id: u32,
        cmd_arg: *mut ::std::os::raw::c_void,
        flags: switch_scheduler_flag_t,
        task_id: *mut u32,
    ) -> u32;
}
extern "C" {
    pub fn switch_scheduler_del_task_id(task_id: u32) -> u32;
}
extern "C" {
    pub fn switch_scheduler_del_task_group(group: *const ::std::os::raw::c_char) -> u32;
}
extern "C" {
    pub fn switch_scheduler_task_thread_start();
}
extern "C" {
    pub fn switch_scheduler_task_thread_stop();
}
pub type switch_config_t = switch_config;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_config {
    pub file: *mut FILE,
    pub path: [::std::os::raw::c_char; 512usize],
    pub category: [::std::os::raw::c_char; 256usize],
    pub section: [::std::os::raw::c_char; 256usize],
    pub buf: [::std::os::raw::c_char; 1024usize],
    pub lineno: ::std::os::raw::c_int,
    pub catno: ::std::os::raw::c_int,
    pub sectno: ::std::os::raw::c_int,
    pub lockto: ::std::os::raw::c_int,
}
extern "C" {
    pub fn switch_config_open_file(
        cfg: *mut switch_config_t,
        file_path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_config_close_file(cfg: *mut switch_config_t);
}
extern "C" {
    pub fn switch_config_next_pair(
        cfg: *mut switch_config_t,
        var: *mut *mut ::std::os::raw::c_char,
        val: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type switch_packetizer_t = ::std::os::raw::c_void;
impl switch_packetizer_bitstream_t {
    pub const SPT_H264_BITSTREAM: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(0);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_H264_SIZED_BITSTREAM: switch_packetizer_bitstream_t =
        switch_packetizer_bitstream_t(1);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_H264_SIGNALE_NALU: switch_packetizer_bitstream_t =
        switch_packetizer_bitstream_t(2);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_VP8_BITSTREAM: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(3);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_VP9_BITSTREAM: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(4);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_H265_BITSTREAM: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(5);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_AV1: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(6);
}
impl switch_packetizer_bitstream_t {
    pub const SPT_INVALID_STREAM: switch_packetizer_bitstream_t = switch_packetizer_bitstream_t(7);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_packetizer_bitstream_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_packetizer_create(
        type_: switch_packetizer_bitstream_t,
        slice_size: u32,
    ) -> *mut switch_packetizer_t;
}
extern "C" {
    pub fn switch_packetizer_set_debug(
        packetizer: *mut switch_packetizer_t,
        debug_evel: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_packetizer_feed(
        packetizer: *mut switch_packetizer_t,
        data: *mut ::std::os::raw::c_void,
        size: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_packetizer_feed_extradata(
        packetizer: *mut switch_packetizer_t,
        data: *mut ::std::os::raw::c_void,
        size: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_packetizer_read(
        packetizer: *mut switch_packetizer_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_packetizer_close(packetizer: *mut *mut switch_packetizer_t);
}
impl switch_nat_type_t {
    pub const SWITCH_NAT_TYPE_NONE: switch_nat_type_t = switch_nat_type_t(0);
}
impl switch_nat_type_t {
    pub const SWITCH_NAT_TYPE_PMP: switch_nat_type_t = switch_nat_type_t(1);
}
impl switch_nat_type_t {
    pub const SWITCH_NAT_TYPE_UPNP: switch_nat_type_t = switch_nat_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_nat_type_t(pub ::std::os::raw::c_uint);
impl switch_nat_ip_proto_t {
    pub const SWITCH_NAT_UDP: switch_nat_ip_proto_t = switch_nat_ip_proto_t(0);
}
impl switch_nat_ip_proto_t {
    pub const SWITCH_NAT_TCP: switch_nat_ip_proto_t = switch_nat_ip_proto_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_nat_ip_proto_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_nat_get_type() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_nat_init(pool: *mut switch_memory_pool_t, mapping: switch_bool_t);
}
extern "C" {
    pub fn switch_nat_late_init();
}
extern "C" {
    pub fn switch_nat_shutdown();
}
extern "C" {
    pub fn switch_nat_status() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_nat_republish();
}
extern "C" {
    pub fn switch_nat_reinit();
}
extern "C" {
    pub fn switch_nat_set_mapping(mapping: switch_bool_t);
}
extern "C" {
    pub fn switch_nat_add_mapping(
        port: switch_port_t,
        proto: switch_nat_ip_proto_t,
        external_port: *mut switch_port_t,
        sticky: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_nat_is_initialized() -> switch_bool_t;
}
extern "C" {
    pub fn switch_nat_del_mapping(
        port: switch_port_t,
        proto: switch_nat_ip_proto_t,
    ) -> switch_status_t;
}
pub type switch_odbc_statement_handle_t = *mut ::std::os::raw::c_void;
impl switch_odbc_state_t {
    pub const SWITCH_ODBC_STATE_INIT: switch_odbc_state_t = switch_odbc_state_t(0);
}
impl switch_odbc_state_t {
    pub const SWITCH_ODBC_STATE_DOWN: switch_odbc_state_t = switch_odbc_state_t(1);
}
impl switch_odbc_state_t {
    pub const SWITCH_ODBC_STATE_CONNECTED: switch_odbc_state_t = switch_odbc_state_t(2);
}
impl switch_odbc_state_t {
    pub const SWITCH_ODBC_STATE_ERROR: switch_odbc_state_t = switch_odbc_state_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_odbc_state_t(pub ::std::os::raw::c_uint);
impl switch_odbc_status_t {
    pub const SWITCH_ODBC_SUCCESS: switch_odbc_status_t = switch_odbc_status_t(0);
}
impl switch_odbc_status_t {
    pub const SWITCH_ODBC_FAIL: switch_odbc_status_t = switch_odbc_status_t(-1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_odbc_status_t(pub ::std::os::raw::c_int);
extern "C" {
    pub fn switch_odbc_skip_autocommit_flip();
}
extern "C" {
    pub fn switch_odbc_handle_new(
        dsn: *const ::std::os::raw::c_char,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> *mut switch_odbc_handle_t;
}
extern "C" {
    pub fn switch_odbc_set_num_retries(
        handle: *mut switch_odbc_handle_t,
        num_retries: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_odbc_handle_disconnect(handle: *mut switch_odbc_handle_t)
        -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_handle_connect(handle: *mut switch_odbc_handle_t) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_handle_destroy(handlep: *mut *mut switch_odbc_handle_t);
}
extern "C" {
    pub fn switch_odbc_handle_get_state(handle: *mut switch_odbc_handle_t) -> switch_odbc_state_t;
}
extern "C" {
    pub fn switch_odbc_handle_exec(
        handle: *mut switch_odbc_handle_t,
        sql: *const ::std::os::raw::c_char,
        rstmt: *mut switch_odbc_statement_handle_t,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_handle_exec_string(
        handle: *mut switch_odbc_handle_t,
        sql: *const ::std::os::raw::c_char,
        resbuf: *mut ::std::os::raw::c_char,
        len: usize,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_available() -> switch_bool_t;
}
extern "C" {
    pub fn switch_odbc_SQLSetAutoCommitAttr(
        handle: *mut switch_odbc_handle_t,
        on: switch_bool_t,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_SQLEndTran(
        handle: *mut switch_odbc_handle_t,
        commit: switch_bool_t,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_statement_handle_free(
        stmt: *mut switch_odbc_statement_handle_t,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_handle_callback_exec_detailed(
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        handle: *mut switch_odbc_handle_t,
        sql: *const ::std::os::raw::c_char,
        callback: switch_core_db_callback_func_t,
        pdata: *mut ::std::os::raw::c_void,
        err: *mut *mut ::std::os::raw::c_char,
    ) -> switch_odbc_status_t;
}
extern "C" {
    pub fn switch_odbc_handle_get_error(
        handle: *mut switch_odbc_handle_t,
        stmt: switch_odbc_statement_handle_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_odbc_handle_affected_rows(
        handle: *mut switch_odbc_handle_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_limit_init(pool: *mut switch_memory_pool_t);
}
extern "C" {
    pub fn switch_limit_incr(
        backend: *const ::std::os::raw::c_char,
        session: *mut switch_core_session_t,
        realm: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
        max: ::std::os::raw::c_int,
        interval: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_limit_release(
        backend: *const ::std::os::raw::c_char,
        session: *mut switch_core_session_t,
        realm: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_limit_usage(
        backend: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
        rcount: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_limit_interval_reset(
        backend: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_limit_reset(backend: *const ::std::os::raw::c_char) -> switch_status_t;
}
extern "C" {
    pub fn switch_limit_fire_event(
        backend: *const ::std::os::raw::c_char,
        realm: *const ::std::os::raw::c_char,
        resource: *const ::std::os::raw::c_char,
        usage: u32,
        rate: u32,
        max: u32,
        ratemax: u32,
    );
}
extern "C" {
    pub fn switch_limit_status(
        backend: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const MSRP_ST_WAIT_HEADER: _bindgen_ty_1 = _bindgen_ty_1(0);
pub const MSRP_ST_PARSE_HEADER: _bindgen_ty_1 = _bindgen_ty_1(1);
pub const MSRP_ST_WAIT_BODY: _bindgen_ty_1 = _bindgen_ty_1(2);
pub const MSRP_ST_DONE: _bindgen_ty_1 = _bindgen_ty_1(3);
pub const MSRP_ST_ERROR: _bindgen_ty_1 = _bindgen_ty_1(4);
pub const MSRP_METHOD_REPLY: _bindgen_ty_1 = _bindgen_ty_1(5);
pub const MSRP_METHOD_SEND: _bindgen_ty_1 = _bindgen_ty_1(6);
pub const MSRP_METHOD_AUTH: _bindgen_ty_1 = _bindgen_ty_1(7);
pub const MSRP_METHOD_REPORT: _bindgen_ty_1 = _bindgen_ty_1(8);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _bindgen_ty_1(pub ::std::os::raw::c_uint);
impl switch_msrp_header_type_t {
    pub const MSRP_H_FROM_PATH: switch_msrp_header_type_t = switch_msrp_header_type_t(0);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_TO_PATH: switch_msrp_header_type_t = switch_msrp_header_type_t(1);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_MESSAGE_ID: switch_msrp_header_type_t = switch_msrp_header_type_t(2);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_CONTENT_TYPE: switch_msrp_header_type_t = switch_msrp_header_type_t(3);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_SUCCESS_REPORT: switch_msrp_header_type_t = switch_msrp_header_type_t(4);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_FAILURE_REPORT: switch_msrp_header_type_t = switch_msrp_header_type_t(5);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_STATUS: switch_msrp_header_type_t = switch_msrp_header_type_t(6);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_KEEPALIVE: switch_msrp_header_type_t = switch_msrp_header_type_t(7);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_TRASACTION_ID: switch_msrp_header_type_t = switch_msrp_header_type_t(8);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_DELIMITER: switch_msrp_header_type_t = switch_msrp_header_type_t(9);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_CODE_DESCRIPTION: switch_msrp_header_type_t = switch_msrp_header_type_t(10);
}
impl switch_msrp_header_type_t {
    pub const MSRP_H_UNKNOWN: switch_msrp_header_type_t = switch_msrp_header_type_t(11);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_msrp_header_type_t(pub ::std::os::raw::c_uint);
pub type switch_msrp_session_t = switch_msrp_session_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msrp_client_socket_s {
    _unused: [u8; 0],
}
pub type switch_msrp_client_socket_t = msrp_client_socket_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msrp_socket_s {
    _unused: [u8; 0],
}
pub type switch_msrp_socket_t = msrp_socket_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msrp_msg_s {
    pub state: ::std::os::raw::c_int,
    pub method: ::std::os::raw::c_int,
    pub headers: *mut switch_event_t,
    pub transaction_id: *const ::std::os::raw::c_char,
    pub delimiter: *const ::std::os::raw::c_char,
    pub code_number: ::std::os::raw::c_int,
    pub code_description: *const ::std::os::raw::c_char,
    pub byte_start: switch_size_t,
    pub byte_end: switch_size_t,
    pub bytes: switch_size_t,
    pub payload_bytes: switch_size_t,
    pub accumulated_bytes: switch_size_t,
    pub range_star: ::std::os::raw::c_int,
    pub last_p: *mut ::std::os::raw::c_char,
    pub payload: *mut ::std::os::raw::c_char,
    pub next: *mut msrp_msg_s,
}
pub type switch_msrp_msg_t = msrp_msg_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_msrp_session_s {
    pub pool: *mut switch_memory_pool_t,
    pub secure: ::std::os::raw::c_int,
    pub active: ::std::os::raw::c_int,
    pub remote_path: *mut ::std::os::raw::c_char,
    pub remote_accept_types: *mut ::std::os::raw::c_char,
    pub remote_accept_wrapped_types: *mut ::std::os::raw::c_char,
    pub remote_setup: *mut ::std::os::raw::c_char,
    pub remote_file_selector: *mut ::std::os::raw::c_char,
    pub local_path: *mut ::std::os::raw::c_char,
    pub local_accept_types: *mut ::std::os::raw::c_char,
    pub local_accept_wrapped_types: *mut ::std::os::raw::c_char,
    pub local_setup: *mut ::std::os::raw::c_char,
    pub local_file_selector: *mut ::std::os::raw::c_char,
    pub local_port: ::std::os::raw::c_int,
    pub call_id: *mut ::std::os::raw::c_char,
    pub msrp_msg: *mut switch_msrp_msg_t,
    pub last_msg: *mut switch_msrp_msg_t,
    pub mutex: *mut switch_mutex_t,
    pub msrp_msg_buffer_size: switch_size_t,
    pub msrp_msg_count: switch_size_t,
    pub msock: *mut switch_msrp_socket_t,
    pub csock: *mut switch_msrp_client_socket_t,
    pub frame: switch_frame_t,
    pub frame_data: [u8; 16384usize],
    pub running: ::std::os::raw::c_int,
    pub user_data: *mut ::std::os::raw::c_void,
    pub send_queue: *mut switch_queue_t,
}
extern "C" {
    pub fn switch_msrp_init() -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_destroy() -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_session_new(
        pool: *mut switch_memory_pool_t,
        call_id: *const ::std::os::raw::c_char,
        secure: switch_bool_t,
    ) -> *mut switch_msrp_session_t;
}
extern "C" {
    pub fn switch_msrp_session_destroy(ms: *mut *mut switch_msrp_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_session_pop_msg(ms: *mut switch_msrp_session_t) -> *mut switch_msrp_msg_t;
}
extern "C" {
    pub fn switch_msrp_perform_send(
        ms: *mut switch_msrp_session_t,
        msg: *mut switch_msrp_msg_t,
        file: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_start_client(msrp_session: *mut switch_msrp_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_listen_ip() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_msrp_msg_create() -> *mut switch_msrp_msg_t;
}
extern "C" {
    pub fn switch_msrp_msg_destroy(msg: *mut *mut switch_msrp_msg_t);
}
extern "C" {
    pub fn switch_msrp_load_apis_and_applications(
        moudle_interface: *mut *mut switch_loadable_module_interface_t,
    );
}
extern "C" {
    pub fn switch_msrp_msg_get_header(
        msrp_msg: *mut switch_msrp_msg_t,
        htype: switch_msrp_header_type_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_msrp_msg_add_header(
        msrp_msg: *mut switch_msrp_msg_t,
        htype: switch_msrp_header_type_t,
        fmt: *mut ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_msrp_msg_set_payload(
        msrp_msg: *mut switch_msrp_msg_t,
        buf: *const ::std::os::raw::c_char,
        payload_bytes: switch_size_t,
    );
}
extern "C" {
    pub fn switch_msrp_header_name(htype: switch_msrp_header_type_t)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_msrp_msg_dup(msg: *mut switch_msrp_msg_t) -> *mut switch_msrp_msg_t;
}
impl switch_core_media_dtmf_t {
    pub const DTMF_AUTO: switch_core_media_dtmf_t = switch_core_media_dtmf_t(0);
}
impl switch_core_media_dtmf_t {
    pub const DTMF_2833: switch_core_media_dtmf_t = switch_core_media_dtmf_t(1);
}
impl switch_core_media_dtmf_t {
    pub const DTMF_INFO: switch_core_media_dtmf_t = switch_core_media_dtmf_t(2);
}
impl switch_core_media_dtmf_t {
    pub const DTMF_NONE: switch_core_media_dtmf_t = switch_core_media_dtmf_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_dtmf_t(pub ::std::os::raw::c_uint);
impl switch_core_media_avp_secure_t {
    pub const AVP_NO_SECURE: switch_core_media_avp_secure_t = switch_core_media_avp_secure_t(0);
}
impl switch_core_media_avp_secure_t {
    pub const AVP_SECURE: switch_core_media_avp_secure_t = switch_core_media_avp_secure_t(1);
}
impl switch_core_media_avp_secure_t {
    pub const AVP_UNDEFINED: switch_core_media_avp_secure_t = switch_core_media_avp_secure_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_avp_secure_t(pub ::std::os::raw::c_uint);
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_ALLOW_BAD_IANANAME: switch_core_media_NDLB_t = switch_core_media_NDLB_t(1);
}
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_ALLOW_NONDUP_SDP: switch_core_media_NDLB_t = switch_core_media_NDLB_t(2);
}
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_ALLOW_CRYPTO_IN_AVP: switch_core_media_NDLB_t = switch_core_media_NDLB_t(4);
}
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_DISABLE_SRTP_AUTH: switch_core_media_NDLB_t = switch_core_media_NDLB_t(8);
}
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_SENDRECV_IN_SESSION: switch_core_media_NDLB_t = switch_core_media_NDLB_t(16);
}
impl switch_core_media_NDLB_t {
    pub const SM_NDLB_NEVER_PATCH_REINVITE: switch_core_media_NDLB_t = switch_core_media_NDLB_t(32);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_NDLB_t(pub ::std::os::raw::c_uint);
impl switch_core_media_flag_t {
    pub const SCMF_RUNNING: switch_core_media_flag_t = switch_core_media_flag_t(0);
}
impl switch_core_media_flag_t {
    pub const SCMF_DISABLE_TRANSCODING: switch_core_media_flag_t = switch_core_media_flag_t(1);
}
impl switch_core_media_flag_t {
    pub const SCMF_AUTOFIX_TIMING: switch_core_media_flag_t = switch_core_media_flag_t(2);
}
impl switch_core_media_flag_t {
    pub const SCMF_CODEC_GREEDY: switch_core_media_flag_t = switch_core_media_flag_t(3);
}
impl switch_core_media_flag_t {
    pub const SCMF_CODEC_SCROOGE: switch_core_media_flag_t = switch_core_media_flag_t(4);
}
impl switch_core_media_flag_t {
    pub const SCMF_DISABLE_HOLD: switch_core_media_flag_t = switch_core_media_flag_t(5);
}
impl switch_core_media_flag_t {
    pub const SCMF_SUPPRESS_CNG: switch_core_media_flag_t = switch_core_media_flag_t(6);
}
impl switch_core_media_flag_t {
    pub const SCMF_DISABLE_RTP_AUTOADJ: switch_core_media_flag_t = switch_core_media_flag_t(7);
}
impl switch_core_media_flag_t {
    pub const SCMF_PASS_RFC2833: switch_core_media_flag_t = switch_core_media_flag_t(8);
}
impl switch_core_media_flag_t {
    pub const SCMF_AUTOFLUSH: switch_core_media_flag_t = switch_core_media_flag_t(9);
}
impl switch_core_media_flag_t {
    pub const SCMF_REWRITE_TIMESTAMPS: switch_core_media_flag_t = switch_core_media_flag_t(10);
}
impl switch_core_media_flag_t {
    pub const SCMF_RTP_AUTOFLUSH_DURING_BRIDGE: switch_core_media_flag_t =
        switch_core_media_flag_t(11);
}
impl switch_core_media_flag_t {
    pub const SCMF_MULTI_ANSWER_AUDIO: switch_core_media_flag_t = switch_core_media_flag_t(12);
}
impl switch_core_media_flag_t {
    pub const SCMF_MULTI_ANSWER_VIDEO: switch_core_media_flag_t = switch_core_media_flag_t(13);
}
impl switch_core_media_flag_t {
    pub const SCMF_RECV_SDP: switch_core_media_flag_t = switch_core_media_flag_t(14);
}
impl switch_core_media_flag_t {
    pub const SCMF_MAX: switch_core_media_flag_t = switch_core_media_flag_t(15);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_flag_t(pub ::std::os::raw::c_uint);
impl STUNFLAGS {
    pub const STUN_FLAG_SET: STUNFLAGS = STUNFLAGS(1);
}
impl STUNFLAGS {
    pub const STUN_FLAG_PING: STUNFLAGS = STUNFLAGS(2);
}
impl STUNFLAGS {
    pub const STUN_FLAG_FUNNY: STUNFLAGS = STUNFLAGS(4);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct STUNFLAGS(pub ::std::os::raw::c_uint);
impl switch_core_media_vflag_t {
    pub const VAD_IN: switch_core_media_vflag_t = switch_core_media_vflag_t(1);
}
impl switch_core_media_vflag_t {
    pub const VAD_OUT: switch_core_media_vflag_t = switch_core_media_vflag_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_core_media_vflag_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_core_media_params_s {
    pub rtp_timeout_sec: u32,
    pub rtp_hold_timeout_sec: u32,
    pub dtmf_delay: u32,
    pub codec_flags: u32,
    pub ndlb: switch_core_media_NDLB_t,
    pub auto_rtp_bugs: switch_rtp_bug_flag_t,
    pub inbound_codec_string: *mut ::std::os::raw::c_char,
    pub outbound_codec_string: *mut ::std::os::raw::c_char,
    pub timer_name: *mut ::std::os::raw::c_char,
    pub remote_sdp_str: *mut ::std::os::raw::c_char,
    pub early_sdp: *mut ::std::os::raw::c_char,
    pub local_sdp_str: *mut ::std::os::raw::c_char,
    pub last_sdp_str: *mut ::std::os::raw::c_char,
    pub last_sdp_response: *mut ::std::os::raw::c_char,
    pub prev_sdp_str: *mut ::std::os::raw::c_char,
    pub prev_sdp_response: *mut ::std::os::raw::c_char,
    pub stun_ip: *mut ::std::os::raw::c_char,
    pub stun_port: switch_port_t,
    pub stun_flags: u32,
    pub jb_msec: *mut ::std::os::raw::c_char,
    pub vflags: switch_core_media_vflag_t,
    pub manual_rtp_bugs: switch_rtp_bug_flag_t,
    pub manual_video_rtp_bugs: switch_rtp_bug_flag_t,
    pub manual_text_rtp_bugs: switch_rtp_bug_flag_t,
    pub rtcp_audio_interval_msec: *mut ::std::os::raw::c_char,
    pub rtcp_video_interval_msec: *mut ::std::os::raw::c_char,
    pub rtcp_text_interval_msec: *mut ::std::os::raw::c_char,
    pub extrtpip: *mut ::std::os::raw::c_char,
    pub rtpip: *mut ::std::os::raw::c_char,
    pub rtpip4: *mut ::std::os::raw::c_char,
    pub rtpip6: *mut ::std::os::raw::c_char,
    pub remote_ip: *mut ::std::os::raw::c_char,
    pub remote_port: ::std::os::raw::c_int,
    pub extsipip: *mut ::std::os::raw::c_char,
    pub local_network: *mut ::std::os::raw::c_char,
    pub sipip: *mut ::std::os::raw::c_char,
    pub sdp_username: *mut ::std::os::raw::c_char,
    pub te: switch_payload_t,
    pub recv_te: switch_payload_t,
    pub te_rate: ::std::os::raw::c_ulong,
    pub cng_rate: ::std::os::raw::c_ulong,
    pub adv_sdp_audio_ip: *mut ::std::os::raw::c_char,
    pub num_codecs: ::std::os::raw::c_int,
    pub hold_laps: ::std::os::raw::c_int,
    pub dtmf_type: switch_core_media_dtmf_t,
    pub cng_pt: switch_payload_t,
    pub external_video_source: switch_bool_t,
    pub video_key_freq: u32,
    pub video_key_first: u32,
    pub video_write_thread: *mut switch_thread_t,
}
pub type switch_core_media_params_t = switch_core_media_params_s;
extern "C" {
    pub fn switch_media_handle_create(
        smhp: *mut *mut switch_media_handle_t,
        session: *mut switch_core_session_t,
        params: *mut switch_core_media_params_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_media_handle_destroy(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_get_media_handle(
        session: *mut switch_core_session_t,
    ) -> *mut switch_media_handle_t;
}
extern "C" {
    pub fn switch_core_session_clear_media_handle(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_media_handle_ready(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_media_handle_set_media_flag(
        smh: *mut switch_media_handle_t,
        flag: switch_core_media_flag_t,
    );
}
extern "C" {
    pub fn switch_media_handle_clear_media_flag(
        smh: *mut switch_media_handle_t,
        flag: switch_core_media_flag_t,
    );
}
extern "C" {
    pub fn switch_media_handle_test_media_flag(
        smh: *mut switch_media_handle_t,
        flag: switch_core_media_flag_t,
    ) -> i32;
}
extern "C" {
    pub fn switch_media_handle_set_media_flags(
        smh: *mut switch_media_handle_t,
        flags: *mut switch_core_media_flag_t,
    );
}
extern "C" {
    pub fn switch_core_session_check_outgoing_crypto(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_local_crypto_key(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_session_check_incoming_crypto(
        session: *mut switch_core_session_t,
        varname: *const ::std::os::raw::c_char,
        type_: switch_media_type_t,
        crypto: *const ::std::os::raw::c_char,
        crypto_tag: ::std::os::raw::c_int,
        sdp_type: switch_sdp_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_media_get_video_fps(session: *mut switch_core_session_t) -> u32;
}
extern "C" {
    pub fn switch_core_media_set_rtp_session(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        rtp_session: *mut switch_rtp_t,
    );
}
extern "C" {
    pub fn switch_core_media_get_rtp_session(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> *mut switch_rtp_t;
}
extern "C" {
    pub fn switch_core_media_get_codec_string(
        session: *mut switch_core_session_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_media_parse_rtp_bugs(
        flag_pole: *mut switch_rtp_bug_flag_t,
        str_: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_media_add_crypto(
        session: *mut switch_core_session_t,
        ssec: *mut switch_secure_settings_t,
        direction: switch_rtp_crypto_direction_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_extract_t38_options(
        session: *mut switch_core_session_t,
        r_sdp: *const ::std::os::raw::c_char,
    ) -> *mut switch_t38_options_t;
}
extern "C" {
    pub fn switch_core_media_toggle_hold(
        session: *mut switch_core_session_t,
        sendonly: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_media_reset_t38(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_copy_t38_options(
        t38_options: *mut switch_t38_options_t,
        session: *mut switch_core_session_t,
    );
}
extern "C" {
    pub fn switch_core_media_negotiate_sdp(
        session: *mut switch_core_session_t,
        r_sdp: *const ::std::os::raw::c_char,
        proceed: *mut u8,
        sdp_type: switch_sdp_type_t,
    ) -> u8;
}
extern "C" {
    pub fn switch_core_media_set_video_codec(
        session: *mut switch_core_session_t,
        force: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_set_codec(
        session: *mut switch_core_session_t,
        force: ::std::os::raw::c_int,
        codec_flags: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_check_video_codecs(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_read_frame(
        session: *mut switch_core_session_t,
        frame: *mut *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
        type_: switch_media_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_write_frame(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
        type_: switch_media_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_check_nat(
        smh: *mut switch_media_handle_t,
        network_ip: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_media_choose_port(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        force: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_choose_ports(
        session: *mut switch_core_session_t,
        audio: switch_bool_t,
        video: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_check_dtmf_type(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_absorb_sdp(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_proxy_remote_addr(
        session: *mut switch_core_session_t,
        sdp_str: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_parse_media_flags(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_deactivate_rtp(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_activate_rtp(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_ext_address_lookup(
        session: *mut switch_core_session_t,
        ip: *mut *mut ::std::os::raw::c_char,
        port: *mut switch_port_t,
        sourceip: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_process_t38_passthru(
        session: *mut switch_core_session_t,
        other_session: *mut switch_core_session_t,
        t38_options: *mut switch_t38_options_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_gen_local_sdp(
        session: *mut switch_core_session_t,
        sdp_type: switch_sdp_type_t,
        ip: *const ::std::os::raw::c_char,
        port: switch_port_t,
        sr: *const ::std::os::raw::c_char,
        force: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_media_set_local_sdp(
        session: *mut switch_core_session_t,
        sdp_str: *const ::std::os::raw::c_char,
        dup: switch_bool_t,
    );
}
extern "C" {
    pub fn switch_core_media_patch_sdp(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_set_udptl_image_sdp(
        session: *mut switch_core_session_t,
        t38_options: *mut switch_t38_options_t,
        insist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_core_media_get_mparams(
        smh: *mut switch_media_handle_t,
    ) -> *mut switch_core_media_params_t;
}
extern "C" {
    pub fn switch_core_media_prepare_codecs(
        session: *mut switch_core_session_t,
        force: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_start_udptl(
        session: *mut switch_core_session_t,
        t38_options: *mut switch_t38_options_t,
    );
}
extern "C" {
    pub fn switch_core_media_hard_mute(session: *mut switch_core_session_t, on: switch_bool_t);
}
extern "C" {
    pub fn switch_core_media_gen_json_constraint(min: f32, ideal: f32, max: f32) -> *mut cJSON;
}
extern "C" {
    pub fn switch_core_media_media_params(
        session: *mut switch_core_session_t,
        json: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_receive_message(
        session: *mut switch_core_session_t,
        msg: *mut switch_core_session_message_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_break(session: *mut switch_core_session_t, type_: switch_media_type_t);
}
extern "C" {
    pub fn switch_core_media_kill_socket(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    );
}
extern "C" {
    pub fn switch_core_media_queue_rfc2833(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_queue_rfc2833_in(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        dtmf: *const switch_dtmf_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_ready(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> u8;
}
extern "C" {
    pub fn switch_core_media_set_telephony_event(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        te: switch_payload_t,
    );
}
extern "C" {
    pub fn switch_core_media_set_telephony_recv_event(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        te: switch_payload_t,
    );
}
extern "C" {
    pub fn switch_core_media_stats(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        pool: *mut switch_memory_pool_t,
    ) -> *mut switch_rtp_stats_t;
}
extern "C" {
    pub fn switch_core_media_udptl_mode(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_check_udptl_mode(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_media_set_rtp_flag(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        flag: switch_rtp_flag_t,
    );
}
extern "C" {
    pub fn switch_core_media_clear_rtp_flag(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        flag: switch_rtp_flag_t,
    );
}
extern "C" {
    pub fn switch_core_media_get_jb(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> *mut switch_jb_t;
}
extern "C" {
    pub fn switch_core_media_get_stats(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        pool: *mut switch_memory_pool_t,
    ) -> *mut switch_rtp_stats_t;
}
extern "C" {
    pub fn switch_core_media_set_sdp_codec_string(
        session: *mut switch_core_session_t,
        r_sdp: *const ::std::os::raw::c_char,
        sdp_type: switch_sdp_type_t,
    );
}
extern "C" {
    pub fn switch_core_media_merge_sdp_codec_string(
        session: *mut switch_core_session_t,
        r_sdp: *const ::std::os::raw::c_char,
        sdp_type: switch_sdp_type_t,
        codec_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn switch_core_media_reset_autofix(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    );
}
extern "C" {
    pub fn switch_core_media_check_outgoing_proxy(
        session: *mut switch_core_session_t,
        o_session: *mut switch_core_session_t,
    );
}
extern "C" {
    pub fn switch_core_media_codec_chosen(
        session: *mut switch_core_session_t,
        media: switch_media_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_recover_session(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_add_ice_acl(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        acl_name: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_ice(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_clear_ice(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_pause(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_resume(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_init();
}
extern "C" {
    pub fn switch_core_media_deinit();
}
extern "C" {
    pub fn switch_core_media_set_stats(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_sync_stats(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_wake_video_thread(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_clear_crypto(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_get_payload_code(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        iananame: *const ::std::os::raw::c_char,
        rate: u32,
        fmtp_in: *const ::std::os::raw::c_char,
        ptP: *mut switch_payload_t,
        recv_ptP: *mut switch_payload_t,
        fmtpP: *mut *mut ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_add_payload_map(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        name: *const ::std::os::raw::c_char,
        modname: *const ::std::os::raw::c_char,
        fmtp: *const ::std::os::raw::c_char,
        sdp_type: switch_sdp_type_t,
        pt: u32,
        rate: u32,
        ptime: u32,
        channels: u32,
        negotiated: u8,
    ) -> *mut payload_map_t;
}
extern "C" {
    pub fn switch_core_media_check_autoadj(session: *mut switch_core_session_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_crypto_str2type(
        str_: *const ::std::os::raw::c_char,
    ) -> switch_rtp_crypto_key_type_t;
}
extern "C" {
    pub fn switch_core_media_crypto_type2str(
        type_: switch_rtp_crypto_key_type_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_media_crypto_keysalt_len(
        type_: switch_rtp_crypto_key_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_media_crypto_salt_len(
        type_: switch_rtp_crypto_key_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_media_filter_sdp(
        sdp: *const ::std::os::raw::c_char,
        cmd: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_media_process_sdp_filter(
        sdp: *const ::std::os::raw::c_char,
        cmd_buf: *const ::std::os::raw::c_char,
        session: *mut switch_core_session_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn switch_core_media_codec_control(
        session: *mut switch_core_session_t,
        mtype: switch_media_type_t,
        iotype: switch_io_type_t,
        cmd: switch_codec_control_command_t,
        ctype: switch_codec_control_type_t,
        cmd_data: *mut ::std::os::raw::c_void,
        atype: switch_codec_control_type_t,
        cmd_arg: *mut ::std::os::raw::c_void,
        rtype: *mut switch_codec_control_type_t,
        ret_data: *mut *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_codec_get_cap(
        session: *mut switch_core_session_t,
        mtype: switch_media_type_t,
        flag: switch_codec_flag_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_media_get_timer(
        session: *mut switch_core_session_t,
        mtype: switch_media_type_t,
    ) -> *mut switch_timer_t;
}
extern "C" {
    pub fn switch_core_media_start_engine_function(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        engine_function: switch_engine_function_t,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn switch_core_media_end_engine_function(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    );
}
extern "C" {
    pub fn switch_core_session_start_video_thread(
        session: *mut switch_core_session_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_check_engine_function(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_core_session_video_reinit(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_media_read_lock_unlock(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        lock: switch_bool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_stop_media(session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_core_session_media_flow(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_media_flow_t;
}
extern "C" {
    pub fn switch_core_media_get_vid_params(
        session: *mut switch_core_session_t,
        vid_params: *mut switch_vid_params_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_blank_video(session: *mut switch_core_session_t, ms: u32);
}
extern "C" {
    pub fn switch_core_media_lock_video_file(
        session: *mut switch_core_session_t,
        rw: switch_rw_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_unlock_video_file(
        session: *mut switch_core_session_t,
        rw: switch_rw_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_set_video_file(
        session: *mut switch_core_session_t,
        fh: *mut switch_file_handle_t,
        rw: switch_rw_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_get_video_file(
        session: *mut switch_core_session_t,
        rw: switch_rw_t,
    ) -> *mut switch_file_handle_t;
}
extern "C" {
    pub fn switch_core_session_in_video_thread(
        session: *mut switch_core_session_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_media_check_dtls(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_core_media_set_outgoing_bitrate(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        bitrate: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_get_orig_bitrate(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> u32;
}
extern "C" {
    pub fn switch_core_media_set_media_bw_mult(session: *mut switch_core_session_t, mult: f32);
}
extern "C" {
    pub fn switch_core_media_get_media_bw_mult(session: *mut switch_core_session_t) -> f32;
}
extern "C" {
    pub fn switch_core_media_reset_jb(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_wait_for_video_input_params(
        session: *mut switch_core_session_t,
        timeout_ms: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_set_text_read_callback(
        session: *mut switch_core_session_t,
        func: switch_core_text_thread_callback_func_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_text_read_callback(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_read_text_frame(
        session: *mut switch_core_session_t,
        frame: *mut *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_write_text_frame(
        session: *mut switch_core_session_t,
        frame: *mut switch_frame_t,
        flags: switch_io_flag_t,
        stream_id: ::std::os::raw::c_int,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_text_factory_create(
        tfP: *mut *mut switch_rtp_text_factory_t,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_rtp_text_factory_destroy(
        tfP: *mut *mut switch_rtp_text_factory_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_print(
        session: *mut switch_core_session_t,
        data: *const ::std::os::raw::c_char,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_session_printf(
        session: *mut switch_core_session_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_core_media_get_msrp_session(
        session: *mut switch_core_session_t,
    ) -> *mut switch_msrp_session_t;
}
extern "C" {
    pub fn switch_core_media_set_smode(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
        smode: switch_media_flow_t,
        sdp_type: switch_sdp_type_t,
    );
}
extern "C" {
    pub fn switch_core_media_set_resolveice(resolve_ice: switch_bool_t);
}
extern "C" {
    pub fn switch_core_media_has_resolveice() -> switch_bool_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct switch_rtp_engine_s {
    _unused: [u8; 0],
}
pub type switch_rtp_engine_t = switch_rtp_engine_s;
extern "C" {
    pub fn switch_core_media_get_engine(
        session: *mut switch_core_session_t,
        media_type: ::std::os::raw::c_int,
    ) -> *mut switch_rtp_engine_t;
}
extern "C" {
    pub fn switch_core_media_get_codec(
        session: *mut switch_core_session_t,
        type_: switch_media_type_t,
    ) -> *mut switch_codec_t;
}
impl switch_jb_flag_t {
    pub const SJB_QUEUE_ONLY: switch_jb_flag_t = switch_jb_flag_t(1);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_jb_flag_t(pub ::std::os::raw::c_uint);
impl switch_jb_type_t {
    pub const SJB_VIDEO: switch_jb_type_t = switch_jb_type_t(0);
}
impl switch_jb_type_t {
    pub const SJB_AUDIO: switch_jb_type_t = switch_jb_type_t(1);
}
impl switch_jb_type_t {
    pub const SJB_TEXT: switch_jb_type_t = switch_jb_type_t(2);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct switch_jb_type_t(pub ::std::os::raw::c_uint);
extern "C" {
    pub fn switch_jb_create(
        jbp: *mut *mut switch_jb_t,
        type_: switch_jb_type_t,
        min_frame_len: u32,
        max_frame_len: u32,
        pool: *mut switch_memory_pool_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_set_frames(
        jb: *mut switch_jb_t,
        min_frame_len: u32,
        max_frame_len: u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_peek_frame(
        jb: *mut switch_jb_t,
        ts: u32,
        seq: u16,
        peek: ::std::os::raw::c_int,
        frame: *mut switch_frame_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_get_frames(
        jb: *mut switch_jb_t,
        min_frame_len: *mut u32,
        max_frame_len: *mut u32,
        cur_frame_len: *mut u32,
        highest_frame_len: *mut u32,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_destroy(jbp: *mut *mut switch_jb_t) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_reset(jb: *mut switch_jb_t);
}
extern "C" {
    pub fn switch_jb_debug_level(jb: *mut switch_jb_t, level: u8);
}
extern "C" {
    pub fn switch_jb_frame_count(jb: *mut switch_jb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_jb_poll(jb: *mut switch_jb_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_jb_put_packet(
        jb: *mut switch_jb_t,
        packet: *mut switch_rtp_packet_t,
        len: switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_get_last_read_len(jb: *mut switch_jb_t) -> switch_size_t;
}
extern "C" {
    pub fn switch_jb_get_packet(
        jb: *mut switch_jb_t,
        packet: *mut switch_rtp_packet_t,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_pop_nack(jb: *mut switch_jb_t) -> u32;
}
extern "C" {
    pub fn switch_jb_get_packet_by_seq(
        jb: *mut switch_jb_t,
        seq: u16,
        packet: *mut switch_rtp_packet_t,
        len: *mut switch_size_t,
    ) -> switch_status_t;
}
extern "C" {
    pub fn switch_jb_set_session(jb: *mut switch_jb_t, session: *mut switch_core_session_t);
}
extern "C" {
    pub fn switch_jb_set_jitter_estimator(
        jb: *mut switch_jb_t,
        jitter: *mut f64,
        samples_per_frame: u32,
        samples_per_second: u32,
    );
}
extern "C" {
    pub fn switch_jb_ts_mode(jb: *mut switch_jb_t, samples_per_frame: u32, samples_per_second: u32);
}
extern "C" {
    pub fn switch_jb_set_flag(jb: *mut switch_jb_t, flag: switch_jb_flag_t);
}
extern "C" {
    pub fn switch_jb_clear_flag(jb: *mut switch_jb_t, flag: switch_jb_flag_t);
}
extern "C" {
    pub fn switch_jb_get_nack_success(jb: *mut switch_jb_t) -> u32;
}
extern "C" {
    pub fn switch_jb_get_packets_per_frame(jb: *mut switch_jb_t) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kalman_estimator_s {
    pub val_estimate_last: f32,
    pub P_last: f32,
    pub Q: f32,
    pub R: f32,
    pub K: f32,
    pub P: f32,
    pub val_estimate: f32,
    pub val_measured: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cusum_kalman_detector_s {
    pub val_estimate_last: f32,
    pub val_desired_last: f32,
    pub P_last: f32,
    pub K_last: f32,
    pub delta: f32,
    pub measurement_noise_e: f32,
    pub variance_Re: f32,
    pub measurement_noise_v: f32,
    pub variance_Rv: f32,
    pub g_last: f32,
    pub epsilon: f32,
    pub h: f32,
    pub last_average: f32,
    pub last_q: f32,
    pub N: f32,
}
pub type kalman_estimator_t = kalman_estimator_s;
pub type cusum_kalman_detector_t = cusum_kalman_detector_s;
extern "C" {
    pub fn switch_kalman_init(est: *mut kalman_estimator_t, Q: f32, R: f32);
}
extern "C" {
    pub fn switch_kalman_cusum_init(
        detect_change: *mut cusum_kalman_detector_t,
        epsilon: f32,
        h: f32,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_kalman_estimate(
        est: *mut kalman_estimator_t,
        measurement: f32,
        system_model: ::std::os::raw::c_int,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_kalman_cusum_detect_change(
        detector: *mut cusum_kalman_detector_t,
        measurement: f32,
        rtt_avg: f32,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_kalman_is_slow_link(
        est_loss: *mut kalman_estimator_t,
        est_rtt: *mut kalman_estimator_t,
    ) -> switch_bool_t;
}
extern "C" {
    pub fn switch_vad_init(
        sample_rate: ::std::os::raw::c_int,
        channels: ::std::os::raw::c_int,
    ) -> *mut switch_vad_t;
}
extern "C" {
    pub fn switch_vad_set_mode(
        vad: *mut switch_vad_t,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn switch_vad_set_param(
        vad: *mut switch_vad_t,
        key: *const ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn switch_vad_process(
        vad: *mut switch_vad_t,
        data: *mut i16,
        samples: ::std::os::raw::c_uint,
    ) -> switch_vad_state_t;
}
extern "C" {
    pub fn switch_vad_get_state(vad: *mut switch_vad_t) -> switch_vad_state_t;
}
extern "C" {
    pub fn switch_vad_reset(vad: *mut switch_vad_t);
}
extern "C" {
    pub fn switch_vad_destroy(vad: *mut *mut switch_vad_t);
}
extern "C" {
    pub fn switch_vad_state2str(state: switch_vad_state_t) -> *const ::std::os::raw::c_char;
}
pub type teletone_process_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_tone_map_t {
    pub freqs: [teletone_process_t; 18usize],
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_dds_state {
    pub phase_rate: [u32; 4usize],
    pub scale_factor: u32,
    pub phase_accumulator: u32,
    pub tx_level: teletone_process_t,
}
pub type teletone_dds_state_t = teletone_dds_state;
extern "C" {
    pub static mut TELETONE_SINES: [i16; 128usize];
}
pub type teletone_audio_t = i16;
pub type tone_handler = ::std::option::Option<
    unsafe extern "C" fn(
        ts: *mut teletone_generation_session,
        map: *mut teletone_tone_map_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_generation_session {
    pub TONES: [teletone_tone_map_t; 127usize],
    pub channels: ::std::os::raw::c_int,
    pub rate: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub wait: ::std::os::raw::c_int,
    pub tmp_duration: ::std::os::raw::c_int,
    pub tmp_wait: ::std::os::raw::c_int,
    pub loops: ::std::os::raw::c_int,
    pub LOOPS: ::std::os::raw::c_int,
    pub decay_factor: f32,
    pub decay_direction: ::std::os::raw::c_int,
    pub decay_step: ::std::os::raw::c_int,
    pub volume: f32,
    pub debug: ::std::os::raw::c_int,
    pub debug_stream: *mut FILE,
    pub user_data: *mut ::std::os::raw::c_void,
    pub buffer: *mut teletone_audio_t,
    pub datalen: ::std::os::raw::c_int,
    pub samples: ::std::os::raw::c_int,
    pub dynamic: ::std::os::raw::c_int,
    pub handler: tone_handler,
}
pub type teletone_generation_session_t = teletone_generation_session;
extern "C" {
    pub fn teletone_set_tone(
        ts: *mut teletone_generation_session_t,
        index: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_set_map(map: *mut teletone_tone_map_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_init_session(
        ts: *mut teletone_generation_session_t,
        buflen: ::std::os::raw::c_int,
        handler: tone_handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_destroy_session(
        ts: *mut teletone_generation_session_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_mux_tones(
        ts: *mut teletone_generation_session_t,
        map: *mut teletone_tone_map_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_run(
        ts: *mut teletone_generation_session_t,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
impl teletone_hit_type_t {
    pub const TT_HIT_NONE: teletone_hit_type_t = teletone_hit_type_t(0);
}
impl teletone_hit_type_t {
    pub const TT_HIT_BEGIN: teletone_hit_type_t = teletone_hit_type_t(1);
}
impl teletone_hit_type_t {
    pub const TT_HIT_MIDDLE: teletone_hit_type_t = teletone_hit_type_t(2);
}
impl teletone_hit_type_t {
    pub const TT_HIT_END: teletone_hit_type_t = teletone_hit_type_t(3);
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct teletone_hit_type_t(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_goertzel_state_t {
    pub v2: f32,
    pub v3: f32,
    pub fac: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_dtmf_detect_state_t {
    pub hit1: ::std::os::raw::c_int,
    pub hit2: ::std::os::raw::c_int,
    pub hit3: ::std::os::raw::c_int,
    pub hit4: ::std::os::raw::c_int,
    pub dur: ::std::os::raw::c_int,
    pub zc: ::std::os::raw::c_int,
    pub row_out: [teletone_goertzel_state_t; 4usize],
    pub col_out: [teletone_goertzel_state_t; 4usize],
    pub row_out2nd: [teletone_goertzel_state_t; 4usize],
    pub col_out2nd: [teletone_goertzel_state_t; 4usize],
    pub energy: f32,
    pub lenergy: f32,
    pub current_sample: ::std::os::raw::c_int,
    pub digit: ::std::os::raw::c_char,
    pub current_digits: ::std::os::raw::c_int,
    pub detected_digits: ::std::os::raw::c_int,
    pub lost_digits: ::std::os::raw::c_int,
    pub digit_hits: [::std::os::raw::c_int; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_detection_descriptor_t {
    pub fac: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct teletone_multi_tone_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub tdd: [teletone_detection_descriptor_t; 18usize],
    pub gs: [teletone_goertzel_state_t; 18usize],
    pub gs2: [teletone_goertzel_state_t; 18usize],
    pub tone_count: ::std::os::raw::c_int,
    pub energy: f32,
    pub current_sample: ::std::os::raw::c_int,
    pub min_samples: ::std::os::raw::c_int,
    pub total_samples: ::std::os::raw::c_int,
    pub positives: ::std::os::raw::c_int,
    pub negatives: ::std::os::raw::c_int,
    pub hits: ::std::os::raw::c_int,
    pub positive_factor: ::std::os::raw::c_int,
    pub negative_factor: ::std::os::raw::c_int,
    pub hit_factor: ::std::os::raw::c_int,
}
extern "C" {
    pub fn teletone_multi_tone_init(mt: *mut teletone_multi_tone_t, map: *mut teletone_tone_map_t);
}
extern "C" {
    pub fn teletone_multi_tone_detect(
        mt: *mut teletone_multi_tone_t,
        sample_buffer: *mut i16,
        samples: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_dtmf_detect_init(
        dtmf_detect_state: *mut teletone_dtmf_detect_state_t,
        sample_rate: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn teletone_dtmf_detect(
        dtmf_detect_state: *mut teletone_dtmf_detect_state_t,
        sample_buffer: *mut i16,
        samples: ::std::os::raw::c_int,
    ) -> teletone_hit_type_t;
}
extern "C" {
    pub fn teletone_dtmf_get(
        dtmf_detect_state: *mut teletone_dtmf_detect_state_t,
        buf: *mut ::std::os::raw::c_char,
        dur: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teletone_goertzel_update(
        goertzel_state: *mut teletone_goertzel_state_t,
        sample_buffer: *mut i16,
        samples: ::std::os::raw::c_int,
    );
}
