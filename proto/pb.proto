syntax = "proto3";
package pb;
option go_package = "zrc/proto";

service zr {
    // Subscribe the FreeSWITCH events
    rpc Event (EventRequest) returns (stream EventReply);
    // Command sends a single command to the server and returns a response Event.
    rpc Command(CommandRequest) returns (CommandReply);
    // SendMsg sends messages to FreeSWITCH and returns a response Event.
    rpc SendMsg(SendMsgRequest) returns (SendMsgReply);
}

enum EventTypes {
    SWITCH_EVENT_CUSTOM = 0;
    SWITCH_EVENT_CLONE = 1;
    SWITCH_EVENT_CHANNEL_CREATE = 2;
    SWITCH_EVENT_CHANNEL_DESTROY = 3;
    SWITCH_EVENT_CHANNEL_STATE = 4;
    SWITCH_EVENT_CHANNEL_CALLSTATE = 5;
    SWITCH_EVENT_CHANNEL_ANSWER = 6;
    SWITCH_EVENT_CHANNEL_HANGUP = 7;
    SWITCH_EVENT_CHANNEL_HANGUP_COMPLETE = 8;
    SWITCH_EVENT_CHANNEL_EXECUTE = 9;
    SWITCH_EVENT_CHANNEL_EXECUTE_COMPLETE = 10;
    SWITCH_EVENT_CHANNEL_HOLD = 11;
    SWITCH_EVENT_CHANNEL_UNHOLD = 12;
    SWITCH_EVENT_CHANNEL_BRIDGE = 13;
    SWITCH_EVENT_CHANNEL_UNBRIDGE = 14;
    SWITCH_EVENT_CHANNEL_PROGRESS = 15;
    SWITCH_EVENT_CHANNEL_PROGRESS_MEDIA = 16;
    SWITCH_EVENT_CHANNEL_OUTGOING = 17;
    SWITCH_EVENT_CHANNEL_PARK = 18;
    SWITCH_EVENT_CHANNEL_UNPARK = 19;
    SWITCH_EVENT_CHANNEL_APPLICATION = 20;
    SWITCH_EVENT_CHANNEL_ORIGINATE = 21;
    SWITCH_EVENT_CHANNEL_UUID = 22;
    SWITCH_EVENT_API = 23;
    SWITCH_EVENT_LOG = 24;
    SWITCH_EVENT_INBOUND_CHAN = 25;
    SWITCH_EVENT_OUTBOUND_CHAN = 26;
    SWITCH_EVENT_STARTUP = 27;
    SWITCH_EVENT_SHUTDOWN = 28;
    SWITCH_EVENT_PUBLISH = 29;
    SWITCH_EVENT_UNPUBLISH = 30;
    SWITCH_EVENT_TALK = 31;
    SWITCH_EVENT_NOTALK = 32;
    SWITCH_EVENT_SESSION_CRASH = 33;
    SWITCH_EVENT_MODULE_LOAD = 34;
    SWITCH_EVENT_MODULE_UNLOAD = 35;
    SWITCH_EVENT_DTMF = 36;
    SWITCH_EVENT_MESSAGE = 37;
    SWITCH_EVENT_PRESENCE_IN = 38;
    SWITCH_EVENT_NOTIFY_IN = 39;
    SWITCH_EVENT_PRESENCE_OUT = 40;
    SWITCH_EVENT_PRESENCE_PROBE = 41;
    SWITCH_EVENT_MESSAGE_WAITING = 42;
    SWITCH_EVENT_MESSAGE_QUERY = 43;
    SWITCH_EVENT_ROSTER = 44;
    SWITCH_EVENT_CODEC = 45;
    SWITCH_EVENT_BACKGROUND_JOB = 46;
    SWITCH_EVENT_DETECTED_SPEECH = 47;
    SWITCH_EVENT_DETECTED_TONE = 48;
    SWITCH_EVENT_PRIVATE_COMMAND = 49;
    SWITCH_EVENT_HEARTBEAT = 50;
    SWITCH_EVENT_TRAP = 51;
    SWITCH_EVENT_ADD_SCHEDULE = 52;
    SWITCH_EVENT_DEL_SCHEDULE = 53;
    SWITCH_EVENT_EXE_SCHEDULE = 54;
    SWITCH_EVENT_RE_SCHEDULE = 55;
    SWITCH_EVENT_RELOADXML = 56;
    SWITCH_EVENT_NOTIFY = 57;
    SWITCH_EVENT_PHONE_FEATURE = 58;
    SWITCH_EVENT_PHONE_FEATURE_SUBSCRIBE = 59;
    SWITCH_EVENT_SEND_MESSAGE = 60;
    SWITCH_EVENT_RECV_MESSAGE = 61;
    SWITCH_EVENT_REQUEST_PARAMS = 62;
    SWITCH_EVENT_CHANNEL_DATA = 63;
    SWITCH_EVENT_GENERAL = 64;
    SWITCH_EVENT_COMMAND = 65;
    SWITCH_EVENT_SESSION_HEARTBEAT = 66;
    SWITCH_EVENT_CLIENT_DISCONNECTED = 67;
    SWITCH_EVENT_SERVER_DISCONNECTED = 68;
    SWITCH_EVENT_SEND_INFO = 69;
    SWITCH_EVENT_RECV_INFO = 70;
    SWITCH_EVENT_RECV_RTCP_MESSAGE = 71;
    SWITCH_EVENT_SEND_RTCP_MESSAGE = 72;
    SWITCH_EVENT_CALL_SECURE = 73;
    SWITCH_EVENT_NAT = 74;
    SWITCH_EVENT_RECORD_START = 75;
    SWITCH_EVENT_RECORD_STOP = 76;
    SWITCH_EVENT_PLAYBACK_START = 77;
    SWITCH_EVENT_PLAYBACK_STOP = 78;
    SWITCH_EVENT_CALL_UPDATE = 79;
    SWITCH_EVENT_FAILURE = 80;
    SWITCH_EVENT_SOCKET_DATA = 81;
    SWITCH_EVENT_MEDIA_BUG_START = 82;
    SWITCH_EVENT_MEDIA_BUG_STOP = 83;
    SWITCH_EVENT_CONFERENCE_DATA_QUERY = 84;
    SWITCH_EVENT_CONFERENCE_DATA = 85;
    SWITCH_EVENT_CALL_SETUP_REQ = 86;
    SWITCH_EVENT_CALL_SETUP_RESULT = 87;
    SWITCH_EVENT_CALL_DETAIL = 88;
    SWITCH_EVENT_DEVICE_STATE = 89;
    SWITCH_EVENT_TEXT = 90;
    SWITCH_EVENT_SHUTDOWN_REQUESTED = 91;
    SWITCH_EVENT_ALL = 92;
}

message Topic{
    EventTypes id = 1;
    string subclass = 2;
}

message EventRequest {
    repeated Topic topics = 1;
}

message Event {
    uint32 event_id = 1;
    uint32 priority = 2;
    string owner = 3;
    string subclass_name = 4;
    uint64 key = 5;
    int32 flags = 6;
    map<string, string> headers = 7;
    string body = 8;
}

message EventReply {
    uint64 seq = 1;
    Event event = 2;
}

message CommandRequest {
    string command = 1;
    bool sync = 2;
}

message CommandReply {
    int32 code = 1;
    string message = 2;
}

message SendMsgRequest {
    map<string, string> msg  = 1;
}

message SendMsgReply{
    int32 code = 1;
    string message = 2;
}